{
	// Place your algorithm ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"BIT": {
		"scope": "cpp",
		"prefix": "BIT",
		"body": [
			"// Binary Indexed Tree.",
			"template <typename T>",
			"class BIT {",
			"    int m_sz;               // m_sz:=(要素数).",
			"    std::vector<T> m_tree;  // 1-based index.",
			"",
			"    void build() {",
			"        for(int i = 1; i < size(); ++i) {",
			"            int j = i + (i & -i);",
			"            if(j <= size()) m_tree[j] += m_tree[i];",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    BIT() : BIT(0){};",
			"    explicit BIT(size_t n) : m_sz(n), m_tree(n + 1, 0) {}",
			"    explicit BIT(const std::vector<T> &v) : m_sz(v.size()), m_tree(v.size() + 1) {",
			"        std::copy(v.begin(), v.end(), m_tree.begin() + 1);",
			"        build();",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return m_sz; }",
			"    // k番目の要素にaを足す．O(logN).",
			"    void add(int k, T a) {",
			"        assert(1 <= k and k <= size());",
			"        for(; k <= size(); k += (k & -k)) m_tree[k] += a;",
			"    }",
			"    // 区間[1,r]の総和を求める．O(logN).",
			"    T sum(int r) const {",
			"        assert(0 <= r and r <= size());",
			"        T res = 0;",
			"        for(; r > 0; r -= (r & -r)) res += m_tree[r];",
			"        return res;",
			"    }",
			"    // 区間[l,r]の総和を求める．O(logN).",
			"    T sum(int l, int r) const {",
			"        assert(1 <= l and l <= r and r <= size());",
			"        return sum(r) - sum(l - 1);",
			"    }",
			"    // 全要素をaで埋める．O(N).",
			"    void fill(T a = 0) {",
			"        std::fill(m_tree.begin() + 1, m_tree.end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree"
	},
	"BIT0": {
		"scope": "cpp",
		"prefix": "BIT0",
		"body": [
			"// Binary Indexed Tree (0-based index).",
			"template <typename T>",
			"class BIT0 {",
			"    int m_sz;               // m_sz:=(要素数).",
			"    std::vector<T> m_tree;  // 0-based index.",
			"",
			"    void build() {",
			"        for(int i = 0; i < size() - 1; ++i) {",
			"            int j = (i | (i + 1));",
			"            if(j < size()) m_tree[j] += m_tree[i];",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    BIT0() : BIT0(0){};",
			"    explicit BIT0(size_t n) : m_sz(n), m_tree(n, 0) {}",
			"    explicit BIT0(const std::vector<T> &v) : m_sz(v.size()), m_tree(v) {",
			"        build();",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return m_sz; }",
			"    // k番目の要素にaを足す．O(logN).",
			"    void add(int k, T a) {",
			"        assert(0 <= k and k < size());",
			"        for(; k < size(); k |= k + 1) m_tree[k] += a;",
			"    }",
			"    // 区間[0,r)の総和を求める．O(logN).",
			"    T sum(int r) const {",
			"        assert(0 <= r and r <= size());",
			"        T res = 0;",
			"        for(r = r - 1; r >= 0; r = (r & (r + 1)) - 1) res += m_tree[r];",
			"        return res;",
			"    }",
			"    // 区間[l,r)の総和を求める．O(logN).",
			"    T sum(int l, int r) const {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        return sum(r) - sum(l);",
			"    }",
			"    // 全要素をaで埋める．O(N).",
			"    void fill(T a = 0) {",
			"        std::fill(m_tree.begin(), m_tree.end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree (0-based index)"
	},
	"BIT2D": {
		"scope": "cpp",
		"prefix": "BIT2D",
		"body": [
			"// Binary Indexed Tree 2D.",
			"template <typename T>",
			"class BIT2D {",
			"    int m_h, m_w;",
			"    std::vector<std::vector<T> > m_dat;  // 1-based index.",
			"",
			"    void build() {",
			"        for(int i = 1; i <= height(); ++i)",
			"            for(int j = 1; j <= width(); ++j) {",
			"                int ni = i + (i & -i), nj = j + (j & -j);",
			"                bool flag1 = (ni <= height()), flag2 = (nj <= width());",
			"                if(flag1) m_dat[ni][j] += m_dat[i][j];",
			"                if(flag2) m_dat[i][nj] += m_dat[i][j];",
			"                if(flag1 and flag2) m_dat[ni][nj] -= m_dat[i][j];",
			"            }",
			"    }",
			"",
			"public:",
			"    // constructor. O(H*W).",
			"    BIT2D() : BIT2D(0, 0) {}",
			"    explicit BIT2D(size_t h, size_t w) : m_h(h), m_w(w), m_dat(h + 1, std::vector<T>(w + 1, 0)) {}",
			"    explicit BIT2D(const std::vector<std::vector<T> > &dat)",
			"        : m_h(dat.size()), m_w(dat[0].size()), m_dat(dat.size() + 1, std::vector<T>(dat[0].size() + 1)) {",
			"        for(int i = 0; i < height(); ++i) std::copy(dat[i].begin(), dat[i].end(), m_dat[i + 1].begin() + 1);",
			"        build();",
			"    }",
			"",
			"    int height() const { return m_h; }",
			"    int width() const { return m_w; }",
			"    // 全要素をaで埋める．O(H*W).",
			"    void fill(T a = 0) {",
			"        for(int i = 1; i <= height(); ++i) std::fill(m_dat[i].begin() + 1, m_dat[i].end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // 座標(x,y)にaを加算する．O((logH)*logW).",
			"    void add(int y, int x, T a) {",
			"        assert(1 <= y and y <= height());",
			"        assert(1 <= x and x <= width());",
			"        for(int i = y; i <= height(); i += (i & -i)) {",
			"            for(int j = x; j <= width(); j += (j & -j)) m_dat[i][j] += a;",
			"        }",
			"    }",
			"    // 区間[1,y]かつ[1,x]の総和を求める．O((logH)*logW).",
			"    T sum(int y, int x) const {",
			"        assert(0 <= y and y <= height());",
			"        assert(0 <= x and x <= width());",
			"        T res = 0;",
			"        for(int i = y; i > 0; i -= (i & -i)) {",
			"            for(int j = x; j > 0; j -= (j & -j)) res += m_dat[i][j];",
			"        }",
			"        return res;",
			"    }",
			"    // 区間[y,yy]かつ[x,xx]の総和を求める．",
			"    T sum(int y, int x, int yy, int xx) const {",
			"        assert(1 <= y and y <= yy and yy <= height());",
			"        assert(1 <= x and x <= xx and xx <= width());",
			"        return sum(yy, xx) - sum(yy, x - 1) - sum(y - 1, xx) + sum(y - 1, x - 1);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree 2D"
	},
	"BIT2D0": {
		"scope": "cpp",
		"prefix": "BIT2D0",
		"body": [
			"// Binary Indexed Tree 2D (0-based index).",
			"template <typename T>",
			"class BIT2D0 {",
			"    int m_h, m_w;",
			"    std::vector<std::vector<T> > m_dat;  // 0-based index.",
			"",
			"    void build() {",
			"        for(int i = 0; i < height(); ++i) {",
			"            for(int j = 0; j < width(); ++j) {",
			"                int ni = i | (i + 1), nj = j | (j + 1);",
			"                bool flag1 = (ni < height()), flag2 = (nj < width());",
			"                if(flag1) m_dat[ni][j] += m_dat[i][j];",
			"                if(flag2) m_dat[i][nj] += m_dat[i][j];",
			"                if(flag1 and flag2) m_dat[ni][nj] -= m_dat[i][j];",
			"            }",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(H*W).",
			"    BIT2D0() : BIT2D0(0, 0) {}",
			"    explicit BIT2D0(size_t h, size_t w) : m_h(h), m_w(w), m_dat(h, std::vector<T>(w, 0)) {}",
			"    explicit BIT2D0(const std::vector<std::vector<T> > &dat) : m_h(dat.size()), m_w(dat[0].size()), m_dat(dat) {",
			"        build();",
			"    }",
			"",
			"    int height() const { return m_h; }",
			"    int width() const { return m_w; }",
			"    // 全要素をaで埋める．O(H*W).",
			"    void fill(T a = 0) {",
			"        for(int i = 0; i < height(); ++i) std::fill(m_dat[i].begin(), m_dat[i].end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // 座標(x,y)にaを加算する．O((logH)*logW).",
			"    void add(int y, int x, T a) {",
			"        assert(0 <= y and y < height());",
			"        assert(0 <= x and x < width());",
			"        for(int i = y; i < height(); i |= i + 1) {",
			"            for(int j = x; j < width(); j |= j + 1) m_dat[i][j] += a;",
			"        }",
			"    }",
			"    // 区間[0,y)かつ[0,x)の総和を求める．O((logH)*logW).",
			"    T sum(int y, int x) const {",
			"        assert(0 <= y and y <= height());",
			"        assert(0 <= x and x <= width());",
			"        T res = 0;",
			"        for(int i = y - 1; i >= 0; i = (i & (i + 1)) - 1) {",
			"            for(int j = x - 1; j >= 0; j = (j & (j + 1)) - 1) res += m_dat[i][j];",
			"        }",
			"        return res;",
			"    }",
			"    // 区間[y,yy)かつ[x,xx)の総和を求める．",
			"    T sum(int y, int x, int yy, int xx) const {",
			"        assert(0 <= y and y <= yy and yy <= height());",
			"        assert(0 <= x and x <= xx and xx <= width());",
			"        return sum(yy, xx) - sum(yy, x) - sum(y, xx) + sum(y, x);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree 2D (0-based index)"
	},
	"BellmanFord": {
		"scope": "cpp",
		"prefix": "BellmanFord",
		"body": [
			"template <typename T>",
			"class BellmanFord {",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点である有向辺のリスト).",
			"    std::vector<T> m_d;                   // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;               // m_pre[t]:=(ノードtを訪問する直前のノード番号). 逆方向経路．",
			"    T m_inf;",
			"",
			"public:",
			"    BellmanFord() : BellmanFord(0) {}",
			"    explicit BellmanFord(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_d(vn, inf), m_pre(vn, -1), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back((Edge){to, cost});",
			"    }",
			"    // グラフ全体から負閉路を検出する．O(|V|*|E|).",
			"    bool find_negative_cycle() const {",
			"        std::vector<T> nd(size(), 0);",
			"        for(int i = 0; i < size(); ++i) {",
			"            bool update = false;",
			"            for(int v = 0; v < size(); ++v) {",
			"                for(const Edge &e : m_g[v]) {",
			"                    if(nd[e.to] > nd[v] + e.cost) {",
			"                        nd[e.to] = nd[v] + e.cost;",
			"                        update = true;",
			"                    }",
			"                }",
			"            }",
			"            if(!update) break;",
			"            if(i == size() - 1) return true;  // 負閉路あり．",
			"        }",
			"        return false;",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|V|*|E|).",
			"    void bellman_ford(int s) {",
			"        assert(0 <= s and s < size());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        for(int i = 0; i < 2 * size(); ++i) {",
			"            bool update = false;",
			"            for(int v = 0; v < size(); ++v) {",
			"                if(m_d[v] == infinity()) continue;",
			"                for(const Edge &e : m_g[v]) {",
			"                    if(m_d[e.to] == -infinity()) continue;",
			"                    if(m_d[e.to] > m_d[v] + e.cost) {",
			"                        if(i < size() - 1) {",
			"                            m_d[e.to] = m_d[v] + e.cost;",
			"                            m_pre[e.to] = v;",
			"                        } else {",
			"                            m_d[e.to] = -infinity();",
			"                        }",
			"                        update = true;",
			"                    }",
			"                }",
			"            }",
			"            if(!update) break;",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < size());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> shortest_path(int t) const {",
			"        assert(0 <= t and t < size());",
			"        assert(-infinity() < m_d[t] and m_d[t] < infinity());",
			"        std::vector<int> path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "単一始点最短経路"
	},
	"BinaryTrie": {
		"scope": "cpp",
		"prefix": "BinaryTrie",
		"body": [
			"// 非負整数値を扱うTrie木．",
			"template <typename T = unsigned, int B = 32, typename U = int>  // T:非負整数値の型, B:ビット長, U:サイズの型.",
			"class BinaryTrie {",
			"    struct Node {",
			"        U cnt;        // cnt:=(自身を根とする部分木に含まれる要素数).",
			"        Node *ch[2];  // ch[]:=(子のポインタ). 二分木．",
			"        Node() : cnt(0), ch({nullptr, nullptr}) {}",
			"    };",
			"",
			"    Node *root;  // root:=(根のポインタ).",
			"",
			"    void delete_subtree(Node *rt) {",
			"        if(rt == nullptr) return;",
			"        for(bool bit : {0, 1}) {",
			"            delete_subtree(rt->ch[bit]);",
			"            rt->ch[bit] = nullptr;",
			"        }",
			"        delete rt;",
			"        rt = nullptr;",
			"    }",
			"    Node *add(Node *p, T x, U cnt, int shift = B - 1) {  // Top down.",
			"        if(p == nullptr) p = new Node;",
			"        p->cnt += cnt;",
			"        if(shift < 0) return p;",
			"        bool bit = (x >> shift) & (T)1;",
			"        p->ch[bit] = add(p->ch[bit], x, cnt, shift - 1);",
			"        return p;",
			"    }",
			"    Node *sub(Node *p, T x, U cnt, int shift = B - 1) {  // Top down.",
			"        assert(p != nullptr and p->cnt >= cnt);",
			"        p->cnt -= cnt;",
			"        if(p->cnt == 0) {",
			"            delete_subtree(p);",
			"            return p = nullptr;",
			"        }",
			"        if(shift < 0) return p;",
			"        bool bit = (x >> shift) & (T)1;",
			"        p->ch[bit] = sub(p->ch[bit], x, cnt, shift - 1);",
			"        return p;",
			"    }",
			"    T get_min(Node *p, T bias = 0, int shift = B - 1) const {",
			"        assert(p != nullptr);",
			"        if(shift < 0) return 0;",
			"        bool bit = (bias >> shift) & (T)1;",
			"        if(p->ch[bit] == nullptr) bit = !bit;",
			"        return get_min(p->ch[bit], bias, shift - 1) | ((T)bit << shift);",
			"    }",
			"    T get(Node *p, U k, T bias = 0, int shift = B - 1) const {",
			"        assert(p != nullptr);",
			"        if(shift < 0) return 0;",
			"        bool bit = (bias >> shift) & (T)1;",
			"        U m = (p->ch[bit] == nullptr ? 0 : p->ch[bit]->cnt);",
			"        if(k < m) {",
			"            return get(p->ch[bit], k, bias, shift - 1) | ((T)bit << shift);",
			"        } else {",
			"            bit = !bit;",
			"            return get(p->ch[bit], k - m, bias, shift - 1) | ((T)bit << shift);",
			"        }",
			"    }",
			"    U get_lower(Node *p, T x, int shift = B - 1) const {",
			"        if(p == nullptr or shift < 0) return 0;",
			"        bool bit = (x >> shift) & (T)1;",
			"        return ((bit and p->ch[0] != nullptr) ? p->ch[0]->cnt : 0) + get_lower(p->ch[bit], x, shift - 1);",
			"    }",
			"    void dfs(std::ostream &os, Node *p, std::bitset<B> &bits, int shift = B - 1) const {",
			"        if(shift < 0) {",
			"            os << \"[\" << bits << \"] (num: \" << (T)bits.to_ullong() << \", cnt: \" << p->cnt << \")\\n\";",
			"            return;",
			"        }",
			"        for(bool bit : {0, 1}) {",
			"            if(p->ch[bit] != nullptr) {",
			"                bits.set(shift, bit);",
			"                dfs(os, p->ch[bit], bits, shift - 1);",
			"            }",
			"        }",
			"    }",
			"",
			"public:",
			"    BinaryTrie() : root(nullptr) {",
			"        static_assert(B >= 1);",
			"    }",
			"    ~BinaryTrie() {",
			"        clear();",
			"    }",
			"",
			"    // 集合内でk番目に小さい値を取得する．O(B).",
			"    T operator[](U k) const {",
			"        assert(0 <= k and k < size());",
			"        return get(root, k);",
			"    }",
			"",
			"    // 要素が空かどうか判定する．O(1).",
			"    bool empty() const { return root == nullptr; }",
			"    // 要素数を返す．O(1).",
			"    U size() const { return (root == nullptr ? 0 : root->cnt); }",
			"    // 値xの要素数を返す．O(B).",
			"    U count(T x) const {",
			"        if(root == nullptr) return 0;",
			"        Node *p = root;",
			"        for(int i = B - 1; i >= 0; --i) {",
			"            p = p->ch[(x >> i) & (T)1];",
			"            if(p == nullptr) return 0;",
			"        }",
			"        return p->cnt;",
			"    }",
			"    // 集合に値xを追加する．O(B).",
			"    void insert(T x, U cnt = 1) { root = add(root, x, cnt); }",
			"    // 集合から値xを削除する．O(B).",
			"    void erase(T x, U cnt = 1) {",
			"        assert(count(x) >= cnt);",
			"        root = sub(root, x, cnt);",
			"    }",
			"    // 集合内で値xとXORしたときに最小となる値を取得する．O(B).",
			"    T min_element(T x = 0) const { return get_min(root, x); }",
			"    // 集合内で値xとXORしたときに最大となる値を取得する．O(B).",
			"    T max_element(T x = 0) const { return get_min(root, ~x); }",
			"    // 集合内で値xとXORしたときにk番目に小さい値を取得する．O(B).",
			"    T kth_element(U k, T x = 0) const {",
			"        assert(0 <= k and k < size());",
			"        return get(root, k, x);",
			"    }",
			"    // 集合内で値x以上の最小の要素番号を取得する．O(B).",
			"    U lower_bound(T x) const { return get_lower(root, x); }",
			"    // 集合内で値xより大きい最小の要素番号を取得する．O(B).",
			"    U upper_bound(T x) const { return get_lower(root, x + 1); }",
			"    // 全要素を削除する．",
			"    void clear() {",
			"        delete_subtree(root);",
			"        root = nullptr;",
			"    }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const BinaryTrie &ob) {",
			"        if(ob.empty()) return os;",
			"        std::bitset<B> bits(0);",
			"        ob.dfs(os, ob.root, bits);",
			"    }",
			"};"
		],
		"description": "非負整数値を扱うTrie木"
	},
	"Combination": {
		"scope": "cpp",
		"prefix": "Combination",
		"body": [
			"// 二項係数（mod付き）．",
			"template <int mod>",
			"class Combination {",
			"    int m_sz;                       // m_sz:=(要素数). 制約は m_sz<=mod．",
			"    std::vector<long long> m_fact;  // m_fact[n]:=(nの階乗).",
			"    std::vector<long long> m_inv;   // m_inv[n]:=(nの逆元).",
			"    std::vector<long long> m_finv;  // m_finv[n]:=(nの階乗の逆元).",
			"",
			"public:",
			"    // constructor. O(N).",
			"    Combination() : Combination(51e4) {}",
			"    explicit Combination(size_t sz) : m_sz(sz), m_fact(sz), m_inv(sz), m_finv(sz) {",
			"        static_assert(mod >= 1);",
			"        assert(2 <= m_sz and m_sz <= mod);",
			"        m_fact[0] = m_fact[1] = 1;",
			"        m_inv[1] = 1;",
			"        m_finv[0] = m_finv[1] = 1;",
			"        for(int n = 2; n < m_sz; ++n) {",
			"            m_fact[n] = m_fact[n - 1] * n % mod;",
			"            m_inv[n] = mod - m_inv[mod % n] * (mod / n) % mod;",
			"            m_finv[n] = m_finv[n - 1] * m_inv[n] % mod;",
			"        }",
			"    }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    // 階乗．",
			"    long long factorial(int n) const {",
			"        assert(0 <= n and n < m_sz);",
			"        return m_fact[n];",
			"    }",
			"    // 逆元．",
			"    long long inverse(int n) const {",
			"        assert(1 <= n and n < m_sz);",
			"        return m_inv[n];",
			"    }",
			"    // 階乗の逆元．",
			"    long long inverse_fact(int n) const {",
			"        assert(0 <= n and n < m_sz);",
			"        return m_finv[n];",
			"    }",
			"    // 順列．",
			"    long long nPk(int n, int k) const {",
			"        assert(0 <= k and k <= n and n < m_sz);",
			"        return m_fact[n] * m_finv[n - k] % mod;",
			"    }",
			"    // 組合せ．",
			"    long long nCk(int n, int k) const {",
			"        assert(0 <= k and k <= n and n < m_sz);",
			"        return m_fact[n] * m_finv[n - k] % mod * m_finv[k] % mod;",
			"    }",
			"    // 重複組合せ．",
			"    long long nHk(int n, int k) const { return nCk(k + n - 1, n - 1); }",
			"};",
			"",
			"using Combination998244353 = Combination<998'244'353>;",
			"using Combination1000000007 = Combination<1'000'000'007>;"
		],
		"description": "二項係数（mod付き）"
	},
	"Dijkstra": {
		"scope": "cpp",
		"prefix": "Dijkstra",
		"body": [
			"template <typename T>",
			"class Dijkstra {",
			"    template <typename Type>",
			"    using r_priority_queue = std::priority_queue<Type, std::vector<Type>, std::greater<Type> >;",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点である有向辺のリスト).",
			"    std::vector<T> m_d;                   // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;               // m_pre[t]:=(ノードtを訪問する直前のノードの番号). 逆方向経路．",
			"    T m_inf;",
			"",
			"public:",
			"    Dijkstra() : Dijkstra(0) {}",
			"    explicit Dijkstra(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_d(vn, inf), m_pre(vn, -1), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back((Edge){to, cost});",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|E|*log|V|).",
			"    void dijkstra(int s) {",
			"        assert(0 <= s and s < size());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        r_priority_queue<std::pair<T, int> > pque;",
			"        pque.emplace(0, s);",
			"        while(!pque.empty()) {",
			"            auto [dist, v] = pque.top();",
			"            pque.pop();",
			"            if(m_d[v] < dist) continue;",
			"            for(const Edge &e : m_g[v]) {",
			"                if(m_d[e.to] > m_d[v] + e.cost) {",
			"                    m_d[e.to] = m_d[v] + e.cost;",
			"                    m_pre[e.to] = v;",
			"                    pque.emplace(m_d[e.to], e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < size());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> shortest_path(int t) const {",
			"        assert(0 <= t and t < size());",
			"        std::vector<int> path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "単一始点最短経路"
	},
	"Dinic": {
		"scope": "cpp",
		"prefix": "Dinic",
		"body": [
			"template <typename T>",
			"class Dinic {",
			"    struct Edge {",
			"        int to;       // to:=(行き先ノード).",
			"        T cap, rest;  // cap:=(容量), rest:=(残容量).",
			"        int rev;      // rev:=(逆辺イテレータ).",
			"        explicit Edge(int to_, T cap_, int rev_) : to(to_), cap(cap_), rest(cap_), rev(rev_) {}",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点の隣接辺リスト).",
			"    std::vector<int> m_hop;               // m_hop[v]:=(ノードsからvまでのホップ数).",
			"    std::vector<int> m_iter;              // m_iter[v]:=(m_g[v][]の次に調べるべきイテレータ).",
			"    T m_inf;",
			"",
			"    // ノードsから各ノードへのホップ数を計算する．",
			"    void bfs(int s) {",
			"        std::fill(m_hop.begin(), m_hop.end(), -1);",
			"        m_hop[s] = 0;",
			"        std::queue<int> que;",
			"        que.push(s);",
			"        while(!que.empty()) {",
			"            int v = que.front();",
			"            que.pop();",
			"            for(const Edge &e : m_g[v]) {",
			"                if(e.rest > 0 and m_hop[e.to] == -1) {",
			"                    m_hop[e.to] = m_hop[v] + 1;",
			"                    que.push(e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"    // 増加パスを探す．",
			"    T dfs(int v, int t, T flow) {",
			"        if(v == t) return flow;",
			"        const int n = m_g[v].size();",
			"        for(int &i = m_iter[v]; i < n; ++i) {",
			"            Edge &e = m_g[v][i];",
			"            if(e.rest > 0 and m_hop[v] < m_hop[e.to]) {",
			"                T res = dfs(e.to, t, std::min(flow, e.rest));",
			"                if(res > 0) {",
			"                    e.rest -= res;",
			"                    m_g[e.to][e.rev].cap += res;",
			"                    return res;",
			"                }",
			"            }",
			"        }",
			"        return 0;",
			"    }",
			"",
			"public:",
			"    Dinic() : Dinic(0) {}",
			"    explicit Dinic(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_hop(vn), m_iter(vn), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 容量capの有向辺を追加する．",
			"    void add_directed_edge(int from, int to, T cap) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        assert(from != to);",
			"        m_g[from].emplace_back(to, cap, m_g[to].size());",
			"        m_g[to].emplace_back(from, 0, m_g[from].size() - 1);",
			"    }",
			"    // 容量capの無向辺を追加する．",
			"    void add_undirected_edge(int u, int v, T cap) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        assert(u != v);",
			"        m_g[u].emplace_back(v, cap, m_g[v].size());",
			"        m_g[v].emplace_back(u, cap, m_g[u].size() - 1);",
			"    }",
			"    // ノードsからtへの最大流を求める．O(|E|*(|V|^2)).",
			"    T max_flow(int s, int t) {",
			"        assert(0 <= s and s < size());",
			"        assert(0 <= t and t < size());",
			"        for(std::vector<Edge> &es : m_g) {",
			"            for(Edge &e : es) e.rest = e.cap;",
			"        }",
			"        T flow = 0;",
			"        while(flow < infinity()) {",
			"            bfs(s);",
			"            if(m_hop[t] == -1) return flow;",
			"            std::fill(m_iter.begin(), m_iter.end(), 0);",
			"            T tmp;",
			"            while((tmp = dfs(s, t, infinity())) > 0) flow += tmp;",
			"        }",
			"        return infinity();",
			"    }",
			"};"
		],
		"description": "最大流"
	},
	"DynamicModint": {
		"scope": "cpp",
		"prefix": "DynamicModint",
		"body": [
			"template <int id>",
			"class DynamicModint {",
			"    static int mod;",
			"    long long val;",
			"",
			"public:",
			"    DynamicModint() : DynamicModint(0) {}",
			"    DynamicModint(long long val_) : val(val_) {",
			"        assert(mod >= 1);",
			"        val %= mod;",
			"        if(val < 0) val += mod;",
			"    }",
			"",
			"    DynamicModint operator+() const { return DynamicModint(*this); }",
			"    DynamicModint operator-() const { return DynamicModint(0) - (*this); }",
			"    DynamicModint &operator++() {",
			"        val++;",
			"        if(val == mod) val = 0;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator--() {",
			"        if(val == 0) val = mod;",
			"        val--;",
			"        return *this;",
			"    }",
			"    DynamicModint operator++(int) {",
			"        DynamicModint res = *this;",
			"        ++(*this);",
			"        return res;",
			"    }",
			"    DynamicModint operator--(int) {",
			"        DynamicModint res = *this;",
			"        --(*this);",
			"        return res;",
			"    }",
			"    DynamicModint &operator+=(const DynamicModint &a) {",
			"        val += a.val;",
			"        if(val >= mod) val -= mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator-=(const DynamicModint &a) {",
			"        val -= a.val;",
			"        if(val < 0) val += mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator*=(const DynamicModint &a) {",
			"        val = val * a.val % mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator/=(const DynamicModint &a) { return (*this) *= a.inv(); }",
			"",
			"    friend DynamicModint operator+(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) += y; }",
			"    friend DynamicModint operator-(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) -= y; }",
			"    friend DynamicModint operator*(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) *= y; }",
			"    friend DynamicModint operator/(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) /= y; }",
			"    friend bool operator==(const DynamicModint &x, const DynamicModint &y) { return x.val == y.val; }",
			"    friend bool operator!=(const DynamicModint &x, const DynamicModint &y) { return x.val != y.val; }",
			"    friend std::istream &operator>>(std::istream &is, DynamicModint &x) {",
			"        is >> x.val;",
			"        x.val %= mod;",
			"        if(x.val < 0) x.val += mod;",
			"        return is;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const DynamicModint &x) { return os << x.val; }",
			"",
			"    static constexpr int get_id() { return id; }",
			"    static void set_modulus(int mod_) {",
			"        assert(mod_ >= 1);",
			"        mod = mod_;",
			"    }",
			"    static int modulus() { return mod; }",
			"    long long value() const { return val; }",
			"    DynamicModint inv() const {",
			"        long long a = val, b = mod, u = 1, v = 0;",
			"        while(b) {",
			"            long long t = a / b;",
			"            a -= t * b, u -= t * v;",
			"            std::swap(a, b), std::swap(u, v);",
			"        }",
			"        return DynamicModint(u);",
			"    }",
			"",
			"    friend DynamicModint mod_pow(const DynamicModint &x, long long k) {",
			"        if(k < 0) return mod_pow(x.inv(), -k);",
			"        DynamicModint res = 1, tmp = x;",
			"        while(k > 0) {",
			"            if(k & 1LL) res *= tmp;",
			"            tmp = tmp * tmp;",
			"            k >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"};",
			"",
			"template <int id>",
			"int DynamicModint<id>::mod = 1'000'000'007;"
		],
		"description": "動的Modint"
	},
	"FordFulkerson": {
		"scope": "cpp",
		"prefix": "FordFulkerson",
		"body": [
			"template <typename T>",
			"class FordFulkerson {",
			"    struct Edge {",
			"        int to;       // to:=(行き先ノード).",
			"        T cap, rest;  // cap:=(容量), rest:=(残容量).",
			"        int rev;      // rev:=(逆辺イテレータ).",
			"        explicit Edge(int to_, T cap_, int rev_) : to(to_), cap(cap_), rest(cap_), rev(rev_) {}",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点の隣接辺リスト).",
			"    std::vector<bool> m_seen;             // m_seen[v]:=(DFSでノードvを調べたか).",
			"    T m_inf;",
			"",
			"    // 増加パスを探す．",
			"    T dfs(int v, int t, T flow) {",
			"        if(v == t) return flow;",
			"        m_seen[v] = true;",
			"        for(Edge &e : m_g[v]) {",
			"            if(!m_seen[e.to] and e.rest > 0) {",
			"                T res = dfs(e.to, t, std::min(flow, e.rest));",
			"                if(res > 0) {",
			"                    e.rest -= res;",
			"                    m_g[e.to][e.rev].cap += res;",
			"                    return res;",
			"                }",
			"            }",
			"        }",
			"        return 0;",
			"    }",
			"",
			"public:",
			"    FordFulkerson() : FordFulkerson(0) {}",
			"    explicit FordFulkerson(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_seen(vn), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 容量capの有向辺を追加する．",
			"    void add_directed_edge(int from, int to, T cap) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        assert(from != to);",
			"        m_g[from].emplace_back(to, cap, m_g[to].size());",
			"        m_g[to].emplace_back(from, 0, m_g[from].size() - 1);",
			"    }",
			"    // 容量capの無向辺を追加する．",
			"    void add_undirected_edge(int u, int v, T cap) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        assert(u != v);",
			"        m_g[u].emplace_back(v, cap, m_g[v].size());",
			"        m_g[v].emplace_back(u, cap, m_g[u].size() - 1);",
			"    }",
			"    // ノードsからtへの最大流を求める．O(F*|E|).",
			"    T max_flow(int s, int t) {",
			"        assert(0 <= s and s < size());",
			"        assert(0 <= t and t < size());",
			"        for(std::vector<Edge> &es : m_g) {",
			"            for(Edge &e : es) e.rest = e.cap;",
			"        }",
			"        T flow = 0;",
			"        while(flow < infinity()) {",
			"            std::fill(m_seen.begin(), m_seen.end(), false);",
			"            T tmp = dfs(s, t, infinity());",
			"            if(tmp == 0) return flow;",
			"            flow += tmp;",
			"        }",
			"        return infinity();",
			"    }",
			"};"
		],
		"description": "最大流"
	},
	"Heap": {
		"scope": "cpp",
		"prefix": "Heap",
		"body": [
			"// 二分ヒープ．",
			"template <typename T>",
			"class Heap {",
			"    using F = std::function<bool(T &, T &)>;",
			"",
			"    F m_comp;               // bool m_comp(T&,T&):=(比較演算関数).",
			"    int m_sz;               // m_sz:=(要素数).",
			"    std::vector<T> m_tree;  // m_tree[]:=(二分木). 1-based index.",
			"",
			"    int shift_up(int k) {",
			"        assert(1 <= k and k <= size());",
			"        if(k == 1) return 1;",
			"        int par = k / 2;",
			"        if(m_comp(m_tree[par], m_tree[k])) return k;",
			"        std::swap(m_tree[par], m_tree[k]);",
			"        return par;",
			"    }",
			"    void all_shift_up(int k) {",
			"        while(1) {",
			"            int next = shift_up(k);",
			"            if(next == k) return;",
			"            k = next;",
			"        }",
			"    }",
			"    int shift_down(int k) {",
			"        assert(1 <= k and k <= size());",
			"        if(k > size() / 2) return k;",
			"        int l = 2 * k, r = 2 * k + 1;",
			"        if(r > size() or m_comp(m_tree[l], m_tree[r])) {",
			"            if(m_comp(m_tree[k], m_tree[l])) return k;",
			"            std::swap(m_tree[k], m_tree[l]);",
			"            return l;",
			"        } else {",
			"            if(m_comp(m_tree[k], m_tree[r])) return k;",
			"            std::swap(m_tree[k], m_tree[r]);",
			"            return r;",
			"        }",
			"    }",
			"    void all_shift_down(int k) {",
			"        while(1) {",
			"            int next = shift_down(k);",
			"            if(next == k) return;",
			"            k = next;",
			"        }",
			"    }",
			"    void heap_sort() {",
			"        int k = size() / 2;",
			"        for(int i = k; i >= 1; --i) all_shift_down(i);",
			"    }",
			"",
			"public:",
			"    // constructor. O(N*logN).",
			"    Heap() : Heap([](const T &a, const T &b) -> bool { return a > b; }, std::vector<T>(0)) {}",
			"    explicit Heap(const F &comp) : Heap(comp, std::vector<T>(0)) {}",
			"    explicit Heap(const std::vector<T> &v) : Heap([](const T &a, const T &b) -> bool { return a > b; }, v) {}",
			"    explicit Heap(const F &comp, const std::vector<T> &v) : m_comp(comp), m_sz(v.size()), m_tree(v.size() + 1) {",
			"        if(size() > 0) {",
			"            std::copy(v.begin(), v.end(), m_tree.begin() + 1);",
			"            heap_sort();",
			"        }",
			"    }",
			"    ~Heap() {",
			"        std::vector<T>().swap(m_tree);",
			"    }",
			"",
			"    bool empty() const { return size() == 0; }",
			"    int size() const { return m_sz; }",
			"    // 要素参照．O(1).",
			"    T top() const {",
			"        assert(!empty());",
			"        return m_tree[1];",
			"    }",
			"    // 要素追加．O(logN).",
			"    void push(const T &a) {",
			"        m_tree.push_back(a);",
			"        m_sz++;",
			"        all_shift_up(size());",
			"    }",
			"    // 要素削除．O(logN).",
			"    T pop() {",
			"        assert(!empty());",
			"        T res = m_tree[1];",
			"        m_tree[1] = m_tree[size()];",
			"        m_tree.pop_back();",
			"        m_sz--;",
			"        if(size() > 0) all_shift_down(1);",
			"        return res;",
			"    }",
			"    // ヒープソート．O(N*logN).",
			"    void heap_sort(const F &comp) {",
			"        m_comp = comp;",
			"        heap_sort();",
			"    }",
			"};"
		],
		"description": "二分ヒープ"
	},
	"Kitamasa": {
		"scope": "cpp",
		"prefix": "Kitamasa",
		"body": [
			"// きたまさ法．線形漸化式 a[n]=d[0]*a[n-k]+d[1]*a[n-k+1]+....+d[k-1]*a[n-1] を求める．O((K^2)*logN).",
			"template <typename T = long long>",
			"class Kitamasa {",
			"    int k;             // k:=(階数).",
			"    std::vector<T> a;  // a[]:=(初項行列).",
			"    std::vector<T> d;  // d[]:=(係数行列).",
			"",
			"    // f(n)->f(n+1). O(K).",
			"    std::vector<T> add(const std::vector<T> &x) const {",
			"        std::vector<T> y(k);",
			"        y[0] = x[k - 1] * d[0];",
			"        for(int i = 1; i < k; ++i) y[i] = x[i - 1] + x[k - 1] * d[i];",
			"        return y;",
			"    }",
			"    // f(n)->f(2*n). O(K^2).",
			"    std::vector<T> mul(const std::vector<T> &x) const {",
			"        std::vector<T> y(k, 0);",
			"        auto t = x;",
			"        for(int i = 0; i < k; ++i) {",
			"            for(int j = 0; j < k; ++j) y[j] += x[i] * t[j];",
			"            if(i < k - 1) t = add(t);",
			"        }",
			"        return y;",
			"    }",
			"    // f(n)を返す．O((K^2)*logN).",
			"    std::vector<T> f(long long n) const {",
			"        if(n == 0) {",
			"            std::vector<T> x(k, 0);",
			"            x[0] = 1;",
			"            return x;  // f(0).",
			"        }",
			"        auto &&x = mul(f(n / 2));",
			"        if(n & 1LL) x = add(x);",
			"        return x;",
			"    }",
			"",
			"public:",
			"    Kitamasa() : Kitamasa(std::vector<T>({0, 1}), std::vector<T>({1, 1})) {}  // フィボナッチ数列．",
			"    explicit Kitamasa(const std::vector<T> &a_, const std::vector<T> &d_) : k(a_.size()), a(a_), d(d_) {",
			"        assert(k >= 1 and a.size() == d.size());",
			"    }",
			"",
			"    T operator[](long long n) const { return calc(n); }",
			"",
			"    // a[n]を返す．O((K^2)*logN).",
			"    T calc(long long n) const {",
			"        assert(n >= 0);",
			"        const auto &&x = f(n);",
			"        T res = 0;",
			"        for(int i = 0; i < k; ++i) res += x[i] * a[i];",
			"        return res;",
			"    }",
			"};"
		],
		"description": "きたまさ法"
	},
	"LCA": {
		"scope": "cpp",
		"prefix": "LCA",
		"body": [
			"// 最近共通祖先 (LCA: Lowest Common Ancestor)．",
			"class LCA {",
			"    using Graph = std::vector<std::vector<int> >;",
			"",
			"    int m_vn;                              // m_vn:=(ノード数).",
			"    int m_h;                               // m_h:=ceiling(log2(m_vn)).",
			"    int m_rt;                              // m_rt:=(根番号).",
			"    Graph m_g;                             // m_g[v][]:=(ノードvの隣接リスト).",
			"    std::vector<std::vector<int> > m_par;  // m_par[v][k]:=(ノードvから2^k回辿って到達する親ノード番号). 親がいない場合は-1．",
			"    std::vector<int> m_depth;              // m_depth[v]:=(ノードvの深さ). 根に連結していない場合は-1．",
			"    bool m_update;",
			"",
			"    void dfs(int u, int p, int d) {",
			"        assert(m_depth[u] == -1);",
			"        m_par[u][0] = p;",
			"        m_depth[u] = d;",
			"        for(auto v : m_g[u]) {",
			"            if(v != p) dfs(v, u, d + 1);",
			"        }",
			"    }",
			"    // 祖先木を構築する．O(|V|*log|V|).",
			"    void build() {",
			"        for(auto &a : m_par) std::fill(a.begin(), a.end(), -1);",
			"        std::fill(m_depth.begin(), m_depth.end(), -1);",
			"        dfs(m_rt, -1, 0);",
			"        for(int k = 1; k < m_h; ++k) {",
			"            for(int v = 0; v < size(); ++v) {",
			"                if(m_par[v][k - 1] != -1) m_par[v][k] = m_par[m_par[v][k - 1]][k - 1];",
			"            }",
			"        }",
			"        m_update = false;",
			"    }",
			"",
			"public:",
			"    LCA() : LCA(0) {}",
			"    explicit LCA(size_t vn, int rt = 0) : LCA(Graph(vn), rt) {}",
			"    explicit LCA(const Graph &g, int rt = 0) : m_vn(g.size()), m_h(1), m_rt(rt), m_g(g), m_depth(g.size()), m_update(true) {",
			"        assert(0 <= rt and rt < m_vn);",
			"        while((1 << m_h) < m_vn) m_h++;",
			"        m_par.assign(m_vn, std::vector<int>(m_h));",
			"    }",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    // 根番号にアクセスする．",
			"    int root(int rt = -1) {",
			"        if(rt == -1) return m_rt;",
			"        assert(0 <= rt and rt < size());",
			"        m_update = true;",
			"        return m_rt = rt;",
			"    }",
			"    // ノードuとvに辺を繋げる．",
			"    void add_edge(int u, int v) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        m_g[u].push_back(v);",
			"        m_g[v].push_back(u);",
			"        m_update = true;",
			"    }",
			"    // 木上のノードuとvの最も近い共通の先祖を求める．O(log|V|).",
			"    int lca(int u, int v) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        if(m_update) build();",
			"        if(m_depth[u] == -1 or m_depth[v] == -1) return -1;  // 非連結．",
			"        if(m_depth[u] > m_depth[v]) std::swap(u, v);",
			"        for(int k = 0; k < m_h; ++k) {",
			"            if((m_depth[v] - m_depth[u]) & (1 << k)) v = m_par[v][k];  // 同じ深さに合わせる．",
			"        }",
			"        if(u == v) return u;",
			"        for(int k = m_h - 1; k >= 0; --k) {",
			"            if(m_par[u][k] != m_par[v][k]) u = m_par[u][k], v = m_par[v][k];  // 異なったら根に近づける．",
			"        }",
			"        return m_par[u][0];",
			"    }",
			"    // ノードvの深さを返す．",
			"    int depth(int v) {",
			"        assert(0 <= v and v < size());",
			"        if(m_update) build();",
			"        return m_depth[v];",
			"    }",
			"    // ノードuとvの距離を求める．O(log|V|).",
			"    int distance(int u, int v) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        if(m_update) build();",
			"        if(m_depth[u] == -1 or m_depth[v] == -1) return -1;  // 非連結．",
			"        return m_depth[u] + m_depth[v] - 2 * m_depth[lca(u, v)];",
			"    }",
			"};"
		],
		"description": "最近共通祖先 (LCA: Lowest Common Ancestor)"
	},
	"LazySegTree": {
		"scope": "cpp",
		"prefix": "LazySegTree",
		"body": [
			"// 遅延評価セグメント木．",
			"template <class Monoid, class Action>",
			"class LazySegTree {",
			"    using FM = std::function<Monoid(Monoid, Monoid)>;",
			"    using FA = std::function<void(Monoid &, Action)>;",
			"    using FC = std::function<void(Action &, Action)>;",
			"",
			"    FM m_op;                     // Monoid m_op(Monoid,Monoid):=(二項演算関数). M•M.",
			"    FA m_action;                 // void m_action(Monoid&,Action):=(作用素によるモノイド元への作用). M×A.",
			"    FC m_composition;            // void m_composition(Action&,Action):=(作用素の合成). A•A.",
			"    Monoid m_e;                  // m_e:=(単位元).",
			"    Action m_id;                 // m_id:=(作用素の単位元).",
			"    int m_sz;                    // m_sz:=(要素数).",
			"    int m_n;                     // m_n:=(二分木の葉数).",
			"    int m_depth;                 // m_depth:=(二分木の深さ).",
			"    std::vector<Monoid> m_tree;  // m_tree(2n)[]:=(完全二分木). 1-based index.",
			"    std::vector<Action> m_lazy;  // m_lazy(n)[k]:=(m_tree[k]の子 (m_tree[2k], m_tree[2k+1]) に対する遅延評価).",
			"",
			"    void apply0(int k, const Action &d) {",
			"        assert(1 <= k and k < 2 * m_n);",
			"        m_action(m_tree[k], d);",
			"        if(k < m_n) m_composition(m_lazy[k], d);",
			"    }",
			"    void push(int k) {",
			"        assert(1 <= k and k < m_n);",
			"        apply0(k << 1, m_lazy[k]);",
			"        apply0(k << 1 | 1, m_lazy[k]);",
			"        m_lazy[k] = action_identity();",
			"    }",
			"    void update(int k) {",
			"        assert(1 <= k and k < m_n);",
			"        m_tree[k] = m_op(m_tree[k << 1], m_tree[k << 1 | 1]);",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    LazySegTree() {}",
			"    explicit LazySegTree(const FM &op, const FA &action, const FC &composition, const Monoid &e, const Action &id, size_t n)",
			"        : m_op(op), m_action(action), m_composition(composition), m_e(e), m_id(id), m_sz(n), m_n(1), m_depth(0) {",
			"        while(m_n < size()) m_n <<= 1, m_depth++;",
			"        m_tree.assign(2 * m_n, identity());",
			"        m_lazy.assign(m_n, action_identity());",
			"    }",
			"    explicit LazySegTree(const FM &op, const FA &action, const FC &composition, const Monoid &e, const Action &id, const std::vector<Monoid> &v)",
			"        : LazySegTree(op, action, composition, e, id, v.size()) {",
			"        std::copy(v.begin(), v.end(), m_tree.begin() + m_n);",
			"        for(int i = m_n - 1; i >= 1; --i) update(i);",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return m_sz; }",
			"    // モノイドの単位元を返す．",
			"    Monoid identity() const { return m_e; }",
			"    // 作用素の単位元を返す．",
			"    Action action_identity() const { return m_id; }",
			"    // k番目の要素をaに置き換える．O(logN).",
			"    void set(int k, const Monoid &a) {",
			"        assert(0 <= k and k < size());",
			"        k += m_n;",
			"        for(int i = m_depth; i >= 1; --i) push(k >> i);",
			"        m_tree[k] = a;",
			"        for(int i = 1; i <= m_depth; ++i) update(k >> i);",
			"    }",
			"    // 区間[l,-)の要素をv[]に置き換える．O(N).",
			"    void set(int l, const std::vector<Monoid> &v) {",
			"        int r = l + v.size();",
			"        assert(0 <= l and r <= size());",
			"        if(l == r) return;",
			"        l += m_n, r += m_n;",
			"        for(int i = m_depth; i >= 1; --i) {",
			"            if(((l >> i) << i) != l) push(l >> i);",
			"            if(((r >> i) << i) != r) push((r - 1) >> i);",
			"        }",
			"        std::copy(v.begin(), v.end(), m_tree.begin() + l);",
			"        for(int i = 1; i <= m_depth; ++i) {",
			"            int l2 = (l >> i), r2 = ((r - 1) >> i);",
			"            for(int j = l2; j <= r2; ++j) update(j);",
			"        }",
			"    }",
			"    // k番目の要素を作用素dを用いて更新する．O(logN).",
			"    void apply(int k, const Action &d) {",
			"        assert(0 <= k and k < size());",
			"        k += m_n;",
			"        for(int i = m_depth; i >= 1; --i) push(k >> i);",
			"        m_action(m_tree[k], d);",
			"        for(int i = 1; i <= m_depth; ++i) update(k >> i);",
			"    }",
			"    // 区間[l,r)を作用素dを用いて更新する．O(logN).",
			"    void apply(int l, int r, const Action &d) {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        if(l == r) return;",
			"        l += m_n, r += m_n;",
			"        for(int i = m_depth; i >= 1; --i) {",
			"            if(((l >> i) << i) != l) push(l >> i);",
			"            if(((r >> i) << i) != r) push((r - 1) >> i);",
			"        }",
			"        for(int l2 = l, r2 = r; l2 < r2; l2 >>= 1, r2 >>= 1) {",
			"            if(l2 & 1) apply0(l2++, d);",
			"            if(r2 & 1) apply0(--r2, d);",
			"        }",
			"        for(int i = 1; i <= m_depth; ++i) {",
			"            if(((l >> i) << i) != l) update(l >> i);",
			"            if(((r >> i) << i) != r) update((r - 1) >> i);",
			"        }",
			"    }",
			"    // 一点取得．O(logN).",
			"    Monoid prod(int k) {",
			"        assert(0 <= k and k < size());",
			"        k += m_n;",
			"        for(int i = m_depth; i >= 1; --i) push(k >> i);",
			"        return m_tree[k];",
			"    }",
			"    // 区間[l,r)の総積 (v[l]•v[l+1]•....•v[r-1]) を求める．O(logN).",
			"    Monoid prod(int l, int r) {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        if(l == r) return identity();",
			"        l += m_n, r += m_n;",
			"        for(int i = m_depth; i >= 1; --i) {",
			"            if(((l >> i) << i) != l) push(l >> i);",
			"            if(((r >> i) << i) != r) push((r - 1) >> i);",
			"        }",
			"        Monoid val_l = identity(), val_r = identity();",
			"        for(; l < r; l >>= 1, r >>= 1) {",
			"            if(l & 1) val_l = m_op(val_l, m_tree[l++]);",
			"            if(r & 1) val_r = m_op(m_tree[--r], val_r);",
			"        }",
			"        return m_op(val_l, val_r);",
			"    }",
			"    // 区間全体の総積を返す．O(1).",
			"    Monoid prod_all() const { return m_tree[1]; }",
			"    // jud(prod(l,-))=true となる区間の最右位値を二分探索する．",
			"    // ただし要素列には単調性があり，また jud(e)=true であること．O(logN).",
			"    int most_right(const std::function<bool(Monoid)> &jud, int l) const {",
			"        assert(jud(identity()));",
			"        assert(0 <= l and l <= size());",
			"        if(l == size()) return size();",
			"        l += m_n;",
			"        for(int i = m_depth; i >= 1; --i) push(l >> i);",
			"        Monoid val = identity();",
			"        do {",
			"            while(!(l & 1)) l >>= 1;",
			"            Monoid &&tmp = m_op(val, m_tree[l]);",
			"            if(!jud(tmp)) {",
			"                while(l < m_n) {",
			"                    push(l);",
			"                    l *= 2;",
			"                    Monoid &&tmp2 = m_op(val, m_tree[l]);",
			"                    if(jud(tmp2)) val = tmp2, l++;",
			"                }",
			"                return l - m_n;",
			"            }",
			"            val = tmp, l++;",
			"        } while((l & -l) != l);  // (x&-x)==x のとき，xは2の階乗数．",
			"        return size();",
			"    }",
			"    // jud(prod(-,r))=true となる区間の最左位値を二分探索する．",
			"    // ただし要素列には単調性があり，また jud(e)=true であること．O(logN).",
			"    int most_left(const std::function<bool(Monoid)> &jud, int r) const {",
			"        assert(jud(identity()));",
			"        assert(0 <= r and r <= size());",
			"        if(r == 0) return 0;",
			"        r += m_n;",
			"        for(int i = m_depth; i >= 1; --i) push((r - 1) >> i);",
			"        Monoid val = identity();",
			"        do {",
			"            r--;",
			"            while(r > 1 and r & 1) r >>= 1;",
			"            Monoid &&tmp = m_op(m_tree[r], val);",
			"            if(!jud(tmp)) {",
			"                while(r < m_n) {",
			"                    push(r);",
			"                    r = 2 * r + 1;",
			"                    Monoid &&tmp2 = m_op(m_tree[r], val);",
			"                    if(jud(tmp2)) val = tmp2, r--;",
			"                }",
			"                return r - m_n + 1;",
			"            }",
			"            val = tmp;",
			"        } while((r & -r) != r);  // (x&-x)==x のとき，xは2の階乗数．",
			"        return 0;",
			"    }",
			"    void reset() {",
			"        std::fill(m_tree.begin(), m_tree.end(), identity());",
			"        std::fill(m_lazy.begin(), m_lazy.end(), action_identity());",
			"    }",
			"};"
		],
		"description": "遅延評価セグメント木"
	},
	"LinearSieve": {
		"scope": "cpp",
		"prefix": "LinearSieve",
		"body": [
			"// 線形篩．",
			"class LinearSieve {",
			"    int m_mx;                   // m_mx:=(篩にかける最大の自然数).",
			"    std::vector<int> m_lpf;     // m_lpf[n]:=(自然数nの最小の素因数). Least prime factor. m_lpf[n]==nのとき，nは素数．",
			"    std::vector<int> m_primes;  // m_primes[]:=(自然数n以下の素数のリスト).",
			"",
			"public:",
			"    // constructor. n以下の自然数を篩にかける．O(N).",
			"    LinearSieve() : LinearSieve(51e4) {}",
			"    explicit LinearSieve(int n) : m_mx(n), m_lpf(n + 1, -1) {",
			"        assert(n >= 0);",
			"        for(int p = 2; p <= m_mx; ++p) {",
			"            if(m_lpf[p] == -1) {",
			"                m_lpf[p] = p;",
			"                m_primes.push_back(p);",
			"            }",
			"            for(auto prime : m_primes) {",
			"                if(prime * p > m_mx or prime > m_lpf[p]) break;",
			"                m_lpf[prime * p] = prime;",
			"            }",
			"        }",
			"    }",
			"",
			"    // 素数判定．O(1).",
			"    bool is_prime(int n) const {",
			"        assert(0 <= n and n <= m_mx);",
			"        return m_lpf[n] == n;",
			"    }",
			"    // 自然数nの最小の素因数を返す．O(1).",
			"    int get_lpf(int n) const {",
			"        assert(2 <= n and n <= m_mx);",
			"        return m_lpf[n];",
			"    }",
			"    // 高速素因数分解．osa_k法．O(logN).",
			"    std::map<int, int> prime_factorize(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::map<int, int> res;",
			"        while(n > 1) {",
			"            res[m_lpf[n]]++;",
			"            n /= m_lpf[n];",
			"        }",
			"        return res;",
			"    }",
			"    // 高速約数列挙．",
			"    std::vector<int> divisors(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::vector<int> res({1});",
			"        const auto &&pf = prime_factorize(n);",
			"        for(const auto &[p, cnt] : pf) {",
			"            const int sz = res.size();",
			"            int b = 1;",
			"            for(int i = 0; i < cnt; ++i) {",
			"                b *= p;",
			"                for(int j = 0; j < sz; ++j) res.push_back(res[j] * b);",
			"            }",
			"        }",
			"        std::sort(res.begin(), res.end());",
			"        return res;",
			"    }",
			"    // 素数のリストを参照する．O(1).",
			"    const std::vector<int> &primes() const { return m_primes; }",
			"};"
		],
		"description": "線形篩"
	},
	"LowLink": {
		"scope": "cpp",
		"prefix": "LowLink",
		"body": [
			"class LowLink {",
			"    using Graph = std::vector<std::vector<int> >;",
			"",
			"    int m_vn;                                 // m_vn:=(頂点数).",
			"    Graph m_g;                                // m_g[v][]:=(頂点vの隣接リスト).",
			"    std::vector<int> m_aps;                   // m_aps[]:=(関節点のリスト). Articulations points.",
			"    std::vector<std::pair<int, int> > m_brs;  // m_brs[]:=(橋のリスト). Bridges.",
			"",
			"    void dfs(int u, int parent, std::vector<int> &ord, std::vector<int> &low, int &now) {",
			"        ord[u] = low[u] = now++;",
			"        int degree = 0;      // DFS木での頂点uにおける葉方向への出次数．",
			"        bool is_ap = false;  // 頂点uが関節点か否か．",
			"        for(auto v : m_g[u]) {",
			"            if(v == parent) continue;",
			"            if(ord[v] == -1) {  // 頂点vが未訪問のとき．",
			"                degree++;",
			"                dfs(v, u, ord, low, now);",
			"                low[u] = std::min(low[u], low[v]);",
			"                if(ord[u] < low[v]) {  // 辺u-vが橋のとき．",
			"                    if(u < v) m_brs.emplace_back(u, v);",
			"                    else m_brs.emplace_back(v, u);",
			"                }",
			"                if(parent != -1 and ord[u] <= low[v]) is_ap = true;  // 根以外で関節点のとき．",
			"            } else {                                                 // 辺u-vが後退辺のとき．",
			"                low[u] = std::min(low[u], ord[v]);",
			"            }",
			"        }",
			"        if(parent == -1 and degree > 1) is_ap = true;  // 根が関節点のとき．",
			"        if(is_ap) m_aps.push_back(u);",
			"    }",
			"",
			"public:",
			"    LowLink() : LowLink(0) {}",
			"    explicit LowLink(size_t vn) : m_vn(vn), m_g(vn) {}",
			"    explicit LowLink(const Graph &g) : m_vn(g.size()), m_g(g) {}",
			"",
			"    // 頂点数を返す．",
			"    int size() const { return m_vn; }",
			"    // 無向辺を張る．",
			"    void add_edge(int u, int v) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        m_g[u].push_back(v);",
			"        m_g[v].push_back(u);",
			"    }",
			"    // 無向グラフの橋と関節点を求める．O(|V|+|E|).",
			"    void lowlink() {",
			"        m_aps.clear();",
			"        m_brs.clear();",
			"        // ord[v]:=(DFS木における頂点vの行きかけ順序).",
			"        // low[v]:=(DFS木において，頂点vから葉方向に0回以上，後退辺を高々1回用いて到達できる頂点wのord[w]の最小値).",
			"        std::vector<int> ord(size(), -1), low(size());",
			"        int now = 0;",
			"        for(int v = 0; v < size(); ++v) {",
			"            if(ord[v] == -1) dfs(v, -1, ord, low, now);",
			"        }",
			"        std::sort(m_aps.begin(), m_aps.end());",
			"        std::sort(m_brs.begin(), m_brs.end());",
			"    }",
			"    // 関節点のリストを参照する．",
			"    const std::vector<int> &get_points() const { return m_aps; }",
			"    // 橋のリストを参照する．",
			"    const std::vector<std::pair<int, int> > &get_bridges() const { return m_brs; }",
			"};"
		],
		"description": "橋，関節点"
	},
	"Manacher": {
		"scope": "cpp",
		"prefix": "Manacher",
		"body": [
			"// 最長回文 (Longest Palindromic Substring)．",
			"template <class Sequence>",
			"class Manacher {",
			"    int m_sz;  // m_sz:=(配列サイズ).",
			"    // m_radius[2*k]:=(k文字目を中心とする奇数長の最長回文の半径),",
			"    // m_radius[2*k-1]:=(k-1文字目とk文字目の間を中心とする偶数長の最長回文の半径).",
			"    std::vector<int> m_radius;",
			"",
			"public:",
			"    // constructor. 引数はSTLのシーケンスコンテナ．O(|S|).",
			"    Manacher() : Manacher(Sequence()) {}",
			"    explicit Manacher(const Sequence &s) : m_sz(s.size()), m_radius(2 * s.size()) {",
			"        Sequence t(2 * size(), 0);",
			"        for(int i = 0; i < size(); ++i) t[2 * i] = s[i];",
			"        int i = 0, j = 0;",
			"        while(i < 2 * size() - 1) {",
			"            while(0 <= i - j and i + j < 2 * size() - 1 and t[i - j] == t[i + j]) j++;",
			"            m_radius[i] = j;",
			"            int k = 1;",
			"            while(i - k >= 0 and m_radius[i - k] + k < j) {",
			"                m_radius[i + k] = m_radius[i - k];",
			"                k++;",
			"            }",
			"            i += k, j -= k;",
			"        }",
			"    }",
			"",
			"    int size() const { return m_sz; }",
			"    // k文字目を中心とする奇数長の最長回文の半径を返す．",
			"    int get_odd(int k) const {",
			"        assert(0 <= k and k < size());",
			"        return (m_radius[2 * k] + 1) / 2;",
			"    }",
			"    // k-1文字目とk文字目の間を中心とする偶数長の最長回文の半径を返す．",
			"    int get_even(int k) const {",
			"        assert(1 <= k and k < size());",
			"        return m_radius[2 * k - 1] / 2;",
			"    }",
			"    // 部分列s[l:r]が回文か判定する．",
			"    bool is_palindrome(int l, int r) const {",
			"        assert(0 <= l and l < r and r <= size());",
			"        int mid = (l + r) / 2;",
			"        return ((r - l) & 1 ? get_odd(mid) >= (r - l + 1) / 2 : get_even(mid) >= (r - l) / 2);",
			"    }",
			"};"
		],
		"description": "最長回文 (Longest Palindromic Substring)"
	},
	"Mo": {
		"scope": "cpp",
		"prefix": "Mo",
		"body": [
			"// Mo's Algorithm.",
			"class Mo {",
			"    int n;",
			"    int q;",
			"    std::vector<std::tuple<int, int, int> > query;",
			"",
			"    // クエリ平方分割．",
			"    void sort_query() {",
			"        int width = std::sqrt(n);",
			"        std::sort(query.begin(), query.end(), [width](const std::tuple<int, int, int> &a, const std::tuple<int, int, int> &b) -> bool {",
			"            const auto &[al, ar, _] = a;",
			"            const auto &[bl, br, __] = b;",
			"            int block_a = al / width, block_b = bl / width;",
			"            if(block_a != block_b) return block_a < block_b;",
			"            return (block_a & 1 ? ar > br : ar < br);",
			"        });",
			"    }",
			"",
			"public:",
			"    Mo() : Mo(0) {}",
			"    explicit Mo(int n_) : n(n_), q(0) {}",
			"",
			"    void insert(int l, int r) {",
			"        assert(0 <= l and l < r and r <= n);",
			"        query.emplace_back(l, r, q++);",
			"    }",
			"    // 各クエリを実行する．F1~5はラムダ式．O((N+Q)√N*α).",
			"    template <typename F1, typename F2, typename F3, typename F4, typename F5>",
			"    void execute(F1 &&add_l, F2 &&add_r, F3 &&del_l, F4 &&del_r, F5 &&solve) {",
			"        sort_query();",
			"        int l = 0, r = 0;",
			"        for(const auto &[nl, nr, idx] : query) {",
			"            while(nl < l) add_l(--l);",
			"            while(r < nr) add_r(r++);",
			"            while(l < nl) del_l(l++);",
			"            while(nr < r) del_r(--r);",
			"            solve(idx);",
			"        }",
			"    }",
			"};"
		],
		"description": "Mo's Algorithm"
	},
	"Modint": {
		"scope": "cpp",
		"prefix": "Modint",
		"body": [
			"template <int mod>",
			"class Modint {",
			"    long long val;",
			"",
			"public:",
			"    Modint() : Modint(0) {}",
			"    Modint(long long val_) : val(val_) {",
			"        static_assert(mod >= 1);",
			"        if(!(0 <= val and val < mod)) {",
			"            val %= mod;",
			"            if(val < 0) val += mod;",
			"        }",
			"    }",
			"",
			"    Modint operator+() const { return Modint(*this); }",
			"    Modint operator-() const { return Modint(0) - (*this); }",
			"    Modint &operator++() {",
			"        val++;",
			"        if(val == mod) val = 0;",
			"        return *this;",
			"    }",
			"    Modint &operator--() {",
			"        if(val == 0) val = mod;",
			"        val--;",
			"        return *this;",
			"    }",
			"    Modint operator++(int) {",
			"        Modint res = *this;",
			"        ++(*this);",
			"        return res;",
			"    }",
			"    Modint operator--(int) {",
			"        Modint res = *this;",
			"        --(*this);",
			"        return res;",
			"    }",
			"    Modint &operator+=(const Modint &a) {",
			"        val += a.val;",
			"        if(val >= mod) val -= mod;",
			"        return *this;",
			"    }",
			"    Modint &operator-=(const Modint &a) {",
			"        val -= a.val;",
			"        if(val < 0) val += mod;",
			"        return *this;",
			"    }",
			"    Modint &operator*=(const Modint &a) {",
			"        val = val * a.val % mod;",
			"        return *this;",
			"    }",
			"    Modint &operator/=(const Modint &a) { return (*this) *= a.inv(); }",
			"",
			"    friend Modint operator+(const Modint &x, const Modint &y) { return Modint(x) += y; }",
			"    friend Modint operator-(const Modint &x, const Modint &y) { return Modint(x) -= y; }",
			"    friend Modint operator*(const Modint &x, const Modint &y) { return Modint(x) *= y; }",
			"    friend Modint operator/(const Modint &x, const Modint &y) { return Modint(x) /= y; }",
			"    friend bool operator==(const Modint &x, const Modint &y) { return x.val == y.val; }",
			"    friend bool operator!=(const Modint &x, const Modint &y) { return x.val != y.val; }",
			"    friend std::istream &operator>>(std::istream &is, Modint &x) {",
			"        is >> x.val;",
			"        if(!(0 <= x.val and x.val < mod)) {",
			"            x.val %= mod;",
			"            if(x.val < 0) x.val += mod;",
			"        }",
			"        return is;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const Modint &x) { return os << x.val; }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    long long value() const { return val; }",
			"    Modint inv() const {",
			"        long long a = val, b = mod, u = 1, v = 0;",
			"        while(b) {",
			"            long long t = a / b;",
			"            a -= t * b, u -= t * v;",
			"            std::swap(a, b), std::swap(u, v);",
			"        }",
			"        return Modint(u);",
			"    }",
			"",
			"    friend Modint mod_pow(const Modint &x, long long k) {",
			"        if(k < 0) return mod_pow(x.inv(), -k);",
			"        Modint res = 1, tmp = x;",
			"        while(k > 0) {",
			"            if(k & 1LL) res *= tmp;",
			"            tmp = tmp * tmp;",
			"            k >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"};",
			"",
			"using mint998244353 = Modint<998'244'353>;",
			"using mint1000000007 = Modint<1'000'000'007>;"
		],
		"description": ""
	},
	"Montmort": {
		"scope": "cpp",
		"prefix": "Montmort",
		"body": [
			"// 完全順列（mod付き）．",
			"template <int mod>",
			"class Montmort {",
			"    int m_sz;",
			"    std::vector<long long> m_montmort;  // m_montmort[k]:=(k番目のモンモール数).",
			"",
			"public:",
			"    Montmort() : Montmort(51e4) {}",
			"    explicit Montmort(size_t sz) : m_sz(sz), m_montmort(sz) {",
			"        static_assert(mod >= 1);",
			"        assert(m_sz >= 2);",
			"        m_montmort[0] = 1, m_montmort[1] = 0;",
			"        for(int i = 2; i < m_sz; ++i) m_montmort[i] = (i - 1) * ((m_montmort[i - 2] + m_montmort[i - 1]) % mod) % mod;  // 隣接三項間の漸化式．",
			"        // for(int i = 2; i < m_sz; ++i) m_montmort[i] = (i * m_montmort[i - 1] % mod + (i & 1 ? -1 : 1) + mod) % mod;  // 隣接二項間の漸化式．",
			"    }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    // k個の要素を並び替えたときに完全順列となる通り数．",
			"    long long montmort(int k) const {",
			"        assert(1 <= k and k < m_sz);",
			"        return m_montmort[k];",
			"    }",
			"    // 無限個の要素を並び替えたときに完全順列となる確率．",
			"    static constexpr double converged_probability() { return 1.0 / std::exp(1.0); }",
			"};"
		],
		"description": "完全順列（mod付き）"
	},
	"PotentializedUnionFind": {
		"scope": "cpp",
		"prefix": "PotentializedUnionFind",
		"body": [
			"// 重み付きUnion-Find Tree．",
			"template <typename T>",
			"class PotentializedUnionFind {",
			"    int m_vn;                // m_vn:=(ノード数).",
			"    int m_gn;                // m_gn:=(連結成分数).",
			"    std::vector<int> m_par;  // m_par[v]:=(ノードvの親番号). 0未満の場合，vは根であり，値の絶対値は連結成分のサイズを表す．",
			"    std::vector<T> m_p;      // m_p[v]:=(ノードvのポテンシャル).",
			"",
			"public:",
			"    PotentializedUnionFind() : PotentializedUnionFind(0) {}",
			"    explicit PotentializedUnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1), m_p(vn, 0) {}",
			"",
			"    // ノードの総数を返す．",
			"    int vn() const { return m_vn; };",
			"    // 連結成分の数を返す．",
			"    int gn() const { return m_gn; };",
			"    // ノードvの親番号を返す．",
			"    int root(int v) {",
			"        assert(0 <= v and v < vn());",
			"        if(m_par[v] < 0) return v;",
			"        auto res = root(m_par[v]);  // recrusion.",
			"        m_p[v] += m_p[m_par[v]];",
			"        return m_par[v] = res;",
			"    }",
			"    // ノードvが属する連結成分のサイズを返す．",
			"    int size(int v) {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)];",
			"    }",
			"    // ノードvのポテンシャルを返す．",
			"    T potential(int v) {",
			"        assert(0 <= v and v < vn());",
			"        root(v);",
			"        return m_p[v];",
			"    }",
			"    // ノードuとvが連結しているか判定する．",
			"    bool same(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // ノードuに対するvの相対ポテンシャルを返す．",
			"    T difference(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return potential(v) - potential(u);",
			"    }",
			"    // difference(u,v)=dとなるようにノードuとvそれぞれの親ノードを連結する．",
			"    bool unite(int u, int v, T d) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        d = d + potential(u) - potential(v);",
			"        u = root(u), v = root(v);",
			"        if(u == v) return false;  // Do nothing.",
			"        if(size(u) < size(v)) {   // Merge technique.",
			"            std::swap(u, v);",
			"            d = -d;",
			"        }",
			"        m_par[u] += m_par[v];",
			"        m_par[v] = u;",
			"        m_p[v] = d;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"        std::fill(m_p.begin(), m_p.end(), 0);",
			"    }",
			"};"
		],
		"description": "重み付きUnion-Find Tree"
	},
	"Prim": {
		"scope": "cpp",
		"prefix": "Prim",
		"body": [
			"template <typename T>",
			"class Prim {",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                                // m_vn:=(ノード数).",
			"    int m_n;                                 // m_n:=(葉の数).",
			"    std::vector<std::vector<Edge> > m_g;     // m_g[v][]:=(ノードvの隣接リスト).",
			"    std::vector<std::pair<T, int> > m_heap;  // m_heap[]:=(完全二分木). 1-based index.",
			"    T m_inf;",
			"",
			"    void shiht_up(int i) {",
			"        assert(m_n <= i and i < 2 * m_n);",
			"        while(i >>= 1) m_heap[i] = std::min(m_heap[2 * i], m_heap[2 * i + 1]);",
			"    }",
			"    void push(T cost, int k) {",
			"        assert(0 <= k and k < size());",
			"        if(cost >= m_heap[k + m_n].first) return;",
			"        m_heap[k + m_n] = std::pair<T, int>(cost, k);",
			"        shiht_up(k + m_n);",
			"    }",
			"    void pop() {",
			"        auto k = m_heap[1].second;",
			"        if(k == -1) return;",
			"        m_heap[k + m_n] = std::pair<T, int>(m_inf, -1);",
			"        shiht_up(k + m_n);",
			"    }",
			"    std::pair<T, int> top() const { return m_heap[1]; }",
			"",
			"public:",
			"    Prim() : Prim(0) {}",
			"    explicit Prim(size_t vn, T inf = 1e9) : m_vn(vn), m_n(1), m_g(vn), m_inf(inf) {",
			"        while(m_n < m_vn) m_n <<= 1;",
			"        m_heap.assign(2 * m_n, std::pair<T, int>(m_inf, -1));",
			"    }",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    // 重み付き無向辺を張る．",
			"    void add_edge(int u, int v, T cost) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        m_g[u].push_back((Edge){v, cost});",
			"        m_g[v].push_back((Edge){u, cost});",
			"    }",
			"    // ある重み付き無向連結グラフにおける最小全域木のコストを求める．O(|E|*log|V|).",
			"    T prim(int root = 0) {",
			"        assert(0 <= root and root < size());",
			"        T res = 0;",
			"        bool seen[size()] = {};",
			"        push(0, root);",
			"        while(1) {",
			"            auto [cost, u] = top();",
			"            if(u == -1) break;",
			"            pop();",
			"            if(seen[u]) continue;",
			"            seen[u] = true;",
			"            res += cost;",
			"            for(const Edge &e : m_g[u]) {",
			"                if(!seen[e.to]) push(e.cost, e.to);",
			"            }",
			"        }",
			"        return res;",
			"    }",
			"};"
		],
		"description": "最小全域木"
	},
	"PrimalDual": {
		"scope": "cpp",
		"prefix": "PrimalDual",
		"body": [
			"template <typename Flow, typename Cost>  // Flow:容量の型, Cost:コストの型.",
			"class PrimalDual {",
			"    template <class Type>",
			"    using r_priority_queue = std::priority_queue<Type, std::vector<Type>, std::greater<Type> >;",
			"    struct Edge {",
			"        int to;          // to:=(行き先ノード).",
			"        Flow cap, icap;  // cap:=(容量), icap:=(元の容量).",
			"        Cost cost;       // cost:=(単位コスト).",
			"        int rev;         // rev:=(逆辺イテレータ).",
			"        explicit Edge(int to_, Flow cap_, Cost cost_, int rev_)",
			"            : to(to_), cap(cap_), icap(cap_), cost(cost_), rev(rev_) {}",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvの隣接リスト).",
			"    std::vector<Cost> m_level;            // m_level[v]:=(ノートvまでの最小費用).",
			"    std::vector<Cost> m_p;                // m_p[v]:=(ノードvのポテンシャル).",
			"    std::vector<int> m_prevv;             // m_prevv[v]:=(ノードvの直前に訪れるノード). 逆方向経路．",
			"    std::vector<int> m_preve;             // m_preve[v]:=(ノードvの直前に通る辺). 逆方向経路．",
			"    Cost m_inf;",
			"",
			"    void init() {",
			"        for(std::vector<Edge> &es : m_g) {",
			"            for(Edge &e : es) e.cap = e.icap;",
			"        }",
			"        std::fill(m_p.begin(), m_p.end(), 0);",
			"    }",
			"    void dijkstra(int s) {",
			"        std::fill(m_level.begin(), m_level.end(), m_inf);",
			"        m_level[s] = 0;",
			"        r_priority_queue<std::pair<Cost, int> > pque;",
			"        pque.emplace(0, s);",
			"        while(!pque.empty()) {",
			"            auto [cost, v] = pque.top();",
			"            pque.pop();",
			"            if(m_level[v] < cost) continue;",
			"            const int sz = m_g[v].size();",
			"            for(int i = 0; i < sz; ++i) {",
			"                const Edge &e = m_g[v][i];",
			"                if(e.cap > 0 and m_level[e.to] > m_level[v] + e.cost - m_p[v] + m_p[e.to]) {",
			"                    m_level[e.to] = m_level[v] + e.cost - m_p[v] + m_p[e.to];",
			"                    m_prevv[e.to] = v;",
			"                    m_preve[e.to] = i;",
			"                    pque.emplace(m_level[e.to], e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"public:",
			"    PrimalDual() : PrimalDual(0) {}",
			"    explicit PrimalDual(size_t vn, Cost inf = 1e9)",
			"        : m_vn(vn), m_g(vn), m_level(vn), m_p(vn), m_prevv(vn), m_preve(vn), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    // 容量cap[flows]，単位コストcost[cost/flow]の有向辺を追加する．",
			"    void add_directed_edge(int from, int to, Flow cap, Cost cost) {",
			"        assert(0 <= from and from < m_vn);",
			"        assert(0 <= to and to < m_vn);",
			"        m_g[from].emplace_back(to, cap, cost, m_g[to].size());",
			"        m_g[to].emplace_back(from, 0, -cost, m_g[from].size() - 1);",
			"    }",
			"    // 容量cap[flows]，単位コストcost[cost/flow]の無向辺を追加する．",
			"    void add_undirected_edge(int u, int v, Flow cap, Cost cost) {",
			"        assert(0 <= u and u < m_vn);",
			"        assert(0 <= v and v < m_vn);",
			"        m_g[u].emplace_back(v, cap, cost, m_g[v].size());",
			"        m_g[v].emplace_back(u, cap, cost, m_g[u].size() - 1);",
			"    }",
			"    // ソースからシンクまでの最小費用[costs]（単位コスト[cost/flow]とフロー[flows]の積の総和）を求める．",
			"    // 返り値は最小費用[costs]と流用[flows]．O(F*|E|*log|V|).",
			"    std::pair<Cost, Flow> min_cost_flow(int s, int t, Flow flow) {",
			"        assert(0 <= s and s < m_vn);",
			"        assert(0 <= t and t < m_vn);",
			"        Cost sum = 0;",
			"        Flow rest = flow;",
			"        init();",
			"        while(rest > 0) {",
			"            dijkstra(s);",
			"            if(m_level[t] == m_inf) return {sum, flow - rest};  // これ以上流せない場合．",
			"            for(int v = 0; v < m_vn; ++v) m_p[v] -= m_level[v];",
			"            Flow tmp = rest;",
			"            for(int v = t; v != s; v = m_prevv[v]) tmp = std::min(tmp, m_g[m_prevv[v]][m_preve[v]].cap);",
			"            rest -= tmp;",
			"            sum += (-m_p[t]) * tmp;",
			"            for(int v = t; v != s; v = m_prevv[v]) {",
			"                Edge &e = m_g[m_prevv[v]][m_preve[v]];",
			"                e.cap -= tmp;",
			"                m_g[v][e.rev].cap += tmp;",
			"            }",
			"        }",
			"        return {sum, flow};",
			"    }",
			"};"
		],
		"description": "最小費用流"
	},
	"SCC": {
		"scope": "cpp",
		"prefix": "SCC",
		"body": [
			"// 強連結成分分解 (SCC: Strongly Connected Components)．",
			"class SCC {",
			"    using Graph = std::vector<std::vector<int> >;",
			"",
			"    int m_vn;   // m_vn:=(頂点数).",
			"    Graph m_g;  // m_g[v][]:=(頂点vの隣接リスト).",
			"",
			"    int infinity() const { return 1e9; }",
			"",
			"public:",
			"    SCC() : SCC(0) {}",
			"    explicit SCC(int vn) : m_vn(vn), m_g(vn) {}",
			"    explicit SCC(const Graph &g) : m_vn(g.size()), m_g(g) {}",
			"",
			"    // 頂点数を返す．",
			"    int size() const { return m_vn; }",
			"    // 有向辺を張る．",
			"    void add_edge(int from, int to) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back(to);",
			"    }",
			"    // return pair of (# of SCCs, SCC id of each nodes).",
			"    std::pair<int, std::vector<int> > scc() const {",
			"        int num_sccs = 0;             // num_sccs:=(SCCsの数).",
			"        std::vector<int> id(size());  // id[v]:=(頂点vが属するSCCのID).",
			"        // ord[v]:=(DFS木における頂点vの行きがけ順序).",
			"        // low[v]:=(DFS木において，頂点vから葉方向に0回以上，後退辺を高々1回用いて到達できる頂点wのord[w]の最小値).",
			"        std::vector<int> ord(size(), -1), low(size());",
			"        int now_ord = 0;",
			"        std::stack<int> visited;",
			"        auto dfs = [&](auto self, int u) -> void {",
			"            ord[u] = low[u] = now_ord++;",
			"            visited.push(u);",
			"            for(auto to : m_g[u]) {",
			"                if(ord[to] == -1) {",
			"                    self(self, to);",
			"                    low[u] = std::min(low[u], low[to]);",
			"                } else {",
			"                    low[u] = std::min(low[u], ord[to]);",
			"                }",
			"            }",
			"            if(low[u] == ord[u]) {",
			"                while(true) {",
			"                    auto v = visited.top();",
			"                    visited.pop();",
			"                    ord[v] = infinity();",
			"                    id[v] = num_sccs;",
			"                    if(v == u) break;",
			"                }",
			"                num_sccs++;",
			"            }",
			"        };",
			"        for(int v = 0; v < size(); ++v) {",
			"            if(ord[v] == -1) dfs(dfs, v);",
			"        }",
			"        return {num_sccs, id};",
			"    }",
			"    // 有向グラフを強連結成分分解する．O(|V|+|E|).",
			"    std::vector<std::vector<int> > decompose() const {",
			"        const auto &&[num_sccs, id] = scc();",
			"        std::vector<std::vector<int> > sccs(num_sccs);",
			"        for(int v = 0; v < size(); ++v) sccs[id[v]].push_back(v);",
			"        return sccs;",
			"    }",
			"};"
		],
		"description": "強連結成分分解 (SCC: Strongly Connected Components)"
	},
	"SegmentSieve": {
		"scope": "cpp",
		"prefix": "SegmentSieve",
		"body": [
			"// 区間篩．",
			"class SegmentSieve {",
			"    long long l, r;",
			"    long long sr;                                  // sr:=√r.",
			"    std::vector<long long> small;                  // small[n]:=(区間[2,√r)の自然数nの最小の素因数).",
			"    std::vector<std::map<long long, int> > large;  // large[n-l][]:=(区間[l,r)の自然数nの区間[2,√r)におけるいくつかの素因数).",
			"    std::vector<long long> aux;                    // aux[n-l]:=(large[n-l][]の積).",
			"",
			"    void build() {",
			"        sr = std::sqrt(r) + 5;",
			"        small.assign(sr, -1);",
			"        std::iota(small.begin() + 2, small.end(), 2);",
			"        large.resize(r - l);",
			"        aux.assign(r - l, 1);",
			"        for(long long p = 2; p * p < r; ++p) {",
			"            if(small[p] == p) {",
			"                for(long long n = p * p; n < sr; n += p) small[n] = p;",
			"                for(long long n = std::max<long long>(2, (l + p - 1) / p) * p; n < r; n += p) {",
			"                    long long tmp = n;",
			"                    while(tmp % p == 0 and aux[n - l] * aux[n - l] <= r) {",
			"                        large[n - l][p]++;",
			"                        aux[n - l] *= p;",
			"                        tmp /= p;",
			"                    }",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. 区間[l,r)の自然数を篩にかける．制約の目安はおおよそ 2<=l<r<=1e12, r-l<=1e6．",
			"    SegmentSieve() : SegmentSieve(2, 3) {}",
			"    explicit SegmentSieve(long long l_, long long r_) : l(l_), r(r_) {",
			"        assert(2 <= l and l < r);",
			"        build();",
			"    }",
			"",
			"    // 素数判定．O(1).",
			"    bool is_prime(long long n) const {",
			"        assert(l <= n and n < r);",
			"        return large[n - l].size() == 0;",
			"    }",
			"    // 高速素因数分解．",
			"    std::map<long long, int> prime_factorize(long long n) const {",
			"        assert(l <= n and n < r);",
			"        auto res = large[n - l];",
			"        n /= aux[n - l];",
			"        if(n >= sr) {",
			"            res[n]++;",
			"            return res;",
			"        }",
			"        while(n > 1) {",
			"            res[small[n]]++;",
			"            n /= small[n];",
			"        }",
			"        return res;",
			"    }",
			"    // 高速約数列挙．",
			"    std::vector<long long> divisors(long long n) const {",
			"        assert(l <= n and n < r);",
			"        std::vector<long long> res({1});",
			"        const auto &&pf = prime_factorize(n);",
			"        int capacity = 1;",
			"        for(const auto &[_, cnt] : pf) capacity *= (cnt + 1);",
			"        res.reserve(capacity);",
			"        for(const auto &[p, cnt] : pf) {",
			"            const int sz = res.size();",
			"            long long b = 1;",
			"            for(int i = 0; i < cnt; ++i) {",
			"                b *= p;",
			"                for(int j = 0; j < sz; ++j) res.push_back(res[j] * b);",
			"            }",
			"        }",
			"        std::sort(res.begin(), res.end());",
			"        return res;",
			"    }",
			"};"
		],
		"description": "区間篩"
	},
	"SegmentTree": {
		"scope": "cpp",
		"prefix": "SegmentTree",
		"body": [
			"template <typename T>",
			"class SegmentTree {",
			"    using F = std::function<T(T, T)>;",
			"",
			"    F m_op;                 // T m_op(T,T):=(二項演算関数).",
			"    T m_e;                  // m_e:=(単位元).",
			"    int m_sz;               // m_sz:=(要素数).",
			"    int m_n;                // m_n:=(葉の数).",
			"    std::vector<T> m_tree;  // m_tree[]:=(完全二分木). 1-based index.",
			"",
			"public:",
			"    // constructor. O(N).",
			"    SegmentTree(){};",
			"    explicit SegmentTree(const F &op, const T &e, size_t n) : m_op(op), m_e(e), m_sz(n), m_n(1) {",
			"        while(m_n < size()) m_n <<= 1;",
			"        m_tree.assign(2 * m_n, identity());",
			"    }",
			"    explicit SegmentTree(const F &op, const T &e, std::vector<T> &v) : SegmentTree(op, e, v.size()) {",
			"        std::copy(v.begin(), v.end(), m_tree.begin() + m_n);",
			"        for(int i = m_n - 1; i >= 1; --i) m_tree[i] = m_op(m_tree[i << 1], m_tree[i << 1 | 1]);",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return m_sz; }",
			"    // 単位元を返す．",
			"    T identity() const { return m_e; }",
			"    // k番目の要素をaに置き換える．O(logN).",
			"    void set(int k, const T &a) {",
			"        assert(0 <= k and k < size());",
			"        k += m_n;",
			"        m_tree[k] = a;",
			"        while(k >>= 1) m_tree[k] = m_op(m_tree[k << 1], m_tree[k << 1 | 1]);",
			"    }",
			"    // 一点取得．O(1).",
			"    T prod(int k) const {",
			"        assert(0 <= k and k < size());",
			"        return m_tree[k + m_n];",
			"    }",
			"    // 区間[l,r)の総積 v[l]•v[l+1]•....•v[r-1] を求める．O(logN).",
			"    T prod(int l, int r) const {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        T val_l = identity(), val_r = identity();",
			"        l += m_n, r += m_n;",
			"        while(l < r) {",
			"            if(l & 1) val_l = m_op(val_l, m_tree[l++]);",
			"            if(r & 1) val_r = m_op(m_tree[--r], val_r);",
			"            l >>= 1, r >>= 1;",
			"        }",
			"        return m_op(val_l, val_r);",
			"    }",
			"    // 区間全体の総積を返す．O(1).",
			"    T prod_all() const { return m_tree[1]; }",
			"    // jud(prod(l,-))=true となる区間の最右位値を二分探索する．",
			"    // ただし要素列には単調性があり，また jud(e)=true であること．O(logN).",
			"    int most_right(const std::function<bool(T)> &jud, int l) const {",
			"        assert(jud(identity()) == true);",
			"        assert(0 <= l and l <= size());",
			"        if(l == size()) return size();",
			"        T val = identity();",
			"        l += m_n;",
			"        do {",
			"            while(!(l & 1)) l >>= 1;",
			"            T &&tmp = m_op(val, m_tree[l]);",
			"            if(!jud(tmp)) {",
			"                while(l < m_n) {",
			"                    l <<= 1;",
			"                    T &&tmp2 = m_op(val, m_tree[l]);",
			"                    if(jud(tmp2)) val = tmp2, l++;",
			"                }",
			"                return l - m_n;",
			"            }",
			"            val = tmp, l++;",
			"        } while((l & -l) != l);  // (x&-x)==x のとき，xは2の階乗数．",
			"        return size();",
			"    }",
			"    // jud(prod(-,r))=true となる区間の最左位値を二分探索する．",
			"    // ただし要素列には単調性があり，また jud(e)=true であること．O(logN).",
			"    int most_left(const std::function<bool(T)> &jud, int r) const {",
			"        assert(jud(identity()) == true);",
			"        assert(0 <= r and r <= size());",
			"        if(r == 0) return 0;",
			"        T val = identity();",
			"        r += m_n;",
			"        do {",
			"            r--;",
			"            while(r > 1 and r & 1) r >>= 1;",
			"            T &&tmp = m_op(m_tree[r], val);",
			"            if(!jud(tmp)) {",
			"                while(r < m_n) {",
			"                    r = (r << 1) | 1;",
			"                    T &&tmp2 = m_op(m_tree[r], val);",
			"                    if(jud(tmp2)) val = tmp2, r--;",
			"                }",
			"                return r - m_n + 1;",
			"            }",
			"            val = tmp;",
			"        } while((r & -r) != r);  // (x&-x)==x のとき，xは2の階乗数．",
			"        return 0;",
			"    }",
			"    void reset() { std::fill(m_tree.begin(), m_tree.end(), identity()); }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const SegmentTree &segtree) {",
			"        int l = 1, r = 2;",
			"        while(l < 2 * segtree.m_n) {",
			"            os << (l == 1 ? \"[\" : \" \");",
			"            for(int i = l; i < r; ++i) os << (i == l ? \"[\" : \" \") << segtree.m_tree[i];",
			"            os << \"]\";",
			"            l <<= 1, r <<= 1;",
			"        }",
			"        os << \"]\";",
			"        return os;",
			"    }",
			"};"
		],
		"description": "セグメント木"
	},
	"SerialSet": {
		"scope": "cpp",
		"prefix": "SerialSet",
		"body": [
			"// 整数の集合を連続範囲で管理するデータ構造．",
			"template <typename T>",
			"class SerialSet {",
			"    std::set<std::pair<T, T> > m_st;  // m_st:=(整数の集合). 連続する整数列[l,r)をpair(l,r)で表現する．",
			"    T m_inf;",
			"",
			"public:",
			"    explicit SerialSet(T inf = 1e9) : m_inf(inf) {",
			"        m_st.emplace(-m_inf, -m_inf + 1);  // 番兵用．",
			"        m_st.emplace(m_inf, m_inf + 1);    // 〃",
			"    }",
			"",
			"    T infinity() const { return m_inf; }",
			"    // 範囲[l,r)の整数を挿入する．O(logN).",
			"    bool insert(T l, T r) {",
			"        assert(-m_inf < l and l < r and r < m_inf);",
			"        auto itr1 = std::prev(m_st.lower_bound(std::pair<T, T>(l + 1, l + 2)));",
			"        auto [l1, r1] = *itr1;",
			"        if(r <= r1) return false;  // 集合に完全に含まれている場合．",
			"        auto itr3 = m_st.lower_bound(std::pair<T, T>(r, r + 1));",
			"        auto itr2 = std::prev(itr3);",
			"        auto [l2, r2] = *itr2;",
			"        auto [l3, r3] = *itr3;",
			"        if(l <= r1) l = l1;",
			"        else itr1++;",
			"        if(l3 <= r) {",
			"            m_st.erase(itr1, ++itr3);",
			"            m_st.emplace(l, r3);",
			"        } else {",
			"            m_st.erase(itr1, itr3);",
			"            if(r <= r2) m_st.emplace(l, r2);",
			"            else m_st.emplace(l, r);",
			"        }",
			"        return true;",
			"    }",
			"    // 整数xを挿入する．O(logN).",
			"    bool insert(T x) { return insert(x, x + 1); }",
			"    // 範囲[l,r)の整数を削除する．O(logN).",
			"    bool erase(T l, T r) {",
			"        assert(-m_inf < l and l < r and r < m_inf);",
			"        auto itr1 = std::prev(m_st.lower_bound(std::pair<T, T>(l + 1, l + 2)));",
			"        auto itr3 = m_st.lower_bound(std::pair<T, T>(r, r + 1));",
			"        auto itr2 = std::prev(itr3);",
			"        auto [l1, r1] = *itr1;",
			"        auto [l2, r2] = *itr2;",
			"        if(l < r1) {",
			"            m_st.erase(itr1, itr3);",
			"            if(l1 < l) m_st.emplace(l1, l);",
			"        } else {",
			"            if(itr1 == itr2) return false;  // 集合に全く含まれていない場合．",
			"            m_st.erase(++itr1, itr3);",
			"        }",
			"        if(r < r2) m_st.emplace(r, r2);",
			"        return true;",
			"    }",
			"    // 整数xを削除する．O(logN).",
			"    bool erase(T x) { return erase(x, x + 1); }",
			"    // 範囲[l,r)の整数が集合に全て含まれるか判定する．O(logN).",
			"    bool contains(T l, T r) const {",
			"        assert(-m_inf < l and l < r and r <= m_inf);",
			"        const auto &[_, pr] = *std::prev(m_st.lower_bound(std::pair<T, T>(l + 1, l + 2)));",
			"        return r <= pr;",
			"    }",
			"    // 整数xが集合に含まれるか判定する．O(logN).",
			"    bool contains(T x) const { return contains(x, x + 1); }",
			"    // 集合に含まれないx以上の整数の中で最小の値 (MEX:Minimum EXcluded value) を求める．O(logN).",
			"    T mex(T x) const {",
			"        assert(-m_inf < x and x < m_inf);",
			"        const auto &[_, r] = *std::prev(m_st.lower_bound(std::pair<T, T>(x + 1, x + 2)));",
			"        return (x < r ? r : x);",
			"    }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const SerialSet &ob) {",
			"        for(auto itr = ob.m_st.cbegin(); itr != ob.m_st.cend(); ++itr) {",
			"            const auto &[l, r] = *itr;",
			"            os << (itr == ob.m_st.cbegin() ? \"[\" : \" \") << \"[\" << l << \", \" << r << \")\";",
			"        }",
			"        os << \"]\";",
			"        return os;",
			"    }",
			"};"
		],
		"description": "整数の集合を連続範囲で管理するデータ構造"
	},
	"Sieve": {
		"scope": "cpp",
		"prefix": "Sieve",
		"body": [
			"// エラトステネスの篩．",
			"class Sieve {",
			"    int m_mx;                // m_mx:=(篩にかける最大の自然数).",
			"    std::vector<int> m_lpf;  // m_lpf[n]:=(自然数nの最小の素因数). Least prime factor. m_lpf[n]==n のとき，nは素数．",
			"",
			"public:",
			"    // constructor. n以下の自然数を篩にかける．O(N*loglogN).",
			"    Sieve() : Sieve(51e4) {}",
			"    explicit Sieve(int n) : m_mx(n), m_lpf(n + 1, -1) {",
			"        assert(n >= 0);",
			"        std::iota(m_lpf.begin() + 2, m_lpf.end(), 2);",
			"        for(int p = 2; p * p <= m_mx; ++p) {",
			"            if(m_lpf[p] != p) continue;",
			"            for(int q = p * p; q <= m_mx; q += p) {",
			"                if(m_lpf[q] == q) m_lpf[q] = p;",
			"            }",
			"        }",
			"    }",
			"",
			"    // 素数判定．O(1).",
			"    bool is_prime(int n) const {",
			"        assert(0 <= n and n <= m_mx);",
			"        return m_lpf[n] == n;",
			"    }",
			"    // 自然数nの最小の素因数を返す．O(1).",
			"    int lpf(int n) const {",
			"        assert(0 <= n and n <= m_mx);",
			"        return m_lpf[n];",
			"    }",
			"    // 高速素因数分解．O(logN).",
			"    std::map<int, int> prime_factorize(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::map<int, int> res;",
			"        while(n > 1) {",
			"            res[m_lpf[n]]++;",
			"            n /= m_lpf[n];",
			"        }",
			"        return res;",
			"    }",
			"    // 高速約数列挙．",
			"    std::vector<int> divisors(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::vector<int> res({1});",
			"        const auto &&pf = prime_factorize(n);",
			"        for(const auto &[p, cnt] : pf) {",
			"            const int sz = res.size();",
			"            int b = 1;",
			"            for(int i = 0; i < cnt; ++i) {",
			"                b *= p;",
			"                for(int j = 0; j < sz; ++j) res.push_back(res[j] * b);",
			"            }",
			"        }",
			"        std::sort(res.begin(), res.end());",
			"        return res;",
			"    }",
			"    // オイラーのファイ関数．n以下でnと互いに素な自然数の個数を求める．",
			"    int totient(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        const auto &&pf = prime_factorize(n);",
			"        int res = 1;",
			"        for(const auto &[p, cnt] : pf) res *= std::pow(p, cnt - 1) * (p - 1);",
			"        return res;",
			"    }",
			"    // メビウス関数．O(N*loglogN).",
			"    std::vector<int> mebius() const {",
			"        std::vector<int> res(m_mx + 1, 1);  // res[i]:=μ(i).",
			"        for(int p = 2; p <= m_mx; ++p) {",
			"            if(m_lpf[p] != p) continue;",
			"            res[p] = -1;",
			"            for(int q = 2 * p; q <= m_mx; q += p) {",
			"                if((q / p) % p == 0) res[q] = 0;",
			"                else res[q] = -res[q];",
			"            }",
			"        }",
			"        return res;",
			"    }",
			"};"
		],
		"description": "エラトステネスの篩"
	},
	"SparseTable": {
		"scope": "cpp",
		"prefix": "SparseTable",
		"body": [
			"// 結合則 ((A•B)•C=A•(B•C)) と冪等性 (A•A=A) が成り立つ演算（max, min, orなど）による区間クエリを求める．",
			"template <typename T>",
			"class SparseTable {",
			"    using F = std::function<T(T, T)>;",
			"",
			"    F m_op;                                // T m_op(T,T):=(二項演算関数).",
			"    int m_sz;                              // m_sz:=(要素数).",
			"    std::vector<int> m_log;                // m_log[x]:=(2^k<=x となる最大の整数k).",
			"    std::vector<std::vector<T> > m_table;  // m_table[k][i]:=(長さが2^kで，左端がiである区間のクエリ).",
			"",
			"public:",
			"    // constructor. O(NlogN).",
			"    SparseTable() {}",
			"    explicit SparseTable(const F &op, const std::vector<T> &v) : m_op(op), m_sz(v.size()), m_log(v.size() + 1, 0) {",
			"        for(int i = 2; i <= size(); ++i) m_log[i] = m_log[i >> 1] + 1;",
			"        m_table.assign(m_log[size()] + 1, std::vector<T>(size()));",
			"        std::copy(v.begin(), v.end(), m_table[0].begin());",
			"        for(int i = 1; i <= m_log[size()]; ++i) {",
			"            for(int j = 0; j <= size() - (1 << i) + 1; ++j) m_table[i][j] = m_op(m_table[i - 1][j], m_table[i - 1][j + (1 << (i - 1))]);",
			"        }",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return m_sz; }",
			"    // 区間[l,r)のクエリを返す．O(1).",
			"    T query(int l, int r) const {",
			"        assert(0 <= l and l < r and r <= size());",
			"        int length = r - l;",
			"        return m_op(m_table[m_log[length]][l], m_table[m_log[length]][r - (1 << m_log[length])]);",
			"    }",
			"};"
		],
		"description": ""
	},
	"SubPersistentUnionFind": {
		"scope": "cpp",
		"prefix": "SubPersistentUnionFind",
		"body": [
			"// 部分永続Union-Find Tree．",
			"class SubPersistentUnionFind {",
			"    using pii = std::pair<int, int>;",
			"",
			"    int m_now;  // m_now:=(時刻).",
			"    int m_vn;   // m_vn:=(ノード数).",
			"    int m_gn;   // m_gn:=(連結成分数).",
			"    // m_par[v][](t,id):=(時刻tにおけるノードvの親番号id). 値idが0未満の場合，vは親となり，値idの絶対値は連結成分のサイズを表す．",
			"    std::vector<std::vector<pii> > m_par;",
			"",
			"    static constexpr int infinity() { return 1e9; }",
			"",
			"public:",
			"    SubPersistentUnionFind() : SubPersistentUnionFind(0) {}",
			"    explicit SubPersistentUnionFind(size_t vn) : m_now(1), m_vn(vn), m_gn(vn), m_par(vn, std::vector<pii>(1, pii(0, -1))) {",
			"        assert((int)vn < infinity());",
			"    }",
			"",
			"    // 現在の時刻を返す．",
			"    int now() const { return m_now; }",
			"    // ノードの総数を返す．",
			"    int vn() const { return m_vn; };",
			"    // 連結成分数を返す．",
			"    int gn() const { return m_gn; };",
			"    // 現在のノードvの親番号を返す．",
			"    int root(int v) const {",
			"        assert(0 <= v and v < vn());",
			"        auto itr = m_par[v].rbegin();",
			"        if(itr->second < 0) return v;",
			"        return root(itr->second);",
			"    }",
			"    // 時刻tにおけるノードvの親番号を返す．",
			"    int root(int v, int t) const {",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        auto itr = std::lower_bound(m_par[v].begin(), m_par[v].end(), pii(t, -infinity()));",
			"        if(itr == m_par[v].end() or itr->first > t) itr--;",
			"        if(itr->second < 0) return v;",
			"        return (itr->first == t ? itr->second : root(itr->second, t));",
			"    }",
			"    // 現在のノードvが属する連結成分のサイズを返す．",
			"    int size(int v) const {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)].rbegin()->second;",
			"    }",
			"    // 時刻tにおけるノードvが属する連結成分のサイズを返す．",
			"    int size(int v, int t) const {",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        int par = root(v, t);",
			"        auto itr = std::lower_bound(m_par[par].begin(), m_par[par].end(), pii(t, -infinity()));",
			"        if(itr == m_par[par].end() or itr->first > t) itr--;",
			"        return -itr->second;",
			"    }",
			"    // 現在ノードuとvが連結か判定する．",
			"    bool same(int u, int v) const {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // 時刻tにおいてノードuとvが連結か判定する．",
			"    bool same(int u, int v, int t) const {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        return root(u, t) == root(v, t);",
			"    }",
			"    // ノードuとvが属する連結成分を繋げる．",
			"    bool unite(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        u = root(u), v = root(v);",
			"        if(u == v) {",
			"            m_now++;",
			"            return false;  // Already united.",
			"        }",
			"        int sz_u = -m_par[u].rbegin()->second;",
			"        int sz_v = -m_par[v].rbegin()->second;",
			"        if(sz_u < sz_v) std::swap(u, v), std::swap(sz_u, sz_v);  // Merge technique.",
			"        m_par[u].emplace_back(now(), -sz_u - sz_v);",
			"        m_par[v].emplace_back(now(), u);",
			"        m_gn--;",
			"        m_now++;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_now = 1;",
			"        m_gn = vn();",
			"        for(auto &history : m_par) history.resize(1);",
			"    }",
			"};"
		],
		"description": "部分永続Union-Find Tree"
	},
	"TopologicalSort": {
		"scope": "cpp",
		"prefix": "TopologicalSort",
		"body": [
			"class TopologicalSort {",
			"    int m_n;                             // m_n:=(頂点数).",
			"    std::vector<std::vector<int> > m_g;  // m_g[v]:=(頂点vの出力辺リスト).",
			"",
			"public:",
			"    TopologicalSort() : TopologicalSort(0) {}",
			"    explicit TopologicalSort(size_t n) : m_n(n), m_g(n) {}",
			"",
			"    // 頂点数を返す．",
			"    int size() const { return m_n; }",
			"    // 有向辺を張る．",
			"    void add_edge(int from, int to) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back(to);",
			"    }",
			"    // 任意のトポロジカルソートの解を求める．O(|E|).",
			"    std::vector<int> topological_sort() const {",
			"        std::vector<int> res;",
			"        std::vector<int> deg(size(), 0);  // deg[v]:=(頂点vの入次数).",
			"        for(const auto &edge : m_g) {",
			"            for(const auto &to : edge) deg[to]++;",
			"        }",
			"        std::queue<int> que;",
			"        for(int i = 0; i < size(); ++i) {",
			"            if(deg[i] == 0) que.push(i);",
			"        }",
			"        while(!que.empty()) {",
			"            int u = que.front();",
			"            que.pop();",
			"            res.push_back(u);",
			"            for(auto v : m_g[u]) {",
			"                if(--deg[v] == 0) que.push(v);",
			"            }",
			"        }",
			"        if(res.size() != size()) return std::vector<int>(0);  // 閉路がある場合．",
			"        return res;",
			"    }",
			"    // 考え得るトポロジカルソートの解を数え上げる．頂点数の上限目安は20程度．O((2^N)*N*N).",
			"    long long count_up() const {",
			"        bool bad[size()][size()] = {};",
			"        for(int from = 0; from < size(); ++from) {",
			"            for(const auto &to : m_g[from]) bad[to][from] = true;",
			"        }",
			"        std::vector<long long> dp(1 << m_n, 0);  // bitDP.",
			"        dp[0] = 1;",
			"        for(int bits = 0; bits < (1 << m_n); ++bits) {",
			"            for(int i = 0; i < m_n; ++i) {",
			"                if(!(bits >> i & 1)) {",
			"                    bool ok = true;",
			"                    for(int j = 0; j < m_n; ++j) {",
			"                        if(bits >> j & 1 and bad[j][i]) ok = false;",
			"                    }",
			"                    if(ok) dp[bits | 1 << i] += dp[bits];",
			"                }",
			"            }",
			"        }",
			"        return dp[(1 << m_n) - 1];",
			"    }",
			"};"
		],
		"description": "トポロジカルソート"
	},
	"UnionFind": {
		"scope": "cpp",
		"prefix": "UnionFind",
		"body": [
			"// 素集合データ構造．",
			"class UnionFind {",
			"    int m_vn;                // m_vn:=(ノード数).",
			"    int m_gn;                // m_gn:=(連結成分数).",
			"    std::vector<int> m_par;  // m_par[v]:=(ノードvの親番号). 0未満の場合，vは根であり，値の絶対値は連結成分のサイズを表す．",
			"",
			"public:",
			"    UnionFind() : UnionFind(0) {}",
			"    explicit UnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1) {}",
			"",
			"    // ノードの総数を返す．",
			"    int vn() const { return m_vn; };",
			"    // 連結成分の数を返す．",
			"    int gn() const { return m_gn; };",
			"    // ノードvが属する連結成分の根番号を返す．",
			"    int root(int v) {",
			"        assert(0 <= v and v < vn());",
			"        if(m_par[v] < 0) return v;",
			"        return m_par[v] = root(m_par[v]);",
			"    }",
			"    // ノードvが属する連結成分のサイズを返す．",
			"    int size(int v) {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)];",
			"    }",
			"    // ノードuとvが連結しているか判定する．",
			"    bool is_same(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // ノードuとvの属する連結成分を繋げる．",
			"    bool unite(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        u = root(u), v = root(v);",
			"        if(u == v) return false;                // Do nothing.",
			"        if(size(u) < size(v)) std::swap(u, v);  // Merge technique.",
			"        m_par[u] += m_par[v];",
			"        m_par[v] = u;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"    }",
			"};"
		],
		"description": "素集合データ構造"
	},
	"bit_count": {
		"scope": "cpp",
		"prefix": "bit_count",
		"body": [
			"int bit_count32(uint32_t n) {",
			"    const uint32_t masks[5] = {0x55555555U, 0x33333333U, 0x0f0f0f0fU, 0x00ff00ffU, 0x0000ffffU};",
			"    for(int i = 0; i < 5; ++i) n = (n & masks[i]) + ((n >> (1U << i)) & masks[i]);",
			"    return n;",
			"}",
			"",
			"int bit_count64(uint64_t n) {",
			"    const uint64_t masks[6] = {0x5555555555555555ULL, 0x3333333333333333ULL, 0x0f0f0f0f0f0f0f0fULL,",
			"                               0x00ff00ff00ff00ffULL, 0x0000ffff0000ffffULL, 0x00000000ffffffffULL};",
			"    for(int i = 0; i < 6; ++i) n = (n & masks[i]) + ((n >> (1ULL << i)) & masks[i]);",
			"    return n;",
			"}"
		],
		"description": ""
	},
	"calc_tree_diameter": {
		"scope": "cpp",
		"prefix": "calc_tree_diameter",
		"body": [
			"// 木の直径．O(|E|*|V|).",
			"std::tuple<int, int, int> calc_tree_diameter(const std::vector<std::vector<int> > &g) {",
			"    if(g.size() == 0) return {-1, -1, -1};",
			"    int endpoint;",
			"    std::vector<int> dist(g.size());",
			"    auto bfs = [&](int s) -> void {",
			"        std::queue<int> que;",
			"        que.push(s);",
			"        endpoint = s;",
			"        std::fill(dist.begin(), dist.end(), -1);",
			"        dist[s] = 0;",
			"        while(!que.empty()) {",
			"            auto u = que.front();",
			"            que.pop();",
			"            endpoint = u;",
			"            for(auto v : g[u]) {",
			"                if(dist[v] == -1) {",
			"                    dist[v] = dist[u] + 1;",
			"                    que.push(v);",
			"                }",
			"            }",
			"        }",
			"    };",
			"    bfs(0);",
			"    int tmp = endpoint;",
			"    bfs(endpoint);",
			"    return {dist[endpoint], tmp, endpoint};  // tuple of (distance, endpoint1, endpoint2).",
			"}",
			"",
			"// 重み付き木の直径．O(|E|*log|V|).",
			"template <typename Type>",
			"std::tuple<Type, int, int> calc_tree_diameter(const std::vector<std::vector<std::pair<int, Type> > > &g) {",
			"    if(g.size() == 0) return {-1, -1, -1};",
			"    int endpoint;",
			"    std::vector<Type> dist(g.size());",
			"    auto bfs = [&](int s) -> void {",
			"        std::priority_queue<std::pair<Type, int> > pque;",
			"        pque.emplace(0, s);",
			"        endpoint = s;",
			"        std::fill(dist.begin(), dist.end(), -1);",
			"        dist[s] = 0;",
			"        while(!pque.empty()) {",
			"            auto [d, u] = pque.top();",
			"            pque.pop();",
			"            if(-d > dist[u]) continue;",
			"            endpoint = u;",
			"            for(const auto &[v, cost] : g[u]) {",
			"                if(dist[v] == -1) {",
			"                    dist[v] = dist[u] + cost;",
			"                    pque.emplace(-dist[v], v);",
			"                }",
			"            }",
			"        }",
			"    };",
			"    bfs(0);",
			"    int tmp = endpoint;",
			"    bfs(endpoint);",
			"    return {dist[endpoint], tmp, endpoint};  // tuple of (distance, endpoint1, endpoint2).",
			"}"
		],
		"description": "木の直径"
	},
	"calc_viewing_range": {
		"scope": "cpp",
		"prefix": "calc_viewing_range",
		"body": [
			"// 見晴らし範囲．",
			"// H[] within [left[i], right[i]) <= H[i] (left[i] <= i < right[i]) となるleft[], right[]を求める．O(N).",
			"template <typename Type, typename Func = std::function<bool(Type, Type)> >",
			"std::pair<std::vector<int>, std::vector<int> > calc_viewing_range(",
			"    const std::vector<Type> &h,",
			"    const Func &comp = [](const Type &a, const Type &b) -> bool { return a <= b; }) {",
			"    const int n = h.size();",
			"    std::vector<int> left(n, 0), right(n, n);",
			"    // left side.",
			"    std::stack<std::pair<Type, int> > stack_left;",
			"    for(int i = 0; i < n; ++i) {",
			"        while(!stack_left.empty() and comp(stack_left.top().first, h[i])) stack_left.pop();",
			"        if(!stack_left.empty()) left[i] = stack_left.top().second + 1;",
			"        stack_left.push({h[i], i});",
			"    }",
			"    // right side.",
			"    std::stack<std::pair<Type, int> > stack_right;",
			"    for(int i = n - 1; i >= 0; --i) {",
			"        while(!stack_right.empty() and comp(stack_right.top().first, h[i])) stack_right.pop();",
			"        if(!stack_right.empty()) right[i] = stack_right.top().second;",
			"        stack_right.push({h[i], i});",
			"    }",
			"    return {left, right};",
			"}"
		],
		"description": "見晴らし範囲"
	},
	"divisors": {
		"scope": "cpp",
		"prefix": "divisors",
		"body": [
			"// 約数列挙．O(√N).",
			"template <typename Type>",
			"std::vector<Type> divisors(Type n) {",
			"    assert(n >= 0);",
			"    std::vector<Type> res;  // res[]:=(自然数nの約数の集合).",
			"    for(Type p = 1; p * p <= n; ++p) {",
			"        if(n % p == 0) {",
			"            res.push_back(p);",
			"            Type q = n / p;",
			"            if(q != p) res.push_back(q);",
			"        }",
			"    }",
			"    std::sort(res.begin(), res.end());",
			"    return res;",
			"}"
		],
		"description": "約数列挙"
	},
	"edit_distance": {
		"scope": "cpp",
		"prefix": "edit_distance",
		"body": [
			"// 編集距離 (edit distance)．引数はSTLのシーケンスコンテナ．O(|S|*|T|).",
			"template <class Sequence>",
			"int edit_distance(const Sequence &s, const Sequence &t) {",
			"    const int m = s.size(), n = t.size();",
			"    std::vector<std::vector<int> > dp(m + 1, std::vector<int>(n + 1));  // dp[i][j]:=(s[:i]とt[:j]の編集距離).",
			"    dp[0][0] = 0;",
			"    for(int i = 1; i <= m; ++i) dp[i][0] = i;",
			"    for(int j = 1; j <= n; ++j) dp[0][j] = j;",
			"    for(int i = 1; i <= m; ++i) {",
			"        for(int j = 1; j <= n; ++j) {",
			"            dp[i][j] = std::min({dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + (s[i - 1] == t[j - 1] ? 0 : 1)});",
			"        }",
			"    }",
			"    return dp[m][n];",
			"}"
		],
		"description": "編集距離 (edit distance)"
	},
	"extgcd, crt": {
		"scope": "cpp",
		"prefix": "extgcd, crt",
		"body": [
			"// 拡張ユークリッドの互除法．",
			"// ax+by=GCD(a,b) を満たす整数の組(x,y)を求め，GCD(a,b)を返す．O(logN).",
			"template <typename Type>",
			"Type extgcd(Type a, Type b, Type &x, Type &y) {",
			"    if(b == 0) {",
			"        x = 1, y = 0;",
			"        return a;",
			"    }",
			"    Type d = extgcd(b, a % b, y, x);",
			"    y -= a / b * x;",
			"    return d;",
			"}",
			"",
			"// 中国剰余定理 (Chinese Remainder Theorem)．",
			"// x≡b1 (mod. m1) かつ x≡b2 (mod. m2) を満たす整数x(0≦x＜lcm(m1,m2))を求める．",
			"// 返り値は x≡r (mod. m) となる組(r,m)．解なしの場合，(0,-1)を返す．",
			"std::pair<long long, long long> crt(long long b1, long long m1, long long b2, long long m2) {",
			"    long long p, q;",
			"    long long d = extgcd(m1, m2, p, q);  // p is inv of m1/d (mod. m2/d)",
			"    if((b2 - b1) % d != 0) return {0, -1};",
			"    long long m = m1 / d * m2;  // lcm of (m1,m2)",
			"    long long tmp = (b2 - b1) / d * p % (m2 / d);",
			"    long long r = ((b1 + m1 * tmp) % m + m) % m;",
			"    return {r, m};",
			"}",
			"",
			"// 中国剰余定理 (Chinese Remainder Theorem)．",
			"// 各iについて，x≡b[i] (mod. m[i]) を満たす整数x(0≦x＜lcm(m[i]))を求める．",
			"// 返り値は x≡r (mod. m) となる組(r,m)．解なしの場合，(0,-1)を返す．",
			"std::pair<long long, long long> crt(const std::vector<long long> &bs, const std::vector<long long> &ms) {",
			"    assert(bs.size() == ms.size());",
			"    const int sz = bs.size();",
			"    long long r = 0, m = 1;",
			"    for(int i = 0; i < sz; ++i) {",
			"        auto &&[rr, mm] = crt(r, m, bs[i], ms[i]);",
			"        if(rr == 0 and mm == -1) return {0, -1};",
			"        r = rr, m = mm;",
			"    }",
			"    return {r, m};",
			"}"
		],
		"description": "拡張ユークリッドの互除法，中国剰余定理 (Chinese Remainder Theorem)"
	},
	"floor_sum": {
		"scope": "cpp",
		"prefix": "floor_sum",
		"body": [
			"// sum_{x=0}^{n-1} floor((a*x+b)/m)を求める．O(logA+logM).",
			"long long floor_sum(long long n, long long m, long long a, long long b) {",
			"    assert(0 <= n and n < (1LL << 32));",
			"    assert(1 <= m and m < (1LL << 32));",
			"    long long res = 0;",
			"    if(a < 0) {",
			"        long long a2 = (a % m + m) % m;",
			"        res -= n * (n - 1) / 2 * ((a2 - a) / m);",
			"        a = a2;",
			"    }",
			"    if(b < 0) {",
			"        long long b2 = (b % m + m) % m;",
			"        res -= n * ((b2 - b) / m);",
			"        b = b2;",
			"    }",
			"    if(a >= m) {",
			"        res += n * (n - 1) / 2 * (a / m);",
			"        a %= m;",
			"    }",
			"    if(b >= m) {",
			"        res += n * (b / m);",
			"        b %= m;",
			"    }",
			"    long long y_max = a * n + b;",
			"    if(y_max >= m) res += floor_sum(y_max / m, a, m, y_max % m);",
			"    return res;",
			"}"
		],
		"description": ""
	},
	"igcd, ilcm": {
		"scope": "cpp",
		"prefix": "igcd, ilcm",
		"body": [
			"template<typename Type> Type igcd(Type a,Type b){return (b==0)?a:igcd(b,a%b);}",
			"template<typename Type> Type ilcm(Type a,Type b){return a/igcd(a,b)*b;}"
		],
		"description": "最大公約数，最小公倍数"
	},
	"ipow": {
		"scope": "cpp",
		"prefix": "ipow",
		"body": [
			"// 繰返し二乗法．O(logK).",
			"long long ipow(long long n, long long k) {",
			"    assert(k >= 0);",
			"    if(k == 0) return 1;",
			"    long long &&res = ipow(n * n, k >> 1);",
			"    if(k & 1LL) res *= n;",
			"    return res;",
			"}"
		],
		"description": "繰返し二乗法"
	},
	"isqrt": {
		"scope": "cpp",
		"prefix": "isqrt",
		"body": [
			"// 平方根（ニュートン法）．",
			"double isqrt(double x, const double eps = 1e-10) {",
			"    assert(x >= 0.0);",
			"    double res = 5.0;",
			"    while(1) {",
			"        double tmp = (x / res + res) / 2;",
			"        if(std::abs(tmp - res) < eps) break;",
			"        res = tmp;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "平方根（ニュートン法）"
	},
	"is_prime": {
		"scope": "cpp",
		"prefix": "is_prime",
		"body": [
			"// 素数判定．O(√N).",
			"template <typename Type>",
			"bool is_prime(Type n) {",
			"    assert(n >= 0);",
			"    if(n < 2) return false;",
			"    for(Type p = 2; p * p <= n; ++p) {",
			"        if(n % p == 0) return false;",
			"    }",
			"    return true;",
			"}"
		],
		"description": "素数判定"
	},
	"lcs": {
		"scope": "cpp",
		"prefix": "lcs",
		"body": [
			"// 最長共通部分列 (LCS: Longest Common Subsequence)．引数はSTLのシーケンスコンテナ．O(|A|*|B|).",
			"template <class Sequence>",
			"Sequence lcs(const Sequence &a, const Sequence &b) {",
			"    assert(a.size() > 0 and b.size() > 0);",
			"    const int n = a.size(), m = b.size();",
			"    std::vector<std::vector<int> > dp(n + 1, std::vector<int>(m + 1, 0));  // dp[i][j]:=(a[:i]とb[:j]のLCSの長さ).",
			"    for(int i = 1; i <= n; ++i) {",
			"        for(int j = 1; j <= m; ++j) {",
			"            if(a[i - 1] == b[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;",
			"            else dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);",
			"        }",
			"    }",
			"    Sequence sub(dp[n][m], a[0]);  // sub[]:=(配列a, bのLCS).",
			"    int i = n, j = m, k = dp[n][m];",
			"    while(k > 0) {",
			"        if(a[i - 1] == b[j - 1]) {",
			"            sub[k - 1] = a[i - 1];",
			"            i--, j--, k--;",
			"        } else if(dp[i][j] == dp[i - 1][j]) {",
			"            i--;",
			"        } else {",
			"            j--;",
			"        }",
			"    }",
			"    return sub;",
			"}"
		],
		"description": "最長共通部分列 (LCS: Longest Common Subsequence)"
	},
	"lis": {
		"scope": "cpp",
		"prefix": "lis",
		"body": [
			"// 最長増加部分列 (LIS: Longest Increasing Subsequence) の長さを求める．引数はSTLのシーケンスコンテナ．O(|A|*log|A|).",
			"template <class Sequence>",
			"int lis(const Sequence &a, bool is_strong = true) {",
			"    assert(a.size() > 0);",
			"    Sequence dp({a[0]});",
			"    for(int i = 1; i < a.size(); ++i) {",
			"        if(is_strong) {  // 狭義単調増加．",
			"            if(dp[dp.size() - 1] < a[i]) dp.push_back(a[i]);",
			"            else *lower_bound(dp.begin(), dp.end(), a[i]) = a[i];",
			"        } else {  // 広義単調増加．",
			"            if(dp[dp.size() - 1] <= a[i]) dp.push_back(a[i]);",
			"            else *upper_bound(dp.begin(), dp.end(), a[i]) = a[i];",
			"        }",
			"    }",
			"    return dp.size();",
			"}"
		],
		"description": "最長増加部分列 (LIS: Longest Increasing Subsequence)"
	},
	"mod_inv": {
		"scope": "cpp",
		"prefix": "mod_inv",
		"body": [
			"// 逆元．a^-1 (mod m)を求める．ただし，aとmは互いに素であること．",
			"long long mod_inv(long long a, int m) {",
			"    assert(m >= 1 and std::gcd(a, m) == 1);",
			"    long long b = m, u = 1, v = 0;",
			"    while(b) {",
			"        long long t = a / b;",
			"        a -= t * b, u -= t * v;",
			"        std::swap(a, b), std::swap(u, v);",
			"    }",
			"    return (u % m + m) % m;",
			"}"
		],
		"description": "逆元"
	},
	"mod_pow": {
		"scope": "cpp",
		"prefix": "mod_pow",
		"body": [
			"// 繰返し二乗法（mod付き）．n^k (mod m)を求める．O(logK).",
			"long long mod_pow(long long n, long long k, int m) {",
			"    assert(k >= 0 and m >= 1);",
			"    n %= m;",
			"    long long res = 1;",
			"    while(k > 0) {",
			"        if(k & 1LL) res = res * n % m;",
			"        n = n * n % m;",
			"        k >>= 1;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "繰返し二乗法（mod付き）"
	},
	"nPk, nCk, nHk": {
		"scope": "cpp",
		"prefix": "nPk, nCk, nHk",
		"body": [
			"// 順列．",
			"inline long long nPk(long long n, int k) {",
			"    assert(0 <= k and k <= n);",
			"    long long res = 1;",
			"    for(int i = 0; i < k; ++i) res = res * (n - i);",
			"    return res;",
			"}",
			"",
			"// 組合せ．",
			"inline long long nCk(long long n, int k) {",
			"    assert(0 <= k and k <= n);",
			"    long long res = 1;",
			"    for(int i = 0; i < k; ++i) res = res * (n - i) / (i + 1);",
			"    return res;",
			"}",
			"",
			"// 重複組合せ．",
			"inline long long nHk(int n, long long k) { return nCk(k + n - 1, n - 1); }"
		],
		"description": "順列，組合せ"
	},
	"prime_factorize": {
		"scope": "cpp",
		"prefix": "prime_factorize",
		"body": [
			"// 素因数分解．O(√N).",
			"template <typename Type>",
			"std::map<Type, int> prime_factorize(Type n) {",
			"    assert(n >= 2);",
			"    std::map<Type, int> res;  // res[p]:=(自然数nに含まれる素因数pの個数).",
			"    for(Type p = 2; p * p <= n; ++p) {",
			"        if(n % p != 0) continue;",
			"        while(n % p == 0) res[p]++, n /= p;",
			"    }",
			"    if(n != 1) res[n]++;",
			"    return res;",
			"}"
		],
		"description": "素因数分解"
	},
	"rotate": {
		"scope": "cpp",
		"prefix": "rotate",
		"body": [
			"// 2次元配列を時計回り90度回転させる．",
			"template <typename Type>",
			"std::vector<std::vector<Type> > rotate(const std::vector<std::vector<Type> > &v) {",
			"    assert(v.size() > 0);",
			"    const int h = v.size();",
			"    const int w = v[0].size();",
			"    std::vector<std::vector<Type> > res(w, std::vector<Type>(h));",
			"    for(int i = 0; i < w; ++i) {",
			"        for(int j = 0; j < h; ++j) res[i][j] = v[h - 1 - j][i];",
			"    }",
			"    return res;",
			"}"
		],
		"description": ""
	},
	"string_modulo": {
		"scope": "cpp",
		"prefix": "string_modulo",
		"body": [
			"// 文字列剰余．O(|S|).",
			"template <typename Type>",
			"Type string_modulo(const std::string &s, const Type mod) {",
			"    const int n = s.size();",
			"    long long res = 0;",
			"    for(int i = 0; i < n; ++i) {",
			"        assert('0' <= s[i] and s[i] <= '9');",
			"        res = (10 * res + (s[i] - '0')) % mod;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "文字列剰余"
	},
	"z_algorithm": {
		"scope": "cpp",
		"prefix": "z_algorithm",
		"body": [
			"// 最長共通接頭辞 (LCP: Longest Common Prefix)．O(|S|).",
			"template <class Sequence>",
			"std::vector<int> z_algorithm(const Sequence &s) {",
			"    const int n = s.size();",
			"    std::vector<int> z(n + 1);  // z[i]:=(sとs[i:]のLCPの長さ).",
			"    z[0] = n, z[n] = 0;",
			"    int i = 1, j = 0;",
			"    while(i < n) {",
			"        while(i + j < n and s[j] == s[i + j]) j++;",
			"        z[i] = j;",
			"        if(j == 0) {",
			"            i++;",
			"            continue;",
			"        }",
			"        int k = 1;",
			"        while(i + k < n and z[k] + k < j) {",
			"            z[i + k] = z[k];",
			"            k++;",
			"        }",
			"        i += k, j -= k;",
			"    }",
			"    return z;",
			"}"
		],
		"description": "最長共通接頭辞 (LCP: Longest Common Prefix)"
	},
	"namespace geometry (Vector)": {
		"scope": "cpp",
		"prefix": "namespace geometry (Vector)",
		"body": [
			"namespace geometry {",
			"",
			"using Type = double;",
			"",
			"const Type INF = 1e18;",
			"const Type EPS = 1e-10;",
			"const Type PI = std::acos(-1.0);",
			"",
			"inline bool equal_to(const Type &a, const Type &b) { return std::abs(a - b) < EPS; }",
			"inline bool less_than(const Type &a, const Type &b) { return a - b < -EPS; }",
			"inline bool more_than(const Type &a, const Type &b) { return a - b > EPS; }",
			"inline bool no_more(const Type &a, const Type &b) { return a - b < EPS; }",
			"inline bool no_less(const Type &a, const Type &b) { return a - b > -EPS; }",
			"",
			"// 角度を弧度法に変換する．",
			"inline Type to_radian(Type deg) { return deg / 180.0 * PI; }",
			"// 角度を度数法に変換する．",
			"inline Type to_degree(Type rad) { return rad / PI * 180.0; }",
			"",
			"struct Vector {",
			"    Type x, y;",
			"",
			"    Vector() : Vector(0.0, 0.0) {}",
			"    Vector(Type x_, Type y_) : x(x_), y(y_) {}",
			"",
			"    Vector operator+() const { return Vector(*this); }",
			"    Vector operator-() const { return Vector(-x, -y); }",
			"    Vector operator*(Type n) const { return Vector(x * n, y * n); }",
			"    Vector operator/(Type n) const { return Vector(x / n, y / n); }",
			"    Vector &operator*=(Type n) {",
			"        x *= n, y *= n;",
			"        return *this;",
			"    }",
			"    Vector &operator/=(Type n) {",
			"        x /= n, y /= n;",
			"        return *this;",
			"    }",
			"    Vector &operator+=(const Vector &a) {",
			"        x += a.x, y += a.y;",
			"        return *this;",
			"    }",
			"    Vector &operator-=(const Vector &a) {",
			"        x -= a.x, y -= a.y;",
			"        return *this;",
			"    }",
			"",
			"    friend Vector operator*(Type n, const Vector &a) { return a * n; }",
			"    friend Vector operator+(const Vector &a, const Vector &b) { return Vector(a.x + b.x, a.y + b.y); }",
			"    friend Vector operator-(const Vector &a, const Vector &b) { return Vector(a.x - b.x, a.y - b.y); }",
			"    friend bool operator<(const Vector &a, const Vector &b) { return (equal_to(a.x, b.x) ? less_than(a.y, b.y) : less_than(a.x, b.x)); }",
			"    friend bool operator>(const Vector &a, const Vector &b) { return (equal_to(a.x, b.x) ? more_than(a.y, b.y) : more_than(a.x, b.x)); }",
			"    friend bool operator<=(const Vector &a, const Vector &b) { return (equal_to(a.x, b.x) ? no_more(a.y, b.y) : no_more(a.x, b.x)); }",
			"    friend bool operator>=(const Vector &a, const Vector &b) { return (equal_to(a.x, b.x) ? no_less(a.y, b.y) : no_less(a.x, b.x)); }",
			"    friend bool operator==(const Vector &a, const Vector &b) { return (equal_to(a.x, b.x) and equal_to(a.y, b.y)); }",
			"    friend bool operator!=(const Vector &a, const Vector &b) { return !(a == b); }",
			"    friend std::ostream &operator<<(std::ostream &os, const Vector &a) { return os << \"(\" << a.x << \", \" << a.y << \")\"; }",
			"",
			"    // ノルム．",
			"    Type norm() const { return std::sqrt(dot(*this, *this)); }",
			"    // x軸となす角．[-π,π].",
			"    Type arg() const { return std::atan2(y, x); }",
			"    // x軸となす角．[0,2π).",
			"    Type arg2() const {",
			"        auto res = arg();",
			"        if(less_than(res, 0.0)) res += 2 * PI;",
			"        return res;",
			"    }",
			"    // 反時計回りに角度arg（ラジアン単位）回転したベクトル．",
			"    Vector rotate(Type arg) const {",
			"        Type nx = x * std::cos(arg) - y * std::sin(arg);",
			"        Type ny = x * std::sin(arg) + y * std::cos(arg);",
			"        return Vector(nx, ny);",
			"    }",
			"    // 反時計回りに90度回転したベクトル．",
			"    Vector rotate90() const { return Vector(-y, x); }",
			"    // 180度回転したベクトル．",
			"    Vector rotate180() const { return Vector(-x, -y); }",
			"    // 単位ベクトル．",
			"    Vector unit() const { return *this / norm(); }",
			"",
			"    // 内積．",
			"    friend inline Type dot(const Vector &a, const Vector &b) { return a.x * b.x + a.y * b.y; }",
			"    // 外積．",
			"    friend inline Type cross(const Vector &a, const Vector &b) { return a.x * b.y - a.y * b.x; }",
			"};",
			"",
			"using Point = Vector;",
			"using Polygon = std::vector<Point>;",
			"",
			"// 反時計回りに角度arg（ラジアン単位）回転させる．",
			"void rotate(Vector &a, Type arg) {",
			"    Type nx = a.x * std::cos(arg) - a.y * std::sin(arg);",
			"    Type ny = a.x * std::sin(arg) + a.y * std::cos(arg);",
			"    a.x = nx, a.y = ny;",
			"}",
			"// 反時計周りに90度回転させる．",
			"inline void rotate90(Vector &a) {",
			"    auto tmp = a.x;",
			"    a.x = -a.y;",
			"    a.y = tmp;",
			"}",
			"// 反時計周りに180度回転させる．",
			"inline void rotate180(Vector &a) { a.x = -a.x, a.y = -a.y; }",
			"",
			"// 2点間距離を計算する．",
			"inline Type distance(const Point &P, const Point &Q) { return (Q - P).norm(); }",
			"",
			"// 3点の位置関係．",
			"int simple_ccw(const Point &A, const Point &B, const Point &P) {",
			"    Vector b = B - A, p = P - A;",
			"    if(more_than(cross(b, p), 0.0)) return 1;   // A->Bの反時計方向にP．",
			"    if(less_than(cross(b, p), 0.0)) return -1;  // A->Bの時計方向にP．",
			"    return 0;                                   // 一直線上．",
			"}",
			"int ccw(const Point &A, const Point &B, const Point &P) {",
			"    Vector b = B - A, p = P - A;",
			"    if(more_than(cross(b, p), 0.0)) return 1;      // A->Bの反時計方向にP．counter clockwise.",
			"    if(less_than(cross(b, p), 0.0)) return -1;     // A->Bの時計方向にP．clockwise.",
			"    if(less_than(dot(b, p), 0.0)) return -2;       // P->A->Bの順に一直線上．online back.",
			"    if(more_than(dot(p, p), dot(b, b))) return 2;  // A->B->Pの順に一直線上．online front.",
			"    return 0;                                      // A->P->Bの順に一直線上．on segment.",
			"}",
			"",
			"// 三角形と点の包含関係．",
			"int contain(const Point &A, const Point &B, const Point &C, const Point &P) {",
			"    int flag1 = ccw(A, B, P), flag2 = ccw(B, C, P), flag3 = ccw(C, A, P);",
			"    if(flag1 == 0 or flag2 == 0 or flag3 == 0) return 1;       // on.",
			"    if(flag1 == -1 and flag2 == -1 and flag3 == -1) return 2;  // in.",
			"    if(flag1 == 1 and flag2 == 1 and flag3 == 1) return 2;     // in.",
			"    return 0;                                                  // out.",
			"}",
			"",
			"// 複素数．",
			"struct Complex : public Point {",
			"    Complex() : Point() {}",
			"    Complex(const Point &P) : Point(P) {}",
			"    Complex(Type x_, Type y_) : Point(x_, y_) {}",
			"",
			"    Complex &operator*=(const Complex &z) {",
			"        const auto [tx, ty] = *this;",
			"        x = tx * z.x - ty * z.y;",
			"        y = tx * z.y + ty * z.x;",
			"        return *this;",
			"    }",
			"    Complex &operator/=(const Complex &z) {",
			"        const auto [tx, ty] = *this;",
			"        x = tx * z.x - ty * z.y;",
			"        y = tx * z.y + ty * z.x;",
			"        return *this;",
			"    }",
			"",
			"    friend Complex operator*(const Complex &z, const Complex &w) { return Complex(z.x * w.x - z.y * w.y, z.x * w.y + z.y * w.x); }",
			"    friend Complex operator/(const Complex &z, const Complex &w) { return Complex(z / (w.x * w.x + w.y * w.y)) * w; }",
			"",
			"    // 共役複素数．Conjugate complex number.",
			"    Complex conj() const { return Complex(x, -y); }",
			"};",
			"",
			"// 極形式．大きさr，偏角argの複素数を返す．",
			"inline Complex polar(Type r, Type arg) { return Complex(r * std::cos(arg), r * std::sin(arg)); }",
			"// 極形式(r,θ)に変換する．θ∈[-π,π].",
			"inline std::pair<Type, Type> convert_polor(const Complex &z) { return {z.norm(), z.arg()}; }",
			"// 極形式(r,θ)に変換する．θ∈[0,2π).",
			"inline std::pair<Type, Type> convert_polor2(const Complex &z) { return {z.norm(), z.arg2()}; }",
			"",
			"}  // namespace geometry",
			"",
			"// using namespace geometry;"
		],
		"description": ""
	},
	"namespace geometry (Line)": {
		"scope": "cpp",
		"prefix": "namespace geometry (Line)",
		"body": [
			"namespace geometry {",
			"",
			"// 直線．",
			"struct Line {",
			"    std::array<Point, 2> ps;",
			"",
			"    Line() : Line(Point(), Point()) {}",
			"    explicit Line(const Point &P, const Point &Q) : ps({P, Q}) {}",
			"",
			"    Point &operator[](int i) {",
			"        assert(0 <= i and i < 2);",
			"        return ps[i];",
			"    }",
			"    const Point &operator[](int i) const {",
			"        assert(0 <= i and i < 2);",
			"        return ps[i];",
			"    }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const Line &s) { return os << \"{\" << s[0] << \", \" << s[1] << \"}\"; }",
			"",
			"    // 傾き．",
			"    Type slope() const { return (ps[1].y - ps[0].y) / (ps[1].x - ps[0].x); }",
			"    // y切片．",
			"    Type y_intercept() const { return ps[0].y - slope() * ps[0].x; }",
			"    // x切片．",
			"    Type x_intercept() const { return ps[0].x - ps[0].y / slope(); }",
			"    bool on_line(const Point &P) const { return equal_to(cross(ps[1] - ps[0], P - ps[0]), 0.0); }",
			"};",
			"",
			"// 線分．",
			"struct Segment : public Line {",
			"    Segment() : Line() {}",
			"    Segment(const Line &l) : Line(l) {}",
			"    explicit Segment(const Point &P, const Point &Q) : Line(P, Q) {}",
			"",
			"    // 線分の長さ．",
			"    Type length() const { return distance(ps[0], ps[1]); }",
			"    bool on_segment(const Point &P) const {",
			"        Vector b = ps[1] - ps[0], p = P - ps[0];",
			"        if(!equal_to(cross(b, p), 0.0)) return false;",
			"        return (no_less(dot(b, p), 0.0) and no_more(dot(p, p), dot(b, b)));",
			"    }",
			"};",
			"",
			"// 直線の直交判定．",
			"bool jud_orthogonal(const Line &l, const Line &m) {",
			"    Vector b = l[1] - l[0], d = m[1] - m[0];",
			"    return equal_to(dot(b, d), 0.0);",
			"}",
			"// 直線の平行判定．",
			"bool jud_parallel(const Line &l, const Line &m) {",
			"    Vector b = l[1] - l[0], d = m[1] - m[0];",
			"    return equal_to(cross(b, d), 0.0);",
			"}",
			"// 直線の交差判定．",
			"bool jud_intersection(const Line &l, const Line &m) { return !jud_parallel(l, m); }",
			"// 直線と線分の交差判定．",
			"bool jud_intersection(const Line &l, const Segment &m) {",
			"    Vector b = l[1] - l[0];",
			"    auto s = cross(b, m[0] - l[0]);",
			"    auto t = cross(b, m[1] - l[0]);",
			"    return no_more(s * t, 0.0);",
			"}",
			"bool jud_intersection(const Segment &l, const Line &m) { return jud_intersection(m, l); }",
			"// 線分の交差判定．",
			"bool jud_intersection(const Segment &l, const Segment &m) {",
			"    Vector b = l[1] - l[0], d = m[1] - m[0];",
			"    auto s = cross(b, m[0] - l[0]);",
			"    auto t = cross(b, m[1] - l[0]);",
			"    if(more_than(s * t, 0.0)) return false;",
			"    s = cross(d, l[0] - m[0]);",
			"    t = cross(d, l[1] - m[0]);",
			"    if(more_than(s * t, 0.0)) return false;",
			"    return true;",
			"}",
			"",
			"// 2直線の交点．",
			"Point intersection(const Line &l, const Line &m) {",
			"    Vector b = l[1] - l[0], d = m[1] - m[0];",
			"    auto s = cross(m[0] - l[0], d) / cross(b, d);",
			"    return Point(l[0] + s * b);",
			"    // auto t = cross(b, l[0] - m[0]) / cross(b, d);",
			"    // return Point(m[0] + t * d);",
			"}",
			"",
			"// 垂線の足．",
			"Point projection(const Line &l, const Point &P) {",
			"    Vector a = l[1] - l[0];",
			"    return l[0] + a * (dot(P - l[0], a) / dot(a, a));",
			"}",
			"// 対象点．",
			"Point reflection(const Line &l, const Point &P) {",
			"    Point H = projection(l, P);",
			"    return P + 2 * (H - P);",
			"}",
			"",
			"// 点と線の距離．",
			"Type distance(const Line &l, const Point &P) {",
			"    Point H = projection(l, P);",
			"    return distance(P, H);",
			"}",
			"Type distance(const Point &P, const Line &l) { return distance(l, P); }",
			"Type distance(const Segment &s, const Point &P) {",
			"    Point H = projection(s, P);",
			"    if(s.on_segment(H)) return distance(H, P);",
			"    return std::min(distance(P, s[0]), distance(P, s[1]));",
			"}",
			"Type distance(const Point &P, const Segment &s) { return distance(s, P); }",
			"",
			"}  // namespace geometry",
			"",
			"// using namespace geometry;"
		],
		"description": ""
	},
	"namespace geometry (Figure)": {
		"scope": "cpp",
		"prefix": "namespace geometry (Figure)",
		"body": [
			"namespace geometry {",
			"",
			"// 長方形．",
			"struct Box {",
			"    std::array<Point, 2> ps;",
			"",
			"    // constructor. 2点を対角とする長方形を定義する．",
			"    Box() : Box(Point(), Point(1, 1)) {}",
			"    explicit Box(const Point &P, const Point &Q) {",
			"        ps[0].x = std::min<Type>(P.x, Q.x);",
			"        ps[0].y = std::min<Type>(P.y, Q.y);",
			"        ps[1].x = std::max<Type>(P.x, Q.x);",
			"        ps[1].y = std::max<Type>(P.y, Q.y);",
			"    }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const Box &box) {",
			"        return os << \"{\" << Point(box.ps[0].x, box.ps[1].y) << \", \" << box.ps[0]",
			"                  << \", \" << Point(box.ps[1].x, box.ps[0].y) << \", \" << box.ps[1] << \"}\";",
			"    }",
			"",
			"    // 面積．",
			"    Type area() const { return (ps[1].x - ps[0].x) * (ps[1].y - ps[0].y); }",
			"    int contain(const Point &P) const {",
			"        if(less_than(ps[0].x, P.x) and less_than(P.x, ps[1].x) and less_than(ps[0].y, P.y) and less_than(P.y, ps[1].y)) return 2;  // in.",
			"        if(no_more(ps[0].x, P.x) and no_more(P.x, ps[1].x) and no_more(ps[0].y, P.y) and no_more(P.y, ps[1].y)) return 1;          // on.",
			"        return 0;                                                                                                                  // out.",
			"    }",
			"};",
			"",
			"// 円形．",
			"struct Circle {",
			"    Point O;",
			"    Type r;",
			"",
			"    Circle() : O(Point()), r(1.0) {}",
			"    explicit Circle(Type r_) : O(Point()), r(r_) {}",
			"    explicit Circle(const Point &C_, Type r_) : O(C_), r(r_) {}",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const Circle &C) { return os << \"{O\" << C.O << \", r = \" << C.r << \"}\"; }",
			"",
			"    // 円周の長さ．",
			"    Type length() const { return 2 * r * PI; }",
			"    // 面積．",
			"    Type area() const { return r * r * PI; }",
			"    int contain(const Point &P) const {",
			"        if(less_than(distance(O, P), r)) return 2;  // in.",
			"        if(no_more(distance(O, P), r)) return 1;    // on.",
			"        return 0;                                   // out.",
			"    }",
			"};",
			"",
			"// 2点からの距離の比率がm:nであるアポロニウスの円．",
			"Circle apporonius(const Point &A, const Point &B, Type m, Type n) {",
			"    assert(!equal_to(m, n));",
			"    Point P = (n * A + m * B) / (m + n);",
			"    Point Q = (-n * A + m * B) / (m - n);",
			"    Point O = (P + Q) / 2;",
			"    Type r = (P - O).norm();",
			"    return Circle(O, r);",
			"}",
			"",
			"// 円と直線の交点．",
			"std::vector<Point> intersection(const Circle &C, const Line &l) {",
			"    std::vector<Point> res;",
			"    Point H = projection(l, C.O);",
			"    auto flag = C.contain(H);",
			"    if(flag == 1) {",
			"        res.push_back(H);",
			"    } else if(flag == 2) {",
			"        auto dist = distance(C.O, H);",
			"        auto arg = std::acos(dist / C.r);",
			"        Vector a = H - C.O;",
			"        res.push_back(C.O + a.rotate(-arg));",
			"        res.push_back(C.O + a.rotate(arg));",
			"    }",
			"    return res;",
			"}",
			"// 円と円の交点．",
			"std::vector<Point> intersection(Circle C, Circle D) {",
			"    std::vector<Point> res;",
			"    if(less_than(C.r, D.r)) std::swap(C, D);",
			"    auto dist = distance(C.O, D.O);",
			"    if(more_than(dist, C.r + D.r)) {  // 離れている場合．",
			"        // No points.",
			"    } else if(equal_to(dist, C.r + D.r)) {  // 外接する場合．",
			"        Vector a = (D.O - C.O).unit() * C.r;",
			"        res.push_back(C.O + a);",
			"    } else if(more_than(dist, std::abs(C.r - D.r))) {  // 交差する場合．",
			"        auto arg = std::acos((C.r * C.r + dist * dist - D.r * D.r) / (2 * C.r * dist));",
			"        Vector a = (D.O - C.O).unit() * C.r;",
			"        res.push_back(C.O + a.rotate(-arg));",
			"        res.push_back(C.O + a.rotate(arg));",
			"    } else if(equal_to(dist, C.r - D.r)) {  // 内接する場合．",
			"        Vector a = (D.O - C.O).unit() * C.r;",
			"        res.push_back(C.O + a);",
			"    } else {  // 内部にある場合．",
			"        // No points.",
			"    }",
			"    return res;",
			"}",
			"",
			"// 三角形の面積．",
			"Type area(const Point &A, const Point &B, const Point &C) { return std::abs(cross(B - A, C - A)) / 2; }",
			"// 多角形の面積．O(N).",
			"Type area(const Polygon &pol) {",
			"    const int n = pol.size();",
			"    Type res = 0.0;",
			"    for(int i = 0; i < n; ++i) res += cross(pol[i], pol[(i + 1) % n]);",
			"    return res / 2;",
			"}",
			"",
			"// 多角形と点の包含関係．O(N).",
			"int contain(const Polygon &pol, const Point &P) {",
			"    const int n = pol.size();",
			"    Type sum = 0.0;",
			"    for(int i = 0; i < n; ++i) {",
			"        if(Segment(pol[i], pol[(i + 1) % n]).on_segment(P)) return 1;  // on.",
			"        Vector a = pol[i] - P, b = pol[(i + 1) % n] - P;",
			"        auto arg = std::acos(dot(a, b) / a.norm() / b.norm());",
			"        if(less_than(cross(a, b), 0.0)) sum -= arg;",
			"        else sum += arg;",
			"    }",
			"    if(equal_to(sum, 0.0)) return 0;  // out. sum==0.",
			"    return 2;                         // in. sum==2*PI.",
			"}",
			"",
			"// 偏角ソート．点を反時計回りにソートする．O(NlogN).",
			"void argument_sort(Polygon &pol) {",
			"    auto comp = [](const Vector &p, const Vector &q) -> bool {",
			"        return p.arg() < q.arg();",
			"    };",
			"    std::sort(pol.begin(), pol.end(), comp);",
			"}",
			"",
			"// 凸性判定．O(N). 多角形の頂点は反時計回りに並んでいること．",
			"bool is_convex(const Polygon &pol) {",
			"    const int n = pol.size();",
			"    for(int i = 0; i < n; ++i) {",
			"        if(simple_ccw(pol[i], pol[(i + 1) % n], pol[(i + 2) % n]) == -1) return false;",
			"    }",
			"    return true;",
			"}",
			"",
			"// アンドリューのアルゴリズム．凸包．O(N*logN).",
			"Polygon andrew_scan(Polygon pol, bool is_strong = true) {",
			"    const auto cmp = (is_strong ? geometry::EPS : -geometry::EPS);",
			"    const int n = pol.size();",
			"    Polygon res(2 * n);",
			"    int k = 0;",
			"    std::sort(pol.begin(), pol.end());",
			"    for(int i = 0; i < n; ++i) {",
			"        while(k >= 2 and cross(res[k - 1] - res[k - 2], pol[i] - res[k - 2]) < cmp) k--;",
			"        res[k++] = pol[i];",
			"    }",
			"    int t = k + 1;",
			"    for(int i = n - 2; i >= 0; --i) {",
			"        while(k >= t and cross(res[k - 1] - res[k - 2], pol[i] - res[k - 2]) < cmp) k--;",
			"        res[k++] = pol[i];",
			"    }",
			"    res.resize(k - 1);",
			"    return res;",
			"}",
			"",
			"// 凸多角形の切断．O(N).",
			"Polygon convex_cut(const Polygon &pol, const Line &l) {",
			"    assert(is_convex(pol));",
			"    const int n = pol.size();",
			"    Polygon res;",
			"    for(int i = 0; i < n; ++i) {",
			"        const Point &P = pol[i];",
			"        const Point &Q = pol[(i + 1) % n];",
			"        if(simple_ccw(l[0], l[1], P) != -1) {",
			"            if(res.size() == 0 or P != *res.rbegin()) res.push_back(P);",
			"        }",
			"        if(simple_ccw(l[0], l[1], P) * simple_ccw(l[0], l[1], Q) < 0) {",
			"            Point R = intersection(Line(P, Q), l);",
			"            res.push_back(R);",
			"        }",
			"    }",
			"    return res;",
			"}",
			"",
			"}  // namespace geometry",
			"",
			"// using namespace geometry;"
		],
		"description": ""
	},
	"namespace matrix": {
		"scope": "cpp",
		"prefix": "namespace matrix",
		"body": [
			"namespace matrix {",
			"",
			"using Type = double;",
			"",
			"constexpr Type EPS = 1e-10;",
			"",
			"template <typename T>",
			"class Matrix {",
			"    int m_col;",
			"    int m_row;",
			"    std::vector<std::vector<T> > m_dat;",
			"    bool m_is_transposed;",
			"",
			"public:",
			"    Matrix() : Matrix(0, 0) {}",
			"    explicit Matrix(int m, int n) : m_col(m), m_row(n), m_dat(m, std::vector<T>(n)), m_is_transposed(false) {}",
			"    explicit Matrix(int m, int n, T val) : m_col(m), m_row(n), m_dat(m, std::vector<T>(n, val)), m_is_transposed(false) {}",
			"    explicit Matrix(const std::vector<std::vector<T> > &val) : m_col(val.size()), m_row(0), m_dat(val), m_is_transposed(false) {",
			"        for(const auto &v : m_dat) m_row = std::max(m_row, static_cast<int>(v.size()));",
			"        for(auto &v : m_dat) v.resize(m_row, 0);",
			"    }",
			"",
			"    Matrix operator+() const { return Matrix(*this); }",
			"    Matrix operator-() const {",
			"        Matrix R(*this);",
			"        for(auto &v : R.m_dat) {",
			"            for(auto &elem : v) elem = -elem;",
			"        }",
			"        return R;",
			"    }",
			"    Matrix &operator*=(T a) {",
			"        for(auto &v : m_dat) {",
			"            for(auto &elem : v) elem *= a;",
			"        }",
			"        return *this;",
			"    }",
			"    Matrix &operator/=(T a) {",
			"        for(auto &v : m_dat) {",
			"            for(auto &elem : v) elem /= a;",
			"        }",
			"        return *this;",
			"    }",
			"    Matrix &operator+=(const Matrix &A) {",
			"        assert(A.column() == column() and A.row() == row());",
			"        for(int i = 0; i < column(); ++i) {",
			"            for(int j = 0; j < row(); ++j) loc(i, j) += A.loc(i, j);",
			"        }",
			"        return *this;",
			"    }",
			"    Matrix &operator-=(const Matrix &A) {",
			"        assert(A.column() == column() and A.row() == row());",
			"        for(int i = 0; i < column(); ++i) {",
			"            for(int j = 0; j < row(); ++j) loc(i, j) -= A.loc(i, j);",
			"        }",
			"        return *this;",
			"    }",
			"    Matrix operator*(T a) const {",
			"        Matrix R(*this);",
			"        R *= a;",
			"        return R;",
			"    }",
			"    Matrix operator/(T a) const {",
			"        Matrix R(*this);",
			"        R /= a;",
			"        return R;",
			"    }",
			"    Matrix operator*(const Matrix &A) const {",
			"        assert(row() == A.column());",
			"        Matrix R(column(), A.row(), 0);",
			"        for(int i = 0; i < column(); ++i) {",
			"            for(int j = 0; j < A.row(); ++j) {",
			"                for(int k = 0; k < row(); ++k) R.loc(i, j) += loc(i, k) * A.loc(k, j);",
			"            }",
			"        }",
			"        return R;",
			"    }",
			"    Matrix operator+(const Matrix<T> &A) const {",
			"        assert(A.column() == column() and A.row() == row());",
			"        Matrix R(*this);",
			"        R += A;",
			"        return R;",
			"    }",
			"    Matrix operator-(const Matrix<T> &A) const {",
			"        assert(A.column() == column() and A.row() == row());",
			"        Matrix R(*this);",
			"        R -= A;",
			"        return R;",
			"    }",
			"    bool operator==(const Matrix<T> &A) const {",
			"        assert(A.column() == column() and A.row() == row());",
			"        for(int i = 0; i < column(); ++i) {",
			"            for(int j = 0; j < row(); ++j) {",
			"                if(loc(i, j) != A.loc(i, j)) return false;",
			"            }",
			"        }",
			"        return true;",
			"    }",
			"    bool operator!=(const Matrix<T> &A) const { return !(*this == A); }",
			"",
			"    friend Matrix operator*(T a, const Matrix &A) { return A * a; }",
			"    friend std::ostream &operator<<(std::ostream &os, const Matrix<T> &A) {",
			"        for(int i = 0; i < A.column(); ++i) {",
			"            for(int j = 0; j < A.row(); ++j) os << (i == 0 and j == 0 ? \"[\" : \" \") << A.loc(i, j);",
			"            os << (i == A.column() - 1 ? \"]\" : \"\\n\");",
			"        }",
			"        return os;",
			"    }",
			"",
			"    // 零行列．",
			"    static Matrix zero_matrix(int m, int n) {",
			"        assert(m >= 0 and n >= 0);",
			"        Matrix O(m, n, 0);",
			"        return O;",
			"    }",
			"    // 単位行列．",
			"    static Matrix identity_matrix(int n) {",
			"        assert(n >= 0);",
			"        Matrix I(n, n, 0);",
			"        for(int i = 0; i < n; ++i) I.loc(i, i) = 1;",
			"        return I;",
			"    }",
			"",
			"    // 行数．",
			"    int column() const { return (m_is_transposed ? m_row : m_col); }",
			"    // 列数．",
			"    int row() const { return (m_is_transposed ? m_col : m_row); }",
			"    const T &loc(int i, int j) const {",
			"        assert(0 <= i and i < column());",
			"        assert(0 <= j and j < row());",
			"        return (m_is_transposed ? m_dat[j][i] : m_dat[i][j]);",
			"    }",
			"    T &loc(int i, int j) {",
			"        assert(0 <= i and i < column());",
			"        assert(0 <= j and j < row());",
			"        return (m_is_transposed ? m_dat[j][i] : m_dat[i][j]);",
			"    }",
			"    // 転置．",
			"    void transpose() { m_is_transposed = !m_is_transposed; }",
			"    // 行・列の入れ替え．",
			"    void swap(int p, int q, int axis = 0) {",
			"        if(axis == 0) {",
			"            assert(0 <= p and p < column());",
			"            assert(0 <= q and q < column());",
			"            if(p == q) return;",
			"            for(int j = 0; j < row(); ++j) std::swap(loc(p, j), loc(q, j));",
			"        } else {",
			"            assert(0 <= p and p < row());",
			"            assert(0 <= q and q < row());",
			"            if(p == q) return;",
			"            for(int i = 0; i < column(); ++i) std::swap(loc(i, p), loc(i, q));",
			"        }",
			"    }",
			"};",
			"",
			"using mat = Matrix<Type>;",
			"",
			"// 転置行列．",
			"template <typename T>",
			"inline Matrix<T> transposed_matrix(const Matrix<T> &A) {",
			"    Matrix<T> tA(A);",
			"    tA.transpose();",
			"    return tA;",
			"}",
			"",
			"// 回転行列．",
			"inline mat rotation_matrix(Type arg) {",
			"    auto sv = std::sin(arg);",
			"    auto cv = std::cos(arg);",
			"    mat rot({{cv, -sv}, {sv, cv}});",
			"    return rot;",
			"}",
			"",
			"// 行列累乗．O((logK)*N^3)",
			"template <typename T>",
			"Matrix<T> pow(const Matrix<T> &A, long long k, bool right_side = false) {",
			"    assert(A.row() == A.column() and k >= 0);",
			"    auto &&R = Matrix<T>::identity_matrix(A.column());",
			"    auto B = A;",
			"    while(k > 0) {",
			"        if(k & 1) R = (right_side ? R * B : B * R);",
			"        B = B * B;",
			"        k >>= 1;",
			"    }",
			"    return R;",
			"}",
			"",
			"// 置換．",
			"class Permutation {",
			"    int m_n;                  // m_n:=(次数).",
			"    std::vector<int> m_perm;  // m_perm[]:=(置換).",
			"    std::vector<int> m_inv;   // m_inv[]:=(逆置換). m_inv[m_perm[i]]==i",
			"    bool m_is_inversed;",
			"",
			"public:",
			"    Permutation() : Permutation(0) {}",
			"    explicit Permutation(int n) : m_n(n), m_perm(n), m_inv(n), m_is_inversed(false) {",
			"        std::iota(m_perm.begin(), m_perm.end(), 0);",
			"        std::iota(m_inv.begin(), m_inv.end(), 0);",
			"    }",
			"    explicit Permutation(int n, const std::vector<int> &cycle) : Permutation(n, std::vector<std::vector<int> >(1, cycle)) {}",
			"    explicit Permutation(int n, const std::vector<std::vector<int> > &cycles) : m_n(n), m_perm(n, -1), m_inv(n), m_is_inversed(false) {",
			"        for(const auto &cycle : cycles) {",
			"            const int n = static_cast<int>(cycle.size());",
			"            for(int i = 0; i < n; ++i) {",
			"                assert(0 <= cycle[i] and cycle[i] < m_n);",
			"                assert(m_perm[cycle[i]] == -1);",
			"                m_perm[cycle[i]] = cycle[(i + 1) % n];",
			"            }",
			"        }",
			"        for(int i = 0; i < m_n; ++i) {",
			"            if(m_perm[i] == -1) m_perm[i] = i;",
			"        }",
			"        for(int i = 0; i < m_n; ++i) m_inv[m_perm[i]] = i;",
			"    }",
			"    explicit Permutation(const std::vector<int> &perm) : m_n(perm.size()), m_perm(perm), m_inv(perm.size(), -1), m_is_inversed(false) {",
			"        for(int i = 0; i < m_n; ++i) {",
			"            assert(0 <= m_perm[i] and m_perm[i] < m_n);",
			"            assert(m_inv[m_perm[i]] == -1);",
			"            m_inv[m_perm[i]] = i;",
			"        }",
			"    }",
			"",
			"    // 置換．",
			"    const int &operator[](int i) const {",
			"        assert(0 <= i and i < order());",
			"        return (m_is_inversed ? m_inv[i] : m_perm[i]);",
			"    }",
			"    // 置換の積．",
			"    Permutation operator*(const Permutation &P) {",
			"        assert(P.order() == order());",
			"        std::vector<int> res(order());",
			"        for(int i = 0; i < order(); ++i) res[i] = (*this)[P[i]];",
			"        return Permutation(res);",
			"    }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const Permutation &P) {",
			"        for(int i = 0; i < P.order(); ++i) os << (i == 0 ? \"[\" : \" \") << i;",
			"        os << \"\\n\";",
			"        for(int i = 0; i < P.order(); ++i) os << \" \" << P[i];",
			"        os << \"]\";",
			"        return os;",
			"    }",
			"",
			"    // 次数．",
			"    int order() const { return m_n; }",
			"    // 逆置換．",
			"    const int &inv(int i) const {",
			"        assert(0 <= i and i < order());",
			"        return (m_is_inversed ? m_perm[i] : m_inv[i]);",
			"    }",
			"    void swap(int i, int j) {",
			"        assert(0 <= i and i < order());",
			"        assert(0 <= j and j < order());",
			"        if(m_is_inversed) {",
			"            std::swap(m_inv[i], m_inv[j]);",
			"            m_perm[m_inv[i]] = i;",
			"            m_perm[m_inv[j]] = j;",
			"        } else {",
			"            std::swap(m_perm[i], m_perm[j]);",
			"            m_inv[m_perm[i]] = i;",
			"            m_inv[m_perm[j]] = j;",
			"        }",
			"    }",
			"    void inverse() { m_is_inversed = !m_is_inversed; }",
			"    template <class Sequence>",
			"    void sort(Sequence &a) const {",
			"        assert(static_cast<int>(a.size()) == order());",
			"        bool seen[order()] = {};",
			"        for(int i = 0; i < order(); ++i) {",
			"            if(seen[i]) continue;",
			"            int idx = inv(i);",
			"            while(idx != i) {",
			"                std::swap(a[i], a[idx]);",
			"                seen[idx] = true;",
			"                idx = inv(idx);",
			"            }",
			"            seen[i] = true;",
			"        }",
			"    }",
			"    template <class Sequence>",
			"    void reverse(Sequence &a) {",
			"        inverse();",
			"        sort(a);",
			"        inverse();",
			"    }",
			"    // 巡回置換．",
			"    std::vector<std::vector<int> > cycles() const {",
			"        std::vector<std::vector<int> > res;",
			"        bool seen[order()] = {};",
			"        for(int i = 0; i < order(); ++i) {",
			"            if(seen[i]) continue;",
			"            std::vector<int> cycle({i});",
			"            seen[i] = true;",
			"            int idx = (*this)[i];",
			"            while(!seen[idx]) {",
			"                cycle.push_back(idx);",
			"                seen[idx] = true;",
			"                idx = (*this)[idx];",
			"            }",
			"            res.push_back(cycle);",
			"        }",
			"        return res;",
			"    }",
			"    // 置換符号．",
			"    int sgn() const {",
			"        int res = 1;",
			"        bool seen[order()] = {};",
			"        for(int i = 0; i < order(); ++i) {",
			"            if(seen[i]) continue;",
			"            seen[i] = true;",
			"            int idx = (*this)[i];",
			"            int cnt = 0;",
			"            while(!seen[idx]) {",
			"                cnt++;",
			"                seen[idx] = true;",
			"                idx = (*this)[idx];",
			"            }",
			"            if(cnt % 2 == 1) res *= -1;  // 奇置換である場合．",
			"        }",
			"        return res;",
			"    }",
			"    void init() {",
			"        std::iota(m_perm.begin(), m_perm.end(), 0);",
			"        std::iota(m_inv.begin(), m_inv.end(), 0);",
			"        m_is_inversed = false;",
			"    }",
			"",
			"    auto begin() const { return (m_is_inversed ? m_inv.begin() : m_perm.begin()); }",
			"    auto end() const { return (m_is_inversed ? m_inv.end() : m_perm.end()); }",
			"};",
			"",
			"// 逆置換．",
			"Permutation inv_permutation(const Permutation &P) {",
			"    Permutation inv(P);",
			"    inv.inverse();",
			"    return inv;",
			"}",
			"",
			"// 置換行列．",
			"class Pivot {",
			"    Permutation m_perm;  // m_perm[i]:=(i行目におけるピボットの位置).",
			"",
			"public:",
			"    Pivot() : Pivot(0) {}",
			"    explicit Pivot(int n) : m_perm(n) {}",
			"    explicit Pivot(const std::vector<int> &perm) : m_perm(perm) {}",
			"",
			"    const int &operator[](int i) const {",
			"        assert(0 <= i and i < order());",
			"        return m_perm[i];",
			"    }",
			"    template <typename T>",
			"    Matrix<T> operator*(const Matrix<T> &A) const {",
			"        assert(A.column() == order());",
			"        Matrix<T> R(A.column(), A.row());",
			"        for(int i = 0; i < R.column(); ++i) {",
			"            for(int j = 0; j < R.row(); ++j) R.loc(i, j) = A.loc(m_perm[i], j);",
			"        }",
			"        return R;",
			"    }",
			"    Pivot operator*(const Pivot &pivot) const {",
			"        assert(pivot.order() == order());",
			"        std::vector<int> res(order());",
			"        for(int i = 0; i < order(); ++i) res[i] = pivot[(*this)[i]];",
			"        return Pivot(res);",
			"    }",
			"",
			"    template <typename T>",
			"    friend Matrix<T> operator*(Matrix<T> &A, Pivot &pivot) {",
			"        assert(A.row() == pivot.order());",
			"        A.transpose();",
			"        pivot.inverse();",
			"        auto &&R = pivot * A;",
			"        R.transpose();",
			"        A.transpose();",
			"        pivot.inverse();",
			"        return R;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const Pivot &pivot) {",
			"        for(int i = 0; i < pivot.order(); ++i) os << (i == 0 ? \"[\" : \" \") << pivot[i];",
			"        os << \"]\";",
			"        return os;",
			"    }",
			"",
			"    int order() const { return m_perm.order(); }",
			"    void swap(int i, int j) {",
			"        assert(0 <= i and i < order());",
			"        assert(0 <= j and j < order());",
			"        m_perm.swap(i, j);",
			"    }",
			"    void inverse() { m_perm.inverse(); }",
			"    template <typename T>",
			"    void sort(Matrix<T> &A) {",
			"        assert(A.column() == order());",
			"        bool seen[order()] = {};",
			"        for(int i = 0; i < order(); ++i) {",
			"            if(seen[i]) continue;",
			"            int idx = m_perm.inv(i);",
			"            while(idx != i) {",
			"                A.swap(i, idx);",
			"                seen[idx] = true;",
			"                idx = m_perm.inv(idx);",
			"            }",
			"            seen[i] = true;",
			"        }",
			"    }",
			"    template <typename T>",
			"    void reverse(Matrix<T> &A) {",
			"        inverse();",
			"        sort(A);",
			"        inverse();",
			"    }",
			"    int sgn() const { return m_perm.sgn(); }",
			"    void init() { m_perm.init(); }",
			"",
			"    auto begin() const { return m_perm.begin(); }",
			"    auto end() const { return m_perm.end(); }",
			"};",
			"",
			"Pivot inv_pivot(const Pivot &pivot) {",
			"    Pivot inv(pivot);",
			"    inv.inverse();",
			"    return inv;",
			"}",
			"",
			"// PLU分解．O(N^3).",
			"template <typename T>",
			"std::tuple<Pivot, Matrix<T>, Matrix<T>, bool> lu_decomposition(Matrix<T> A) {",
			"    assert(A.column() == A.row());",
			"    const int n = A.column();",
			"    Matrix<T> L(n, n, 0), U(n, n, 0);",
			"    Pivot P(n);",
			"    for(int k = 0; k < n; ++k) {",
			"        int idx = k;",
			"        for(int i = k + 1; i < n; ++i) {",
			"            if(std::abs(A.loc(i, k)) > std::abs(A.loc(idx, k))) idx = i;",
			"        }",
			"        if(std::abs(A.loc(idx, k)) <= EPS) return {P, L, U, false};",
			"        if(idx != k) {",
			"            P.swap(k, idx);",
			"            for(int j = 0; j < k; ++j) {",
			"                std::swap(L.loc(k, j), L.loc(idx, j));",
			"                std::swap(U.loc(k, j), U.loc(idx, j));",
			"            }",
			"            for(int j = k; j < n; ++j) std::swap(A.loc(k, j), A.loc(idx, j));",
			"        }",
			"        auto tmp = 1.0 / A.loc(k, k);",
			"        for(int i = k; i < n; ++i) L.loc(i, k) = A.loc(i, k) * tmp;",
			"        for(int j = k; j < n; ++j) U.loc(k, j) = A.loc(k, j);",
			"        for(int i = k + 1; i < n; ++i) {",
			"            for(int j = k + 1; j < n; ++j) A.loc(i, j) -= L.loc(i, k) * U.loc(k, j);",
			"        }",
			"    }",
			"    return {P, L, U, true};",
			"}",
			"",
			"// サラスの方法．1次，2次，3次の正方行列の行列式を求める．O(N^2).",
			"template <typename T>",
			"T sarrus(const Matrix<T> &A) {",
			"    assert(A.column() == A.row());",
			"    assert(1 <= A.column() and A.column() <= 3);",
			"    if(A.column() == 1) return A.loc(0, 0);                                            // 1次の場合．",
			"    if(A.column() == 2) return A.loc(0, 0) * A.loc(1, 1) - A.loc(0, 1) * A.loc(1, 0);  // 2次の場合．",
			"    // 3次の場合．",
			"    auto a = A.loc(0, 0) * A.loc(1, 1) * A.loc(2, 2) + A.loc(0, 1) * A.loc(1, 2) * A.loc(2, 0) + A.loc(0, 2) * A.loc(1, 0) * A.loc(2, 1);",
			"    auto b = A.loc(0, 2) * A.loc(1, 1) * A.loc(2, 0) + A.loc(0, 1) * A.loc(1, 0) * A.loc(2, 2) + A.loc(0, 0) * A.loc(1, 2) * A.loc(2, 1);",
			"    return a - b;",
			"}",
			"",
			"// 行列式．",
			"template <typename T>",
			"T det(const Matrix<T> &A) {",
			"    assert(A.column() == A.row());",
			"    assert(A.column() > 0);",
			"    if(1 <= A.column() and A.column() <= 3) return sarrus(A);",
			"    const auto &&[P, L, U, success] = lu_decomposition(A);",
			"    if(!success) return 0;",
			"    T res = P.sgn();",
			"    for(int i = 0; i < U.column(); ++i) res *= U.loc(i, i);",
			"    return res;",
			"}",
			"",
			"// 掃き出し法．ガウス・ジョルダンの消去法．返り値は行列の階数．O(N^3).",
			"template <typename T>",
			"int gaussian_elimination(Matrix<T> &sweep) {",
			"    int k = 0, l = 0;",
			"    while(k < sweep.column() and l < sweep.row()) {",
			"        int idx = k;",
			"        for(int i = k + 1; i < sweep.column(); ++i) {",
			"            if(std::abs(sweep.loc(i, l)) > std::abs(sweep.loc(idx, l))) idx = i;",
			"        }",
			"        if(std::abs(sweep.loc(idx, l)) <= EPS) {",
			"            l++;",
			"            continue;",
			"        }",
			"        if(idx != k) {",
			"            for(int j = l; j < sweep.row(); ++j) std::swap(sweep.loc(k, j), sweep.loc(idx, j));",
			"        }",
			"        auto tmp = 1.0 / sweep.loc(k, l);",
			"        for(int j = l; j < sweep.row(); ++j) sweep.loc(k, j) *= tmp;",
			"        for(int i = 0; i < sweep.column(); ++i) {",
			"            if(i == k) continue;",
			"            auto tmp2 = -sweep.loc(i, l);",
			"            for(int j = l; j < sweep.row(); ++j) sweep.loc(i, j) += sweep.loc(k, j) * tmp2;",
			"        }",
			"        k++, l++;",
			"    }",
			"    return k;",
			"}",
			"",
			"// 逆行列．掃き出し法を用いる．O(N^3).",
			"template <typename T>",
			"Matrix<T> inv_matrix(const Matrix<T> &A) {",
			"    assert(A.column() == A.row());",
			"    // assert(det(A) != 0);",
			"    const int n = A.column();",
			"    Matrix<T> sweep(n, 2 * n);",
			"    for(int i = 0; i < n; ++i) {",
			"        for(int j = 0; j < n; ++j) {",
			"            sweep.loc(i, j) = A.loc(i, j);",
			"            sweep.loc(i, j + n) = (i == j ? 1 : 0);",
			"        }",
			"    }",
			"    const int rank = gaussian_elimination(sweep);",
			"    assert(rank == n);",
			"    Matrix<T> inv(n, n);",
			"    for(int i = 0; i < n; ++i) {",
			"        for(int j = 0; j < n; ++j) inv.loc(i, j) = sweep.loc(i, j + n);",
			"    }",
			"    return inv;",
			"}",
			"",
			"// 連立一次方程式を解く．Linear Simultaneous Equation.",
			"template <typename T>",
			"std::tuple<Matrix<T>, std::vector<int>, int> solve_lse(const Matrix<T> &A, const std::vector<T> &b) {",
			"    assert(A.column() == static_cast<int>(b.size()));",
			"    Matrix<T> res(A.column(), A.row() + 1);",
			"    for(int i = 0; i < A.column(); ++i) {",
			"        for(int j = 0; j < A.row(); ++j) res.loc(i, j) = A.loc(i, j);",
			"        res.loc(i, A.row()) = b[i];",
			"    }",
			"    const int rank = gaussian_elimination(res);",
			"    std::vector<int> posi;",
			"    int i = 0, j = -1;",
			"    for(; i < rank; ++i) {",
			"        for(j = j + 1; j < A.row(); ++j) {",
			"            if(std::abs(res.loc(i, j)) > EPS) {",
			"                posi.push_back(j);",
			"                break;",
			"            }",
			"        }",
			"        if(j == A.row()) break;",
			"    }",
			"    for(; i < rank; ++i) {",
			"        if(std::abs(res.loc(i, A.row())) > EPS) return {res, std::vector<int>(), 0};  // 解なし．",
			"    }",
			"    return {res, posi, rank};",
			"}",
			"",
			"}  // namespace matrix",
			"",
			"// using namespace matrix;"
		],
		"description": ""
	},
	"namespace matrix (Modint)": {
		"scope": "cpp",
		"prefix": "namespace matrix (Modint)",
		"body": [
			"namespace matrix {",
			"",
			"// PLU分解．O(N^3).",
			"template <int mod>",
			"std::tuple<Pivot, Matrix<Modint<mod> >, Matrix<Modint<mod> >, bool> lu_decomposition(Matrix<Modint<mod> > A) {",
			"    assert(A.column() == A.row());",
			"    const int n = A.column();",
			"    Matrix<Modint<mod> > L(n, n, 0), U(n, n, 0);",
			"    Pivot P(n);",
			"    for(int k = 0; k < n; ++k) {",
			"        int idx = k;",
			"        while(idx < n and A.loc(idx, k) == 0) idx++;",
			"        if(idx == n) return {P, L, U, false};",
			"        if(idx != k) {",
			"            P.swap(k, idx);",
			"            for(int j = 0; j < k; ++j) {",
			"                std::swap(L.loc(k, j), L.loc(idx, j));",
			"                std::swap(U.loc(k, j), U.loc(idx, j));",
			"            }",
			"            for(int j = k; j < n; ++j) std::swap(A.loc(k, j), A.loc(idx, j));",
			"        }",
			"        auto tmp = 1 / A.loc(k, k);",
			"        for(int i = k; i < n; ++i) L.loc(i, k) = A.loc(i, k) * tmp;",
			"        for(int j = k; j < n; ++j) U.loc(k, j) = A.loc(k, j);",
			"        for(int i = k + 1; i < n; ++i) {",
			"            for(int j = k + 1; j < n; ++j) A.loc(i, j) -= L.loc(i, k) * U.loc(k, j);",
			"        }",
			"    }",
			"    return {P, L, U, true};",
			"}",
			"",
			"// 掃き出し法．ガウス・ジョルダンの消去法．返り値は行列の階数．O(N^3).",
			"template <int mod>",
			"int gaussian_elimination(Matrix<Modint<mod> > &sweep) {",
			"    int k = 0, l = 0;",
			"    while(k < sweep.column() and l < sweep.row()) {",
			"        int idx = k;",
			"        while(idx < sweep.column() and sweep.loc(idx, l) == 0) idx++;",
			"        if(idx == sweep.column()) {",
			"            l++;",
			"            continue;",
			"        }",
			"        if(idx != k) {",
			"            for(int j = l; j < sweep.row(); ++j) std::swap(sweep.loc(k, j), sweep.loc(idx, j));",
			"        }",
			"        auto tmp = 1 / sweep.loc(k, l);",
			"        for(int j = l; j < sweep.row(); ++j) sweep.loc(k, j) *= tmp;",
			"        for(int i = 0; i < sweep.column(); ++i) {",
			"            if(i == k) continue;",
			"            auto tmp2 = -sweep.loc(i, l);",
			"            for(int j = l; j < sweep.row(); ++j) sweep.loc(i, j) += sweep.loc(k, j) * tmp2;",
			"        }",
			"        k++, l++;",
			"    }",
			"    return k;",
			"}",
			"",
			"// 連立一次方程式を解く．Linear Simultaneous Equation.",
			"template <int mod>",
			"std::tuple<Matrix<Modint<mod> >, std::vector<int>, int> solve_lse(const Matrix<Modint<mod> > &A, const std::vector<Modint<mod> > &b) {",
			"    assert(A.column() == static_cast<int>(b.size()));",
			"    Matrix<Modint<mod> > res(A.column(), A.row() + 1);",
			"    for(int i = 0; i < A.column(); ++i) {",
			"        for(int j = 0; j < A.row(); ++j) res.loc(i, j) = A.loc(i, j);",
			"        res.loc(i, A.row()) = b[i];",
			"    }",
			"    const int rank = gaussian_elimination(res);",
			"    std::vector<int> posi;",
			"    int i = 0, j = -1;",
			"    for(; i < rank; ++i) {",
			"        for(j = j + 1; j < A.row(); ++j) {",
			"            if(res.loc(i, j) != 0) {",
			"                posi.push_back(j);",
			"                break;",
			"            }",
			"        }",
			"        if(j == A.row()) break;",
			"    }",
			"    for(; i < rank; ++i) {",
			"        if(res.loc(i, A.row()) != 0) return {res, std::vector<int>(), 0};  // 解なし．",
			"    }",
			"    return {res, posi, rank};",
			"}",
			"",
			"}  // namespace matrix"
		],
		"description": ""
	}
}