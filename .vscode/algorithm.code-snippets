{
	// Place your algorithm ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"BellmanFord": {
		"scope": "cpp",
		"prefix": "BellmanFord",
		"body": [
			"template <typename T>",
			"class BellmanFord {",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点である有向辺のリスト).",
			"    std::vector<T> m_d;                   // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;               // m_pre[t]:=(ノードtを訪問する直前のノード番号). 逆方向経路．",
			"    T m_inf;",
			"",
			"public:",
			"    BellmanFord() : BellmanFord(0) {}",
			"    explicit BellmanFord(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_d(vn, inf), m_pre(vn, -1), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back((Edge){to, cost});",
			"    }",
			"    // グラフ全体から負閉路を検出する．O(|V|*|E|).",
			"    bool find_negative_cycle() const {",
			"        std::vector<T> nd(size(), 0);",
			"        for(int i = 0; i < size(); ++i) {",
			"            bool update = false;",
			"            for(int v = 0; v < size(); ++v) {",
			"                for(const Edge &e : m_g[v]) {",
			"                    if(nd[e.to] > nd[v] + e.cost) {",
			"                        nd[e.to] = nd[v] + e.cost;",
			"                        update = true;",
			"                    }",
			"                }",
			"            }",
			"            if(!update) break;",
			"            if(i == size() - 1) return true;  // 負閉路あり．",
			"        }",
			"        return false;",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|V|*|E|).",
			"    void bellman_ford(int s) {",
			"        assert(0 <= s and s < size());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        for(int i = 0; i < 2 * size(); ++i) {",
			"            bool update = false;",
			"            for(int v = 0; v < size(); ++v) {",
			"                if(m_d[v] == infinity()) continue;",
			"                for(const Edge &e : m_g[v]) {",
			"                    if(m_d[e.to] == -infinity()) continue;",
			"                    if(m_d[e.to] > m_d[v] + e.cost) {",
			"                        if(i < size() - 1) {",
			"                            m_d[e.to] = m_d[v] + e.cost;",
			"                            m_pre[e.to] = v;",
			"                        } else {",
			"                            m_d[e.to] = -infinity();",
			"                        }",
			"                        update = true;",
			"                    }",
			"                }",
			"            }",
			"            if(!update) break;",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < size());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> get_path(int t) const {",
			"        assert(0 <= t and t < size());",
			"        assert(-infinity() < m_d[t] and m_d[t] < infinity());",
			"        std::vector<int> path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "単一始点最短経路"
	},
	"BIT": {
		"scope": "cpp",
		"prefix": "BIT",
		"body": [
			"// Binary Indexed Tree.",
			"template <typename T>",
			"class BIT {",
			"    int sz;               // sz:=(要素数).",
			"    std::vector<T> tree;  // 1-based index.",
			"",
			"    void build() {",
			"        for(int i = 1; i < size(); ++i) {",
			"            int j = i + (i & -i);",
			"            if(j <= size()) tree[j] += tree[i];",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    BIT() : BIT(0){};",
			"    explicit BIT(size_t sz_) : sz(sz_), tree(sz_ + 1, 0) {}",
			"    explicit BIT(const std::vector<T> &v) : sz(v.size()), tree(v.size() + 1) {",
			"        std::copy(v.begin(), v.end(), tree.begin() + 1);",
			"        build();",
			"    }",
			"",
			"    int size() const { return sz; }",
			"    // 全要素をaで埋める．O(N).",
			"    void fill(T a = 0) {",
			"        std::fill(tree.begin() + 1, tree.end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // k番目の要素にaを足す．O(logN).",
			"    void add(int k, T a) {",
			"        assert(1 <= k and k <= size());",
			"        for(; k <= size(); k += (k & -k)) tree[k] += a;",
			"    }",
			"    // 区間[1,r]の総和を求める．O(logN).",
			"    T sum(int r) const {",
			"        assert(0 <= r and r <= size());",
			"        T res = 0;",
			"        for(; r > 0; r -= (r & -r)) res += tree[r];",
			"        return res;",
			"    }",
			"    // 区間[l,r]の総和を求める．O(logN).",
			"    T sum(int l, int r) const {",
			"        assert(1 <= l and l <= r and r <= size());",
			"        return sum(r) - sum(l - 1);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree"
	},
	"BIT0": {
		"scope": "cpp",
		"prefix": "BIT0",
		"body": [
			"// Binary Indexed Tree (0-based index).",
			"template <typename T>",
			"class BIT0 {",
			"    int sz;               // sz:=(要素数).",
			"    std::vector<T> tree;  // 0-based index.",
			"",
			"    void build() {",
			"        for(int i = 0; i < size() - 1; ++i) {",
			"            int j = i | (i + 1);",
			"            if(j < size()) tree[j] += tree[i];",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    BIT0() : BIT0(0){};",
			"    explicit BIT0(size_t sz_) : sz(sz_), tree(sz_, 0) {}",
			"    explicit BIT0(const std::vector<T> &v) : sz(v.size()), tree(v) {",
			"        build();",
			"    }",
			"",
			"    int size() const { return sz; }",
			"    // 全要素をaで埋める．O(N).",
			"    void fill(T a = 0) {",
			"        std::fill(tree.begin(), tree.end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // k番目の要素にaを足す．O(logN).",
			"    void add(int k, T a) {",
			"        assert(0 <= k and k < size());",
			"        for(; k < size(); k |= k + 1) tree[k] += a;",
			"    }",
			"    // 区間[0,r)の和を求める．O(logN).",
			"    T sum(int r) const {",
			"        assert(0 <= r and r <= size());",
			"        T res = 0;",
			"        for(r = r - 1; r >= 0; r = (r & (r + 1)) - 1) res += tree[r];",
			"        return res;",
			"    }",
			"    // 区間[l,r)の和を求める．O(logN).",
			"    T sum(int l, int r) const {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        return sum(r) - sum(l);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree (0-based index)"
	},
	"BIT2D": {
		"scope": "cpp",
		"prefix": "BIT2D",
		"body": [
			"// Binary Indexed Tree 2D.",
			"template <typename T>",
			"class BIT2D {",
			"    int h, w;",
			"    std::vector<std::vector<T> > dat;  // 1-based index.",
			"",
			"    void build() {",
			"        for(int i = 1; i <= height(); ++i)",
			"            for(int j = 1; j <= width(); ++j) {",
			"                int ni = i + (i & -i), nj = j + (j & -j);",
			"                bool flag1 = (ni <= height()), flag2 = (nj <= width());",
			"                if(flag1) dat[ni][j] += dat[i][j];",
			"                if(flag2) dat[i][nj] += dat[i][j];",
			"                if(flag1 and flag2) dat[ni][nj] -= dat[i][j];",
			"            }",
			"    }",
			"",
			"public:",
			"    // constructor. O(H*W).",
			"    BIT2D() : BIT2D(0, 0) {}",
			"    explicit BIT2D(size_t h_, size_t w_) : h(h_), w(w_), dat(h_ + 1, std::vector<T>(w_ + 1, 0)) {}",
			"    explicit BIT2D(const std::vector<std::vector<T> > &dat_)",
			"        : h(dat_.size()), w(dat_[0].size()), dat(dat_.size() + 1, std::vector<T>(dat_[0].size() + 1)) {",
			"        for(int i = 0; i < height(); ++i) std::copy(dat_[i].begin(), dat_[i].end(), dat[i + 1].begin() + 1);",
			"        build();",
			"    }",
			"",
			"    int height() const { return h; }",
			"    int width() const { return w; }",
			"    // 全要素をaで埋める．O(H*W).",
			"    void fill(T a = 0) {",
			"        for(int i = 1; i <= height(); ++i) std::fill(dat[i].begin() + 1, dat[i].end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // 座標(x,y)にaを加算する．O((logH)*logW).",
			"    void add(int y, int x, T a) {",
			"        assert(1 <= y and y <= height());",
			"        assert(1 <= x and x <= width());",
			"        for(int i = y; i <= height(); i += (i & -i)) {",
			"            for(int j = x; j <= width(); j += (j & -j)) dat[i][j] += a;",
			"        }",
			"    }",
			"    // 区間[1,y]かつ[1,x]の総和を求める．O((logH)*logW).",
			"    T sum(int y, int x) const {",
			"        assert(0 <= y and y <= height());",
			"        assert(0 <= x and x <= width());",
			"        T res = 0;",
			"        for(int i = y; i > 0; i -= (i & -i)) {",
			"            for(int j = x; j > 0; j -= (j & -j)) res += dat[i][j];",
			"        }",
			"        return res;",
			"    }",
			"    // 区間[y,yy]かつ[x,xx]の総和を求める．",
			"    T sum(int y, int x, int yy, int xx) const {",
			"        assert(1 <= y and y <= yy and yy <= height());",
			"        assert(1 <= x and x <= xx and xx <= width());",
			"        return sum(yy, xx) - sum(yy, x - 1) - sum(y - 1, xx) + sum(y - 1, x - 1);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree 2D"
	},
	"Combination": {
		"scope": "cpp",
		"prefix": "Combination",
		"body": [
			"// 二項係数（mod付き）．",
			"template <int mod>",
			"class Combination {",
			"    int sz;                       // sz:=(要素数). 制約は sz<=mod．",
			"    std::vector<long long> fact;  // fact[n]:=(nの階乗).",
			"    std::vector<long long> inv;   // inv[n]:=(nの逆元).",
			"    std::vector<long long> finv;  // finv[n]:=(nの階乗の逆元).",
			"",
			"public:",
			"    // constructor. O(N).",
			"    Combination() : Combination(51e4) {}",
			"    explicit Combination(size_t sz_) : sz(sz_), fact(sz_), inv(sz_), finv(sz_) {",
			"        static_assert(mod >= 1);",
			"        assert(2 <= sz and sz <= mod);",
			"        fact[0] = fact[1] = 1;",
			"        inv[1] = 1;",
			"        finv[0] = finv[1] = 1;",
			"        for(int n = 2; n < sz; ++n) {",
			"            fact[n] = fact[n - 1] * n % mod;",
			"            inv[n] = mod - inv[mod % n] * (mod / n) % mod;",
			"            finv[n] = finv[n - 1] * inv[n] % mod;",
			"        }",
			"    }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    // 階乗．",
			"    long long factorial(int n) const {",
			"        assert(0 <= n and n < sz);",
			"        return fact[n];",
			"    }",
			"    // 逆元．",
			"    long long inverse(int n) const {",
			"        assert(1 <= n and n < sz);",
			"        return inv[n];",
			"    }",
			"    // 階乗の逆元．",
			"    long long inverse_fact(int n) const {",
			"        assert(0 <= n and n < sz);",
			"        return finv[n];",
			"    }",
			"    // 順列．",
			"    long long nPk(int n, int k) const {",
			"        assert(0 <= k and k <= n and n < sz);",
			"        return fact[n] * finv[n - k] % mod;",
			"    }",
			"    // 組み合わせ．",
			"    long long nCk(int n, int k) const {",
			"        assert(0 <= k and k <= n and n < sz);",
			"        return fact[n] * finv[n - k] % mod * finv[k] % mod;",
			"    }",
			"    // 重複組み合わせ．",
			"    long long nHk(int n, int k) const { return nCk(k + n - 1, n - 1); }",
			"};",
			"",
			"using Combination998244353 = Combination<998'244'353>;",
			"using Combination1000000007 = Combination<1'000'000'007>;"
		],
		"description": "二項係数（mod付き）"
	},
	"Dijkstra": {
		"scope": "cpp",
		"prefix": "Dijkstra",
		"body": [
			"template <typename T>",
			"class Dijkstra {",
			"    template <typename Type>",
			"    using r_priority_queue = std::priority_queue<Type, std::vector<Type>, std::greater<Type> >;",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点である有向辺のリスト).",
			"    std::vector<T> m_d;                   // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;               // m_pre[t]:=(ノードtを訪問する直前のノードの番号). 逆方向経路．",
			"    T m_inf;",
			"",
			"public:",
			"    Dijkstra() : Dijkstra(0) {}",
			"    explicit Dijkstra(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_d(vn, inf), m_pre(vn, -1), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back((Edge){to, cost});",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|E|*log|V|).",
			"    void dijkstra(int s) {",
			"        assert(0 <= s and s < size());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        r_priority_queue<std::pair<T, int> > pque;",
			"        pque.emplace(0, s);",
			"        while(!pque.empty()) {",
			"            auto [dist, v] = pque.top();",
			"            pque.pop();",
			"            if(m_d[v] < dist) continue;",
			"            for(const Edge &e : m_g[v]) {",
			"                if(m_d[e.to] > m_d[v] + e.cost) {",
			"                    m_d[e.to] = m_d[v] + e.cost;",
			"                    m_pre[e.to] = v;",
			"                    pque.emplace(m_d[e.to], e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < size());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> get_path(int t) const {",
			"        assert(0 <= t and t < size());",
			"        std::vector<int> path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "単一始点最短経路"
	},
	"Dinic": {
		"scope": "cpp",
		"prefix": "Dinic",
		"body": [
			"template <typename T>",
			"class Dinic {",
			"    struct Edge {",
			"        int to;       // to:=(行き先ノード).",
			"        T cap, rest;  // cap:=(容量), rest:=(残容量).",
			"        int rev;      // rev:=(逆辺イテレータ).",
			"        explicit Edge(int to_, T cap_, int rev_) : to(to_), cap(cap_), rest(cap_), rev(rev_) {}",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点の有向辺リスト).",
			"    std::vector<int> m_level;             // m_level[v]:=(ノードsからvまでのホップ数).",
			"    std::vector<int> m_iter;              // m_iter[v]:=(m_g[v][]の次に調べるべきイテレータ).",
			"    T m_inf;",
			"",
			"    void init() {",
			"        for(std::vector<Edge> &es : m_g)",
			"            for(Edge &e : es) e.rest = e.cap;",
			"    }",
			"    // ノードsから各ノードへのホップ数を計算する．",
			"    void bfs(int s) {",
			"        std::fill(m_level.begin(), m_level.end(), -1);",
			"        m_level[s] = 0;",
			"        std::queue<int> que;",
			"        que.push(s);",
			"        while(!que.empty()) {",
			"            int v = que.front();",
			"            que.pop();",
			"            for(const Edge &e : m_g[v]) {",
			"                if(e.rest > 0 and m_level[e.to] == -1) {",
			"                    m_level[e.to] = m_level[v] + 1;",
			"                    que.push(e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"    // 増加パスを探す．",
			"    T dfs(int v, int t, T flow) {",
			"        if(v == t) return flow;",
			"        const int n = m_g[v].size();",
			"        for(int &i = m_iter[v]; i < n; ++i) {",
			"            Edge &e = m_g[v][i];",
			"            if(e.rest > 0 and m_level[v] < m_level[e.to]) {",
			"                T res = dfs(e.to, t, std::min(flow, e.rest));",
			"                if(res > 0) {",
			"                    e.rest -= res;",
			"                    m_g[e.to][e.rev].cap += res;",
			"                    return res;",
			"                }",
			"            }",
			"        }",
			"        return 0;",
			"    }",
			"",
			"public:",
			"    Dinic() : Dinic(0) {}",
			"    explicit Dinic(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_level(vn), m_iter(vn), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 容量capの有向辺を追加する．",
			"    void add_directed_edge(int from, int to, T cap) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        assert(from != to);",
			"        m_g[from].emplace_back(to, cap, m_g[to].size());",
			"        m_g[to].emplace_back(from, 0, m_g[from].size() - 1);",
			"    }",
			"    // 容量capの無向辺を追加する．",
			"    void add_undirected_edge(int u, int v, T cap) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        assert(u != v);",
			"        m_g[u].emplace_back(v, cap, m_g[v].size());",
			"        m_g[v].emplace_back(u, cap, m_g[u].size() - 1);",
			"    }",
			"    // ノードsからtへの最大流を求める．O(|E|*(|V|^2)).",
			"    T max_flow(int s, int t) {",
			"        assert(0 <= s and s < size());",
			"        assert(0 <= t and t < size());",
			"        init();",
			"        T flow = 0;",
			"        while(flow < infinity()) {",
			"            bfs(s);",
			"            if(m_level[t] == -1) return flow;",
			"            std::fill(m_iter.begin(), m_iter.end(), 0);",
			"            T tmp;",
			"            while((tmp = dfs(s, t, infinity())) > 0) flow += tmp;",
			"        }",
			"        return infinity();",
			"    }",
			"};"
		],
		"description": "最大流"
	},
	"DynamicModint": {
		"scope": "cpp",
		"prefix": "DynamicModint",
		"body": [
			"template <int id>",
			"class DynamicModint {",
			"    static int mod;",
			"    long long val;",
			"",
			"public:",
			"    DynamicModint() : DynamicModint(0) {}",
			"    DynamicModint(long long val_) : val(val_) {",
			"        assert(mod >= 1);",
			"        val %= mod;",
			"        if(val < 0) val += mod;",
			"    }",
			"",
			"    DynamicModint operator+() const { return DynamicModint(*this); }",
			"    DynamicModint operator-() const { return DynamicModint(0) - (*this); }",
			"    DynamicModint &operator++() {",
			"        val++;",
			"        if(val == mod) val = 0;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator--() {",
			"        if(val == 0) val = mod;",
			"        val--;",
			"        return *this;",
			"    }",
			"    DynamicModint operator++(int) {",
			"        DynamicModint res = *this;",
			"        ++(*this);",
			"        return res;",
			"    }",
			"    DynamicModint operator--(int) {",
			"        DynamicModint res = *this;",
			"        --(*this);",
			"        return res;",
			"    }",
			"    DynamicModint &operator+=(const DynamicModint &a) {",
			"        val += a.val;",
			"        if(val >= mod) val -= mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator-=(const DynamicModint &a) {",
			"        val -= a.val;",
			"        if(val < 0) val += mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator*=(const DynamicModint &a) {",
			"        val = val * a.val % mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator/=(const DynamicModint &a) { return (*this) *= a.inv(); }",
			"",
			"    friend DynamicModint operator+(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) += y; }",
			"    friend DynamicModint operator-(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) -= y; }",
			"    friend DynamicModint operator*(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) *= y; }",
			"    friend DynamicModint operator/(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) /= y; }",
			"    friend bool operator==(const DynamicModint &x, const DynamicModint &y) { return x.val == y.val; }",
			"    friend bool operator!=(const DynamicModint &x, const DynamicModint &y) { return x.val != y.val; }",
			"    friend std::istream &operator>>(std::istream &is, DynamicModint &x) {",
			"        is >> x.val;",
			"        x.val %= mod;",
			"        if(x.val < 0) x.val += mod;",
			"        return is;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const DynamicModint &x) { return os << x.val; }",
			"",
			"    static constexpr int get_id() { return id; }",
			"    static void set_modulus(int mod_) {",
			"        assert(mod_ >= 1);",
			"        mod = mod_;",
			"    }",
			"    static int modulus() { return mod; }",
			"    long long value() const { return val; }",
			"    DynamicModint inv() const {",
			"        long long a = val, b = mod, u = 1, v = 0;",
			"        while(b) {",
			"            long long t = a / b;",
			"            a -= t * b, u -= t * v;",
			"            std::swap(a, b), std::swap(u, v);",
			"        }",
			"        return DynamicModint(u);",
			"    }",
			"",
			"    friend DynamicModint mod_pow(const DynamicModint &x, long long k) {",
			"        if(k < 0) return mod_pow(x.inv(), -k);",
			"        DynamicModint res = 1, tmp = x;",
			"        while(k > 0) {",
			"            if(k & 1LL) res *= tmp;",
			"            tmp = tmp * tmp;",
			"            k >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"};",
			"",
			"template <int id>",
			"int DynamicModint<id>::mod = 1'000'000'007;"
		],
		"description": "動的Modint"
	},
	"FordFulkerson": {
		"scope": "cpp",
		"prefix": "FordFulkerson",
		"body": [
			"template <typename T>",
			"class FordFulkerson {",
			"    struct Edge {",
			"        int to;       // to:=(行き先ノード).",
			"        T cap, rest;  // cap:=(容量), rest:=(残容量).",
			"        int rev;      // rev:=(逆辺イテレータ).",
			"        explicit Edge(int to_, T cap_, int rev_) : to(to_), cap(cap_), rest(cap_), rev(rev_) {}",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点の有向辺リスト).",
			"    bool *m_seen;                         // m_seen[v]:=(DFSでノードvを調べたか).",
			"    T m_inf;",
			"",
			"    void init() {",
			"        for(std::vector<Edge> &es : m_g)",
			"            for(Edge &e : es) e.rest = e.cap;",
			"    }",
			"    // 増加パスを探す．",
			"    T dfs(int v, int t, T flow) {",
			"        if(v == t) return flow;",
			"        m_seen[v] = true;",
			"        for(Edge &e : m_g[v]) {",
			"            if(!m_seen[e.to] and e.rest > 0) {",
			"                T res = dfs(e.to, t, std::min(flow, e.rest));",
			"                if(res > 0) {",
			"                    e.rest -= res;",
			"                    m_g[e.to][e.rev].cap += res;",
			"                    return res;",
			"                }",
			"            }",
			"        }",
			"        return 0;",
			"    }",
			"",
			"public:",
			"    FordFulkerson() : FordFulkerson(0) {}",
			"    explicit FordFulkerson(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_inf(inf) {",
			"        m_seen = new bool[m_vn]{};",
			"    }",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 容量capの有向辺を追加する．",
			"    void add_directed_edge(int from, int to, T cap) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        assert(from != to);",
			"        m_g[from].emplace_back(to, cap, m_g[to].size());",
			"        m_g[to].emplace_back(from, 0, m_g[from].size() - 1);",
			"    }",
			"    // 容量capの無向辺を追加する．",
			"    void add_undirected_edge(int u, int v, T cap) {",
			"        assert(0 <= u and u < size());",
			"        assert(0 <= v and v < size());",
			"        assert(u != v);",
			"        m_g[u].emplace_back(v, cap, m_g[v].size());",
			"        m_g[v].emplace_back(u, cap, m_g[u].size() - 1);",
			"    }",
			"    // ノードsからtへの最大流を調べる．O(F*|E|).",
			"    T max_flow(int s, int t) {",
			"        assert(0 <= s and s < size());",
			"        assert(0 <= t and t < size());",
			"        init();",
			"        T flow = 0;",
			"        while(flow < infinity()) {",
			"            std::fill(m_seen, m_seen + m_vn, false);",
			"            T tmp = dfs(s, t, infinity());",
			"            if(tmp == 0) return flow;",
			"            flow += tmp;",
			"        }",
			"        return infinity();",
			"    }",
			"};"
		],
		"description": "最大流"
	},
	"Kitamasa": {
		"scope": "cpp",
		"prefix": "Kitamasa",
		"body": [
			"// きたまさ法．線形漸化式 a[n]=d[0]*a[n-k]+d[1]*a[n-k+1]+....+d[k-1]*a[n-1] を求める．O((K^2)*logN).",
			"template <typename T = long long>",
			"class Kitamasa {",
			"    int k;             // k:=(階数).",
			"    std::vector<T> a;  // a[k]:=(初項ベクトル).",
			"    std::vector<T> d;  // d[k]:=(係数ベクトル).",
			"",
			"    // f(n)->f(n+1). O(K).",
			"    std::vector<T> add(const std::vector<T> &x) const {",
			"        std::vector<T> y(k);",
			"        y[0] = d[0] * x[k - 1];",
			"        for(int i = 1; i < k; ++i) y[i] = x[i - 1] + d[i] * x[k - 1];",
			"        return y;",
			"    }",
			"    // f(n)->f(2*n). O(K^2).",
			"    std::vector<T> mul(const std::vector<T> &x) const {",
			"        std::vector<T> y(k, 0);",
			"        std::vector<T> t = x;",
			"        for(int i = 0; i < k; ++i) {",
			"            for(int j = 0; j < k; ++j) y[j] += x[i] * t[j];",
			"            if(i < k - 1) t = add(t);",
			"        }",
			"        return y;",
			"    }",
			"    // f(n)を返す．O((K^2)*logN).",
			"    std::vector<T> f(long long n) const {",
			"        if(n == 0) {",
			"            std::vector<T> x(k, 0);",
			"            x[0] = 1;",
			"            return x;  // f(0).",
			"        }",
			"        std::vector<T> &&x = mul(f(n / 2));",
			"        if(n & 1LL) x = add(x);",
			"        return x;",
			"    }",
			"",
			"public:",
			"    Kitamasa() : Kitamasa(std::vector<T>({0, 1}), std::vector<T>({1, 1})) {}  // フィボナッチ数列．",
			"    explicit Kitamasa(const std::vector<T> &a_, const std::vector<T> &d_) : k(a_.size()), a(a_), d(d_) {",
			"        assert(k >= 1 and a.size() == d.size());",
			"    }",
			"",
			"    T operator[](long long n) const { return calc(n); }",
			"",
			"    // a[n]を返す．O((K^2)*logN).",
			"    T calc(long long n) const {",
			"        assert(n >= 0);",
			"        std::vector<T> &&x = f(n);",
			"        T res = 0;",
			"        for(int i = 0; i < k; ++i) res += x[i] * a[i];",
			"        return res;",
			"    }",
			"};"
		],
		"description": "きたまさ法"
	},
	"LazySegTree": {
		"scope": "cpp",
		"prefix": "LazySegTree",
		"body": [
			"// 遅延評価セグメント木．",
			"template <class Monoid, class Action>",
			"class LazySegTree {",
			"    using FM = std::function<Monoid(Monoid, Monoid)>;",
			"    using FA = std::function<void(Monoid &, Action)>;",
			"    using FC = std::function<void(Action &, Action)>;",
			"",
			"    FM op;                     // Monoid op(Monoid,Monoid):=(二項演算関数). M•M.",
			"    FA action;                 // void action(Monoid&,Action):=(作用素によるモノイド元への作用). M×A.",
			"    FC composition;            // void composition(Action&,Action):=(作用素の合成). A•A.",
			"    Monoid e;                  // e:=(単位元).",
			"    Action id;                 // id:=(作用素の単位元).",
			"    int sz;                    // sz:=(要素数).",
			"    int n;                     // n:=(二分木の葉数).",
			"    int depth;                 // depth:=(二分木の深さ).",
			"    std::vector<Monoid> tree;  // tree(2n)[]:=(完全二分木). 1-based index.",
			"    std::vector<Action> lazy;  // lazy(n)[k]:=(tree[k]の子 (tree[2k], tree[2k+1]) に対する遅延評価).",
			"",
			"    void build() {",
			"        n = 1, depth = 0;",
			"        while(!(n >= sz)) n <<= 1, depth++;",
			"        tree.assign(2 * n, e);",
			"        lazy.assign(n, id);",
			"    }",
			"    void apply0(int k, const Action &d) {",
			"        assert(1 <= k and k < 2 * n);",
			"        action(tree[k], d);",
			"        if(k < n) composition(lazy[k], d);",
			"    }",
			"    void push(int k) {",
			"        assert(1 <= k and k < n);",
			"        apply0(2 * k, lazy[k]);",
			"        apply0(2 * k + 1, lazy[k]);",
			"        lazy[k] = id;",
			"    }",
			"    void update(int k) {",
			"        assert(1 <= k and k < n);",
			"        tree[k] = op(tree[2 * k], tree[2 * k + 1]);",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    LazySegTree() {}",
			"    explicit LazySegTree(const FM &op_, const FA &action_, const FC &composition_, const Monoid &e_, const Action &id_, size_t sz_)",
			"        : op(op_), action(action_), composition(composition_), e(e_), id(id_), sz(sz_) {",
			"        build();",
			"    }",
			"    explicit LazySegTree(const FM &op_, const FA &action_, const FC &composition_, const Monoid &e_, const Action &id_, const std::vector<Monoid> &v)",
			"        : op(op_), action(action_), composition(composition_), e(e_), id(id_), sz(v.size()) {",
			"        build();",
			"        std::copy(v.begin(), v.end(), tree.begin() + n);",
			"        for(int i = n - 1; i >= 1; --i) update(i);",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return sz; }",
			"    // モノイドの単位元を返す．",
			"    Monoid identity() const { return e; }",
			"    // 作用素の単位元を返す．",
			"    Action action_identity() const { return id; }",
			"    // k番目の要素をaに置き換える．O(logN).",
			"    void set(int k, const Monoid &a) {",
			"        assert(0 <= k and k < sz);",
			"        k += n;",
			"        for(int i = depth; i >= 1; --i) push(k >> i);",
			"        tree[k] = a;",
			"        for(int i = 1; i <= depth; ++i) update(k >> i);",
			"    }",
			"    // 区間[l,r)の要素をv[]に置き換える．O(N).",
			"    void set(int l, int r, const std::vector<Monoid> &v) {",
			"        assert(0 <= l and l <= r and r <= sz);",
			"        assert(v.size() == r - l);",
			"        if(l == r) return;",
			"        l += n, r += n;",
			"        for(int i = depth; i >= 1; --i) {",
			"            if(((l >> i) << i) != l) push(l >> i);",
			"            if(((r >> i) << i) != r) push((r - 1) >> i);",
			"        }",
			"        std::copy(v.begin(), v.end(), tree.begin() + l);",
			"        for(int i = 1; i <= depth; ++i) {",
			"            int l2 = (l >> i), r2 = ((r - 1) >> i);",
			"            for(int j = l2; j <= r2; ++j) update(j);",
			"        }",
			"    }",
			"    // k番目の要素を作用素dを用いて更新する．O(logN).",
			"    void apply(int k, const Action &d) {",
			"        assert(0 <= k and k < sz);",
			"        k += n;",
			"        for(int i = depth; i >= 1; --i) push(k >> i);",
			"        action(tree[k], d);",
			"        for(int i = 1; i <= depth; ++i) update(k >> i);",
			"    }",
			"    // 区間[l,r)を作用素dを用いて更新する．O(logN).",
			"    void apply(int l, int r, const Action &d) {",
			"        assert(0 <= l and l <= r and r <= sz);",
			"        if(l == r) return;",
			"        l += n, r += n;",
			"        for(int i = depth; i >= 1; --i) {",
			"            if(((l >> i) << i) != l) push(l >> i);",
			"            if(((r >> i) << i) != r) push((r - 1) >> i);",
			"        }",
			"        for(int l2 = l, r2 = r; l2 < r2; l2 >>= 1, r2 >>= 1) {",
			"            if(l2 & 1) apply0(l2++, d);",
			"            if(r2 & 1) apply0(--r2, d);",
			"        }",
			"        for(int i = 1; i <= depth; ++i) {",
			"            if(((l >> i) << i) != l) update(l >> i);",
			"            if(((r >> i) << i) != r) update((r - 1) >> i);",
			"        }",
			"    }",
			"    // 一点取得．O(logN).",
			"    Monoid prod(int k) {",
			"        assert(0 <= k and k < sz);",
			"        k += n;",
			"        for(int i = depth; i >= 1; --i) push(k >> i);",
			"        return tree[k];",
			"    }",
			"    // 区間[l,r)の総積 (v[l]•v[l+1]•....•v[r-1]) を求める．O(logN).",
			"    Monoid prod(int l, int r) {",
			"        assert(0 <= l and l <= r and r <= sz);",
			"        if(l == r) return e;",
			"        l += n, r += n;",
			"        for(int i = depth; i >= 1; --i) {",
			"            if(((l >> i) << i) != l) push(l >> i);",
			"            if(((r >> i) << i) != r) push((r - 1) >> i);",
			"        }",
			"        Monoid lv = e, rv = e;",
			"        for(; l < r; l >>= 1, r >>= 1) {",
			"            if(l & 1) lv = op(lv, tree[l++]);",
			"            if(r & 1) rv = op(tree[--r], rv);",
			"        }",
			"        return op(lv, rv);",
			"    }",
			"    // 区間全体の総積を返す．O(1).",
			"    Monoid prod_all() const { return tree[1]; }",
			"    // jud(prod(l,-))=trueとなる区間の最右位値を二分探索する．",
			"    // ただし要素列には単調性があり，またjud(e)=trueであること．O(logN).",
			"    int most_right(const std::function<bool(Monoid)> &jud, int l) const {",
			"        assert(jud(e));",
			"        assert(0 <= l and l <= sz);",
			"        if(l == sz) return sz;",
			"        l += n;",
			"        for(int i = depth; i >= 1; --i) push(l >> i);",
			"        Monoid val = e;",
			"        do {",
			"            while(!(l & 1)) l >>= 1;",
			"            Monoid &&tmp = op(val, tree[l]);",
			"            if(!jud(tmp)) {",
			"                while(l < n) {",
			"                    push(l);",
			"                    l *= 2;",
			"                    Monoid &&tmp2 = op(val, tree[l]);",
			"                    if(jud(tmp2)) val = tmp2, l++;",
			"                }",
			"                return l - n;",
			"            }",
			"            val = tmp, l++;",
			"        } while((l & -l) != l);  // (x&-x)==xのとき，xは2の階乗数．",
			"        return sz;",
			"    }",
			"    // jud(prod(-,r))=trueとなる区間の最左位値を二分探索する．",
			"    // ただし要素列には単調性があり，またjud(e)=trueであること．O(logN).",
			"    int most_left(const std::function<bool(Monoid)> &jud, int r) const {",
			"        assert(jud(e));",
			"        assert(0 <= r and r <= sz);",
			"        if(r == 0) return 0;",
			"        r += n;",
			"        for(int i = depth; i >= 1; --i) push((r - 1) >> i);",
			"        Monoid val = e;",
			"        do {",
			"            r--;",
			"            while(r > 1 and r & 1) r >>= 1;",
			"            Monoid &&tmp = op(tree[r], val);",
			"            if(!jud(tmp)) {",
			"                while(r < n) {",
			"                    push(r);",
			"                    r = 2 * r + 1;",
			"                    Monoid &&tmp2 = op(tree[r], val);",
			"                    if(jud(tmp2)) val = tmp2, r--;",
			"                }",
			"                return r - n + 1;",
			"            }",
			"            val = tmp;",
			"        } while((r & -r) != r);  // (x&-x)==xのとき，xは2の階乗数．",
			"        return 0;",
			"    }",
			"    void reset() {",
			"        std::fill(tree.begin(), tree.end(), e);",
			"        std::fill(lazy.begin(), lazy.end(), id);",
			"    }",
			"};"
		],
		"description": "遅延評価セグメント木"
	},
	"LinearSieve": {
		"scope": "cpp",
		"prefix": "LinearSieve",
		"body": [
			"// 線形篩．",
			"class LinearSieve {",
			"    int m_mx;                   // m_mx:=(篩にかける最大の自然数).",
			"    std::vector<int> m_lpf;     // m_lpf[n]:=(自然数nの最小の素因数). Least prime factor. m_lpf[n]==nのとき，nは素数．",
			"    std::vector<int> m_primes;  // m_primes[]:=(素数のリスト).",
			"",
			"public:",
			"    // constructor. n以下の自然数を篩にかける．O(N).",
			"    LinearSieve() : LinearSieve(51e4) {}",
			"    explicit LinearSieve(int n) : m_mx(n), m_lpf(n + 1, -1) {",
			"        assert(n >= 0);",
			"        for(int p = 2; p <= m_mx; ++p) {",
			"            if(m_lpf[p] == -1) {",
			"                m_lpf[p] = p;",
			"                m_primes.push_back(p);",
			"            }",
			"            const int sz = m_primes.size();",
			"            for(int i = 0; i < sz and m_primes[i] <= m_lpf[p] and p * m_primes[i] <= m_mx; ++i) m_lpf[p * m_primes[i]] = m_primes[i];",
			"        }",
			"    }",
			"",
			"    // 素数判定．O(1).",
			"    bool is_prime(int n) const {",
			"        assert(0 <= n and n <= m_mx);",
			"        return m_lpf[n] == n;",
			"    }",
			"    // 自然数nの最小の素因数を返す．O(1).",
			"    int get_lpf(int n) const {",
			"        assert(2 <= n and n <= m_mx);",
			"        return m_lpf[n];",
			"    }",
			"    // 高速素因数分解．O(logN).",
			"    std::map<int, int> prime_factorize(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::map<int, int> res;",
			"        while(n > 1) {",
			"            res[m_lpf[n]]++;",
			"            n /= m_lpf[n];",
			"        }",
			"        return res;",
			"    }",
			"    // 高速約数列挙．",
			"    std::vector<int> divisors(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::vector<int> res({1});",
			"        const auto &&pf = prime_factorize(n);",
			"        for(const auto &[p, cnt] : pf) {",
			"            const int sz = res.size();",
			"            int b = 1;",
			"            for(int i = 0; i < cnt; ++i) {",
			"                b *= p;",
			"                for(int j = 0; j < sz; ++j) res.push_back(res[i] * b);",
			"            }",
			"        }",
			"        std::sort(res.begin(), res.end());",
			"        return res;",
			"    }",
			"    const std::vector<int> &get_primes() const { return m_primes; }",
			"};"
		],
		"description": "線形篩"
	},
	"Modint": {
		"scope": "cpp",
		"prefix": "Modint",
		"body": [
			"template <int mod>",
			"class Modint {",
			"    long long val;",
			"",
			"public:",
			"    Modint() : Modint(0) {}",
			"    Modint(long long val_) : val(val_) {",
			"        static_assert(mod >= 1);",
			"        if(!(0 <= val and val < mod)) {",
			"            val %= mod;",
			"            if(val < 0) val += mod;",
			"        }",
			"    }",
			"",
			"    Modint operator+() const { return Modint(*this); }",
			"    Modint operator-() const { return Modint(0) - (*this); }",
			"    Modint &operator++() {",
			"        val++;",
			"        if(val == mod) val = 0;",
			"        return *this;",
			"    }",
			"    Modint &operator--() {",
			"        if(val == 0) val = mod;",
			"        val--;",
			"        return *this;",
			"    }",
			"    Modint operator++(int) {",
			"        Modint res = *this;",
			"        ++(*this);",
			"        return res;",
			"    }",
			"    Modint operator--(int) {",
			"        Modint res = *this;",
			"        --(*this);",
			"        return res;",
			"    }",
			"    Modint &operator+=(const Modint &a) {",
			"        val += a.val;",
			"        if(val >= mod) val -= mod;",
			"        return *this;",
			"    }",
			"    Modint &operator-=(const Modint &a) {",
			"        val -= a.val;",
			"        if(val < 0) val += mod;",
			"        return *this;",
			"    }",
			"    Modint &operator*=(const Modint &a) {",
			"        val = val * a.val % mod;",
			"        return *this;",
			"    }",
			"    Modint &operator/=(const Modint &a) { return (*this) *= a.inv(); }",
			"",
			"    friend Modint operator+(const Modint &x, const Modint &y) { return Modint(x) += y; }",
			"    friend Modint operator-(const Modint &x, const Modint &y) { return Modint(x) -= y; }",
			"    friend Modint operator*(const Modint &x, const Modint &y) { return Modint(x) *= y; }",
			"    friend Modint operator/(const Modint &x, const Modint &y) { return Modint(x) /= y; }",
			"    friend bool operator==(const Modint &x, const Modint &y) { return x.val == y.val; }",
			"    friend bool operator!=(const Modint &x, const Modint &y) { return x.val != y.val; }",
			"    friend std::istream &operator>>(std::istream &is, Modint &x) {",
			"        is >> x.val;",
			"        if(!(0 <= x.val and x.val < mod)) {",
			"            x.val %= mod;",
			"            if(x.val < 0) x.val += mod;",
			"        }",
			"        return is;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const Modint &x) { return os << x.val; }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    long long value() const { return val; }",
			"    Modint inv() const {",
			"        long long a = val, b = mod, u = 1, v = 0;",
			"        while(b) {",
			"            long long t = a / b;",
			"            a -= t * b, u -= t * v;",
			"            std::swap(a, b), std::swap(u, v);",
			"        }",
			"        return Modint(u);",
			"    }",
			"",
			"    friend Modint mod_pow(const Modint &x, long long k) {",
			"        if(k < 0) return mod_pow(x.inv(), -k);",
			"        Modint res = 1, tmp = x;",
			"        while(k > 0) {",
			"            if(k & 1LL) res *= tmp;",
			"            tmp = tmp * tmp;",
			"            k >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"};",
			"",
			"using mint998244353 = Modint<998'244'353>;",
			"using mint1000000007 = Modint<1'000'000'007>;"
		],
		"description": ""
	},
	"PotentializedUnionFind": {
		"scope": "cpp",
		"prefix": "PotentializedUnionFind",
		"body": [
			"// 重み付きUnion-Find Tree．",
			"template <typename T>",
			"class PotentializedUnionFind {",
			"    int m_vn;                // m_vn:=(ノード数).",
			"    int m_gn;                // m_gn:=(グループ数).",
			"    std::vector<int> m_par;  // m_par[v]:=(ノードvの親番号). 0未満の場合，vは親となり，値の絶対値はグループサイズを表す．",
			"    std::vector<T> m_p;      // m_p[v]:=(ノードvのポテンシャル).",
			"",
			"public:",
			"    PotentializedUnionFind() : PotentializedUnionFind(0) {}",
			"    explicit PotentializedUnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1), m_p(vn, 0) {}",
			"",
			"    // ノード数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // ノードvの親番号を返す．",
			"    int root(int v) {",
			"        assert(0 <= v and v < vn());",
			"        if(m_par[v] < 0) return v;",
			"        auto res = root(m_par[v]);  // recrusion.",
			"        m_p[v] += m_p[m_par[v]];",
			"        return m_par[v] = res;",
			"    }",
			"    // ノードvが属するグループのサイズを返す．",
			"    int size(int v) {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)];",
			"    }",
			"    // ノードvのポテンシャルを返す．",
			"    T potential(int v) {",
			"        assert(0 <= v and v < vn());",
			"        root(v);",
			"        return m_p[v];",
			"    }",
			"    // ノードuとvが同じグループか判定する．",
			"    bool same(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // ノードuに対するvの相対ポテンシャルを返す．",
			"    T difference(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return potential(v) - potential(u);",
			"    }",
			"    // difference(u,v)=dとなるようにノードuとvの親ノードを結合する．",
			"    bool unite(int u, int v, T d) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        d = d + potential(u) - potential(v);",
			"        u = root(u), v = root(v);",
			"        if(u == v) return false;  // Do nothing.",
			"        if(size(u) < size(v)) {   // Merge technique.",
			"            std::swap(u, v);",
			"            d = -d;",
			"        }",
			"        m_par[u] += m_par[v];",
			"        m_par[v] = u;",
			"        m_p[v] = d;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"        std::fill(m_p.begin(), m_p.end(), 0);",
			"    }",
			"};"
		],
		"description": "重み付きUnion-Find Tree"
	},
	"PrimalDual": {
		"scope": "cpp",
		"prefix": "PrimalDual",
		"body": [
			"template <typename Flow, typename Cost>  // Flow:容量の型, Cost:コストの型.",
			"class PrimalDual {",
			"    template <class Type>",
			"    using r_priority_queue = std::priority_queue<Type, std::vector<Type>, std::greater<Type> >;",
			"    struct Edge {",
			"        int to;          // to:=(行き先ノード).",
			"        Flow cap, icap;  // cap:=(容量), icap:=(元の容量).",
			"        Cost cost;       // cost:=(単位コスト).",
			"        int rev;         // rev:=(逆辺イテレータ).",
			"        explicit Edge(int to_, Flow cap_, Cost cost_, int rev_)",
			"            : to(to_), cap(cap_), icap(cap_), cost(cost_), rev(rev_) {}",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvの隣接リスト).",
			"    std::vector<Cost> m_level;            // m_level[v]:=(ノートvまでの最小費用).",
			"    std::vector<Cost> m_p;                // m_p[v]:=(ノードvのポテンシャル).",
			"    std::vector<int> m_prevv;             // m_prevv[v]:=(ノードvの直前に訪れるノード). 逆方向経路．",
			"    std::vector<int> m_preve;             // m_preve[v]:=(ノードvの直前に通る辺). 逆方向経路．",
			"    Cost m_inf;",
			"",
			"    void init() {",
			"        for(std::vector<Edge> &es : m_g) {",
			"            for(Edge &e : es) e.cap = e.icap;",
			"        }",
			"        std::fill(m_p.begin(), m_p.end(), 0);",
			"    }",
			"    void dijkstra(int s) {",
			"        std::fill(m_level.begin(), m_level.end(), m_inf);",
			"        m_level[s] = 0;",
			"        r_priority_queue<std::pair<Cost, int> > pque;",
			"        pque.emplace(0, s);",
			"        while(!pque.empty()) {",
			"            auto [cost, v] = pque.top();",
			"            pque.pop();",
			"            if(m_level[v] < cost) continue;",
			"            const int sz = m_g[v].size();",
			"            for(int i = 0; i < sz; ++i) {",
			"                const Edge &e = m_g[v][i];",
			"                if(e.cap > 0 and m_level[e.to] > m_level[v] + e.cost - m_p[v] + m_p[e.to]) {",
			"                    m_level[e.to] = m_level[v] + e.cost - m_p[v] + m_p[e.to];",
			"                    m_prevv[e.to] = v;",
			"                    m_preve[e.to] = i;",
			"                    pque.emplace(m_level[e.to], e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"public:",
			"    PrimalDual() : PrimalDual(0) {}",
			"    explicit PrimalDual(size_t vn, Cost inf = 1e9)",
			"        : m_vn(vn), m_g(vn), m_level(vn), m_p(vn), m_prevv(vn), m_preve(vn), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    // 容量cap[flows]，単位コストcost[cost/flow]の有向辺を追加する．",
			"    void add_directed_edge(int from, int to, Flow cap, Cost cost) {",
			"        assert(0 <= from and from < m_vn);",
			"        assert(0 <= to and to < m_vn);",
			"        m_g[from].emplace_back(to, cap, cost, m_g[to].size());",
			"        m_g[to].emplace_back(from, 0, -cost, m_g[from].size() - 1);",
			"    }",
			"    // 容量cap[flows]，単位コストcost[cost/flow]の無向辺を追加する．",
			"    void add_undirected_edge(int u, int v, Flow cap, Cost cost) {",
			"        assert(0 <= u and u < m_vn);",
			"        assert(0 <= v and v < m_vn);",
			"        m_g[u].emplace_back(v, cap, cost, m_g[v].size());",
			"        m_g[v].emplace_back(u, cap, cost, m_g[u].size() - 1);",
			"    }",
			"    // ソースからシンクまでの最小費用[costs]（単位コスト[cost/flow]とフロー[flows]の積の総和）を求める．",
			"    // 返り値は最小費用[costs]と流用[flows]．O(F*|E|*log|V|).",
			"    std::pair<Cost, Flow> min_cost_flow(int s, int t, Flow flow) {",
			"        assert(0 <= s and s < m_vn);",
			"        assert(0 <= t and t < m_vn);",
			"        Cost sum = 0;",
			"        Flow rest = flow;",
			"        init();",
			"        while(rest > 0) {",
			"            dijkstra(s);",
			"            if(m_level[t] == m_inf) return {sum, flow - rest};  // これ以上流せない場合．",
			"            for(int v = 0; v < m_vn; ++v) m_p[v] -= m_level[v];",
			"            Flow tmp = rest;",
			"            for(int v = t; v != s; v = m_prevv[v]) tmp = std::min(tmp, m_g[m_prevv[v]][m_preve[v]].cap);",
			"            rest -= tmp;",
			"            sum += (-m_p[t]) * tmp;",
			"            for(int v = t; v != s; v = m_prevv[v]) {",
			"                Edge &e = m_g[m_prevv[v]][m_preve[v]];",
			"                e.cap -= tmp;",
			"                m_g[v][e.rev].cap += tmp;",
			"            }",
			"        }",
			"        return {sum, flow};",
			"    }",
			"};"
		],
		"description": "最小費用流"
	},
	"SegmentSieve": {
		"scope": "cpp",
		"prefix": "SegmentSieve",
		"body": [
			"// 区間篩．",
			"class SegmentSieve {",
			"    long long l, r;",
			"    long long sr;                                  // sr:=√r.",
			"    std::vector<long long> small;                  // small[n]:=(区間[2,√r)の自然数nの最小の素因数).",
			"    std::vector<std::map<long long, int> > large;  // large[n-l][]:=(区間[l,r)の自然数nの区間[2,√r)における素因数).",
			"    std::vector<long long> aux;                    // aux[n-l]:=(large[n-l][]の積).",
			"",
			"    void build() {",
			"        sr = std::sqrt(r) + 5;",
			"        small.assign(sr, -1);",
			"        std::iota(small.begin() + 2, small.end(), 2);",
			"        large.resize(r - l);",
			"        aux.assign(r - l, 1);",
			"        for(long long p = 2; p * p < r; ++p) {",
			"            if(small[p] == p) {",
			"                for(long long n = p * p; n < sr; n += p) small[n] = p;",
			"                for(long long n = std::max<long long>(2, (l + p - 1) / p) * p; n < r; n += p) {",
			"                    long long tmp = n;",
			"                    while(tmp % p == 0 and aux[n - l] * aux[n - l] <= r) {",
			"                        large[n - l][p]++;",
			"                        aux[n - l] *= p;",
			"                        tmp /= p;",
			"                    }",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. 区間[l,r)の自然数を篩にかける．制約の目安はおおよそ 2<=l<r<=1e12, r-l<=1e6．",
			"    SegmentSieve() : SegmentSieve(2, 3) {}",
			"    explicit SegmentSieve(long long l_, long long r_) : l(l_), r(r_) {",
			"        assert(2 <= l and l < r);",
			"        build();",
			"    }",
			"",
			"    // 素数判定．O(1).",
			"    bool is_prime(long long n) const {",
			"        assert(l <= n and n < r);",
			"        return large[n - l].size() == 0;",
			"    }",
			"    // 高速素因数分解．",
			"    std::map<long long, int> prime_factorize(long long n) const {",
			"        assert(l <= n and n < r);",
			"        auto res = large[n - l];",
			"        n /= aux[n - l];",
			"        if(n >= sr) {",
			"            res[n]++;",
			"            return res;",
			"        }",
			"        while(n > 1) {",
			"            res[small[n]]++;",
			"            n /= small[n];",
			"        }",
			"        return res;",
			"    }",
			"    // 高速約数列挙．",
			"    std::vector<long long> divisors(long long n) const {",
			"        assert(l <= n and n < r);",
			"        std::vector<long long> res({1});",
			"        if(n == 1) return res;",
			"        const auto &&pf = prime_factorize(n);",
			"        for(const auto &[p, cnt] : pf) {",
			"            const int sz = res.size();",
			"            long long b = 1;",
			"            for(int i = 0; i < cnt; ++i) {",
			"                b *= p;",
			"                for(int j = 0; j < sz; ++j) res.push_back(res[i] * b);",
			"            }",
			"        }",
			"        std::sort(res.begin(), res.end());",
			"        return res;",
			"    }",
			"};"
		],
		"description": "区間篩"
	},
	"SegmentTree": {
		"scope": "cpp",
		"prefix": "SegmentTree",
		"body": [
			"template <typename T>",
			"class SegmentTree {",
			"    using F = std::function<T(T, T)>;",
			"",
			"    F op;                 // T op(T,T):=(二項演算関数).",
			"    T e;                  // e:=(単位元).",
			"    int sz;               // sz:=(要素数).",
			"    int n;                // n:=(葉の数).",
			"    std::vector<T> tree;  // tree[]:=(完全二分木). 1-based index.",
			"",
			"    void build() {",
			"        n = 1;",
			"        while(n < size()) n <<= 1;",
			"        tree.assign(2 * n, identity());",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    SegmentTree(){};",
			"    explicit SegmentTree(const F &op_, const T &e_, size_t sz_) : op(op_), e(e_), sz(sz_) {",
			"        build();",
			"    }",
			"    explicit SegmentTree(const F &op_, const T &e_, std::vector<T> &v) : op(op_), e(e_), sz(v.size()) {",
			"        build();",
			"        std::copy(v.begin(), v.end(), tree.begin() + n);",
			"        for(int i = n - 1; i >= 1; --i) tree[i] = op(tree[i << 1], tree[(i << 1) | 1]);",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return sz; }",
			"    // 単位元を返す．",
			"    T identity() const { return e; }",
			"    // k番目の要素をaに置き換える．O(logN).",
			"    void set(int k, const T &a) {",
			"        assert(0 <= k and k < size());",
			"        k += n;",
			"        tree[k] = a;",
			"        while(k >>= 1) tree[k] = op(tree[k << 1], tree[(k << 1) | 1]);",
			"    }",
			"    // k番目の要素をaを加える．O(logN).",
			"    void add(int k, const T &a) {",
			"        assert(0 <= k and k < size());",
			"        k += n;",
			"        tree[k] += a;",
			"        while(k >>= 1) tree[k] = op(tree[k << 1], tree[(k << 1) | 1]);",
			"    }",
			"    // 一点取得．O(1).",
			"    T prod(int k) const {",
			"        assert(0 <= k and k < size());",
			"        return tree[k + n];",
			"    }",
			"    // 区間[l,r)の総積(v[l]•v[l+1]•....•v[r-1])を求める．O(logN).",
			"    T prod(int l, int r) const {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        T lv = identity(), rv = identity();",
			"        l += n, r += n;",
			"        while(l < r) {",
			"            if(l & 1) lv = op(lv, tree[l++]);",
			"            if(r & 1) rv = op(tree[--r], rv);",
			"            l >>= 1, r >>= 1;",
			"        }",
			"        return op(lv, rv);",
			"    }",
			"    // 区間全体の総積を返す．O(1).",
			"    T prod_all() const { return tree[1]; }",
			"    // jud(prod(l,-))=trueとなる区間の最右位値を二分探索する．",
			"    // ただし要素列には単調性があり，またjud(e)=trueであること．O(logN).",
			"    int most_right(const std::function<bool(T)> &jud, int l) const {",
			"        assert(jud(identity()) == true);",
			"        assert(0 <= l and l <= size());",
			"        if(l == size()) return size();",
			"        T val = identity();",
			"        l += n;",
			"        do {",
			"            while(!(l & 1)) l >>= 1;",
			"            T &&tmp = op(val, tree[l]);",
			"            if(!jud(tmp)) {",
			"                while(l < n) {",
			"                    l <<= 1;",
			"                    T &&tmp2 = op(val, tree[l]);",
			"                    if(jud(tmp2)) val = tmp2, l++;",
			"                }",
			"                return l - n;",
			"            }",
			"            val = tmp, l++;",
			"        } while((l & -l) != l);  // (x&-x)==xのとき，xは2の階乗数．",
			"        return size();",
			"    }",
			"    // jud(prod(-,r))=trueとなる区間の最左位値を二分探索する．",
			"    // ただし要素列には単調性があり，またjud(e)=trueであること．O(logN).",
			"    int most_left(const std::function<bool(T)> &jud, int r) const {",
			"        assert(jud(identity()) == true);",
			"        assert(0 <= r and r <= size());",
			"        if(r == 0) return 0;",
			"        T val = identity();",
			"        r += n;",
			"        do {",
			"            r--;",
			"            while(r > 1 and r & 1) r >>= 1;",
			"            T &&tmp = op(tree[r], val);",
			"            if(!jud(tmp)) {",
			"                while(r < n) {",
			"                    r = (r << 1) | 1;",
			"                    T &&tmp2 = op(tree[r], val);",
			"                    if(jud(tmp2)) val = tmp2, r--;",
			"                }",
			"                return r - n + 1;",
			"            }",
			"            val = tmp;",
			"        } while((r & -r) != r);  // (x&-x)==xのとき，xは2の階乗数．",
			"        return 0;",
			"    }",
			"    void reset() { std::fill(tree.begin(), tree.end(), identity()); }",
			"};"
		],
		"description": ""
	},
	"SerialSet": {
		"scope": "cpp",
		"prefix": "SerialSet",
		"body": [
			"// 連続した整数列の集合を管理するデータ構造．",
			"template <typename T>",
			"class SerialSet {",
			"    std::set<std::pair<T, T> > m_st;  // m_st:=(整数の集合). 連続する整数列[l,r)をpair(l,r)で表現する．",
			"    T m_inf;",
			"",
			"public:",
			"    explicit SerialSet(T inf = 1e9) : m_inf(inf) {",
			"        m_st.emplace(-m_inf, -m_inf + 1);  // 番兵用．",
			"        m_st.emplace(m_inf, m_inf + 1);    // 〃",
			"    }",
			"",
			"    T infinity() const { return m_inf; }",
			"    // 整数xを挿入する．",
			"    bool insert(T x) { return insert(x, x + 1); }",
			"    // 整数列[l,r)を挿入する．O(logN).",
			"    bool insert(T l, T r) {",
			"        assert(-m_inf < l and l < r and r <= m_inf);",
			"        auto itr1 = std::prev(m_st.lower_bound(std::pair<T, T>(l + 1, l + 2)));",
			"        auto [l1, r1] = *itr1;",
			"        if(r <= r1) return false;  // 集合に完全に含まれている場合．",
			"        auto itr3 = m_st.lower_bound(std::pair<T, T>(r, r + 1));",
			"        auto itr2 = std::prev(itr3);",
			"        auto [l2, r2] = *itr2;",
			"        auto [l3, r3] = *itr3;",
			"        if(l <= r1) l = l1;",
			"        else itr1++;",
			"        if(l3 <= r) {",
			"            m_st.erase(itr1, ++itr3);",
			"            m_st.emplace(l, r3);",
			"        } else {",
			"            m_st.erase(itr1, itr3);",
			"            if(r <= r2) m_st.emplace(l, r2);",
			"            else m_st.emplace(l, r);",
			"        }",
			"        return true;",
			"    }",
			"    // 整数xを削除する．",
			"    bool erase(T x) { return erase(x, x + 1); }",
			"    // 範囲[l,r)の整数列を削除する．O(logN).",
			"    bool erase(T l, T r) {",
			"        assert(-m_inf < l and l < r and r <= m_inf);",
			"        auto itr1 = std::prev(m_st.lower_bound(std::pair<T, T>(l + 1, l + 2)));",
			"        auto itr3 = m_st.lower_bound(std::pair<T, T>(r, r + 1));",
			"        auto itr2 = std::prev(itr3);",
			"        auto [l1, r1] = *itr1;",
			"        auto [l2, r2] = *itr2;",
			"        if(l < r1) {",
			"            m_st.erase(itr1, itr3);",
			"            if(l1 < l) m_st.emplace(l1, l);",
			"        } else {",
			"            if(itr1 == itr2) return false;  // 集合に全く含まれていない場合．",
			"            m_st.erase(++itr1, itr3);",
			"        }",
			"        if(r < r2) m_st.emplace(r, r2);",
			"        return true;",
			"    }",
			"    // 整数xが集合に含まれるか判定する．",
			"    bool contains(T x) const { return contains(x, x + 1); }",
			"    // 整数列[l,r)が集合に完全に含まれるか判定する．(logN).",
			"    bool contains(T l, T r) const {",
			"        assert(-m_inf < l and l < r and r <= m_inf);",
			"        const auto &[_, pr] = *std::prev(m_st.lower_bound(std::pair<T, T>(l + 1, l + 2)));",
			"        return r <= pr;",
			"    }",
			"    // 集合に含まれないx以上の整数の中で最小の値 (MEX:Minimum EXcluded value) を求める．O(logN).",
			"    T mex(T x) const {",
			"        assert(-m_inf < x and x < m_inf);",
			"        const auto &[_, r] = *std::prev(m_st.lower_bound(std::pair<T, T>(x + 1, x + 2)));",
			"        return (x < r ? r : x);",
			"    }",
			"",
			"    friend std::ostream &operator<<(std::ostream &os, const SerialSet &ob) {",
			"        for(const auto &[l, r] : ob.m_st) os << \"[\" << l << \", \" << r << \") \";",
			"        os << std::endl;",
			"    }",
			"};"
		],
		"description": "連続した整数列の集合を管理するデータ構造"
	},
	"Sieve": {
		"scope": "cpp",
		"prefix": "Sieve",
		"body": [
			"// エラトステネスの篩．",
			"class Sieve {",
			"    int m_mx;                // m_mx:=(篩にかける最大の自然数).",
			"    std::vector<int> m_lpf;  // m_lpf[n]:=(自然数nの最小の素因数). Least prime factor. m_lpf[n]==n のとき，nは素数．",
			"",
			"    int internal_pow(int n, unsigned int k) const {",
			"        if(k == 0) return 1;",
			"        auto &&res = internal_pow(n * n, k >> 1);",
			"        if(k & 1U) res *= n;",
			"        return res;",
			"    }",
			"",
			"public:",
			"    // constructor. n以下の自然数を篩にかける．O(N*loglogN).",
			"    Sieve() : Sieve(51e4) {}",
			"    explicit Sieve(int n) : m_mx(n), m_lpf(n + 1, -1) {",
			"        assert(n >= 0);",
			"        std::iota(m_lpf.begin() + 2, m_lpf.end(), 2);",
			"        for(int p = 2; p * p <= m_mx; ++p) {",
			"            if(m_lpf[p] == p) {",
			"                for(int n = p * p; n <= m_mx; n += p) {",
			"                    if(m_lpf[n] == n) m_lpf[n] = p;",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"    // 素数判定．O(1).",
			"    bool is_prime(int n) const {",
			"        assert(0 <= n and n <= m_mx);",
			"        return m_lpf[n] == n;",
			"    }",
			"    // 自然数nの最小の素因数を返す．O(1).",
			"    int lpf(int n) const {",
			"        assert(0 <= n and n <= m_mx);",
			"        return m_lpf[n];",
			"    }",
			"    // 高速素因数分解．O(logN).",
			"    std::map<int, int> prime_factorize(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::map<int, int> res;",
			"        while(n > 1) {",
			"            res[m_lpf[n]]++;",
			"            n /= m_lpf[n];",
			"        }",
			"        return res;",
			"    }",
			"    // 高速約数列挙．",
			"    std::vector<int> divisors(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        std::vector<int> res({1});",
			"        const auto &&pf = prime_factorize(n);",
			"        for(const auto &[p, cnt] : pf) {",
			"            const int sz = res.size();",
			"            int b = 1;",
			"            for(int i = 0; i < cnt; ++i) {",
			"                b *= p;",
			"                for(int j = 0; j < sz; ++j) res.push_back(res[i] * b);",
			"            }",
			"        }",
			"        std::sort(res.begin(), res.end());",
			"        return res;",
			"    }",
			"    // オイラーのファイ関数．n以下でnと互いに素な自然数の個数．",
			"    int totient(int n) const {",
			"        assert(1 <= n and n <= m_mx);",
			"        const auto &&pf = prime_factorize(n);",
			"        int res = 1;",
			"        for(const auto &[p, cnt] : pf) res *= internal_pow(p, cnt - 1) * (p - 1);",
			"        return res;",
			"    }",
			"};"
		],
		"description": "エラトステネスの篩"
	},
	"SubPersistentUnionFind": {
		"scope": "cpp",
		"prefix": "SubPersistentUnionFind",
		"body": [
			"// 部分永続Union-Find Tree．",
			"class SubPersistentUnionFind {",
			"    using pii = std::pair<int, int>;",
			"",
			"    int m_now;  // m_now:=(時刻).",
			"    int m_vn;   // m_vn:=(ノード数).",
			"    int m_gn;   // m_gn:=(グループ数).",
			"    // m_par[v][](t,id):=(時刻tにおけるノードvの親番号id). 値idが0未満の場合，vは親となり，値idの絶対値はグループサイズを表す．",
			"    std::vector<std::vector<pii> > m_par;",
			"",
			"    static constexpr int infinity() { return 1e9; }",
			"",
			"public:",
			"    SubPersistentUnionFind() : SubPersistentUnionFind(0) {}",
			"    explicit SubPersistentUnionFind(size_t vn) : m_now(1), m_vn(vn), m_gn(vn), m_par(vn, std::vector<pii>(1, pii(0, -1))) {",
			"        assert((int)vn < infinity());",
			"    }",
			"",
			"    // 現在の時刻を返す．",
			"    int now() const { return m_now; }",
			"    // ノード数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // 現在におけるノードvの親番号を返す．O(logN).",
			"    int root(int v) const {",
			"        assert(0 <= v and v < vn());",
			"        auto itr = m_par[v].rbegin();",
			"        if(itr->second < 0) return v;",
			"        return root(itr->second);",
			"    }",
			"    // 時刻tにおけるノードvの親番号を返す．O(logN).",
			"    int root(int v, int t) const {",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        auto itr = std::lower_bound(m_par[v].begin(), m_par[v].end(), pii(t, -infinity()));",
			"        if(itr == m_par[v].end() or itr->first > t) itr--;",
			"        if(itr->second < 0) return v;",
			"        return (itr->first == t ? itr->second : root(itr->second, t));",
			"    }",
			"    // 現在におけるノードvが属するグループのサイズを返す．O(logN).",
			"    int size(int v) const {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)].rbegin()->second;",
			"    }",
			"    // 時刻tにおけるノードvが属するグループのサイズを返す．O(logN).",
			"    int size(int v, int t) const {",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        int par = root(v, t);",
			"        auto itr = std::lower_bound(m_par[par].begin(), m_par[par].end(), pii(t, -infinity()));",
			"        if(itr == m_par[par].end() or itr->first > t) itr--;",
			"        return -itr->second;",
			"    }",
			"    // 現在においてノードuとvが同じグループか判定する．O(logN).",
			"    bool same(int u, int v) const {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // 時刻tにおいてノードuとvが同じグループか判定する．O(logN).",
			"    bool same(int u, int v, int t) const {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        return root(u, t) == root(v, t);",
			"    }",
			"    // ノードu, vが属するそれぞれのグループを結合する．O(logN).",
			"    bool unite(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        u = root(u), v = root(v);",
			"        if(u == v) {",
			"            m_now++;",
			"            return false;  // Already united.",
			"        }",
			"        int sz_u = -m_par[u].rbegin()->second;",
			"        int sz_v = -m_par[v].rbegin()->second;",
			"        if(sz_u < sz_v) std::swap(u, v), std::swap(sz_u, sz_v);  // Merge technique.",
			"        m_par[u].emplace_back(now(), -sz_u - sz_v);",
			"        m_par[v].emplace_back(now(), u);",
			"        m_gn--;",
			"        m_now++;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_now = 1;",
			"        m_gn = vn();",
			"        for(auto &history : m_par) history.resize(1);",
			"    }",
			"};"
		],
		"description": "部分永続Union-Find Tree"
	},
	"UnionFind": {
		"scope": "cpp",
		"prefix": "UnionFind",
		"body": [
			"// 素集合データ構造．",
			"class UnionFind {",
			"    int m_vn;                // m_vn:=(ノード数).",
			"    int m_gn;                // m_gn:=(グループ数).",
			"    std::vector<int> m_par;  // m_par[v]:=(ノードvの親番号). 0未満の場合，vは親となり，値の絶対値はグループサイズを表す．",
			"",
			"public:",
			"    UnionFind() : UnionFind(0) {}",
			"    explicit UnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1) {}",
			"",
			"    // ノード数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // ノードvの親番号を返す．",
			"    int root(int v) {",
			"        assert(0 <= v and v < vn());",
			"        if(m_par[v] < 0) return v;",
			"        return m_par[v] = root(m_par[v]);",
			"    }",
			"    // ノードvが属するグループのサイズを返す．",
			"    int size(int v) {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)];",
			"    }",
			"    // ノードuとvが同じグループか判定する．",
			"    bool same(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // ノードu, vが属するそれぞれのグループを結合する．",
			"    bool unite(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        u = root(u), v = root(v);",
			"        if(u == v) return false;                // Do nothing.",
			"        if(size(u) < size(v)) std::swap(u, v);  // Merge technique.",
			"        m_par[u] += m_par[v];",
			"        m_par[v] = u;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"    }",
			"};"
		],
		"description": "素集合データ構造"
	},
	"bit_count": {
		"scope": "cpp",
		"prefix": "bit_count",
		"body": [
			"int bit_count32(uint32_t n) {",
			"    const uint32_t masks[5] = {0x55555555U, 0x33333333U, 0x0f0f0f0fU, 0x00ff00ffU, 0x0000ffffU};",
			"    for(int i = 0; i < 5; ++i) n = (n & masks[i]) + ((n >> (1U << i)) & masks[i]);",
			"    return n;",
			"}",
			"",
			"int bit_count64(uint64_t n) {",
			"    const uint64_t masks[6] = {0x5555555555555555ULL, 0x3333333333333333ULL, 0x0f0f0f0f0f0f0f0fULL,",
			"                               0x00ff00ff00ff00ffULL, 0x0000ffff0000ffffULL, 0x00000000ffffffffULL};",
			"    for(int i = 0; i < 6; ++i) n = (n & masks[i]) + ((n >> (1ULL << i)) & masks[i]);",
			"    return n;",
			"}"
		],
		"description": ""
	},
	"calc_divisors": {
		"scope": "cpp",
		"prefix": "calc_divisors",
		"body": [
			"// 約数列挙．O(√N).",
			"template <typename Type>",
			"std::vector<Type> calc_divisors(Type n) {",
			"    assert(n >= 0);",
			"    std::vector<Type> res;  // res[]:=(自然数nの約数の集合).",
			"    for(Type p = 1; p * p <= n; ++p) {",
			"        if(n % p == 0) {",
			"            res.push_back(p);",
			"            Type q = n / p;",
			"            if(q != p) res.push_back(q);",
			"        }",
			"    }",
			"    std::sort(res.begin(), res.end());",
			"    return res;",
			"}"
		],
		"description": "約数列挙"
	},
	"edit_distance": {
		"scope": "cpp",
		"prefix": "edit_distance",
		"body": [
			"// 編集距離 (edit distance)．引数はSTLのシーケンスコンテナ．O(|A|*|B|).",
			"template <class Class>",
			"int edit_distance(const Class &s, const Class &t) {",
			"    const int m = s.size(), n = t.size();",
			"    std::vector<std::vector<int> > dp(m + 1, std::vector<int>(n + 1));  // dp[i][j]:=(s[:i]とt[:j]の編集距離).",
			"    dp[0][0] = 0;",
			"    for(int i = 1; i <= m; ++i) dp[i][0] = i;",
			"    for(int j = 1; j <= n; ++j) dp[0][j] = j;",
			"    for(int i = 1; i <= m; ++i)",
			"        for(int j = 1; j <= n; ++j) dp[i][j] = std::min({dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + (s[i - 1] == t[j - 1] ? 0 : 1)});",
			"    return dp[m][n];",
			"}"
		],
		"description": "編集距離 (edit distance)"
	},
	"igcd, ilcm": {
		"scope": "cpp",
		"prefix": "igcd, ilcm",
		"body": [
			"template<typename Type> Type igcd(Type a,Type b){return (b==0)?a:igcd(b,a%b);}",
			"template<typename Type> Type ilcm(Type a,Type b){return a/igcd(a,b)*b;}"
		],
		"description": "最大公約数，最小公倍数"
	},
	"ipow": {
		"scope": "cpp",
		"prefix": "ipow",
		"body": [
			"// 繰返し二乗法．O(logK).",
			"long long ipow(long long n, long long k) {",
			"    assert(k >= 0);",
			"    if(k == 0) return 1;",
			"    long long &&res = ipow(n * n, k >> 1);",
			"    if(k & 1LL) res *= n;",
			"    return res;",
			"}"
		],
		"description": "繰返し二乗法"
	},
	"isqrt": {
		"scope": "cpp",
		"prefix": "isqrt",
		"body": [
			"// 平方根（ニュートン法）．",
			"double isqrt(double x, const double eps = 1e-10) {",
			"    assert(x >= 0.0);",
			"    double res = 5.0;",
			"    while(1) {",
			"        double tmp = (x / res + res) / 2;",
			"        if(std::abs(tmp - res) < eps) break;",
			"        res = tmp;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "平方根（ニュートン法）"
	},
	"is_prime": {
		"scope": "cpp",
		"prefix": "is_prime",
		"body": [
			"// 素数判定．O(√N).",
			"template <typename Type>",
			"bool is_prime(Type n) {",
			"    assert(std::is_integral<Type>::value);",
			"    if(n < 2) return false;",
			"    for(Type p = 2; p * p <= n; ++p) {",
			"        if(n % p == 0) return false;",
			"    }",
			"    return true;",
			"}"
		],
		"description": "素数判定"
	},
	"lcs": {
		"scope": "cpp",
		"prefix": "lcs",
		"body": [
			"// 最長共通部分列 (LCS:Longest Common Subsequence)．引数はSTLのシーケンスコンテナ．O(|A|*|B|).",
			"template <class Class>",
			"Class lcs(const Class &a, const Class &b) {",
			"    assert(a.size() > 0 and b.size() > 0);",
			"    const int n = a.size(), m = b.size();",
			"    std::vector<std::vector<int> > dp(n + 1, std::vector<int>(m + 1, 0));  // dp[i][j]:=(a[:i]とb[:j]のLCSの長さ).",
			"    for(int i = 1; i <= n; ++i) {",
			"        for(int j = 1; j <= m; ++j) {",
			"            if(a[i - 1] == b[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;",
			"            else dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);",
			"        }",
			"    }",
			"    Class sub(dp[n][m], a[0]);  // sub[]:=(配列a, bのLCS).",
			"    int i = n, j = m, k = dp[n][m];",
			"    while(k > 0) {",
			"        if(a[i - 1] == b[j - 1]) {",
			"            sub[k - 1] = a[i - 1];",
			"            i--, j--, k--;",
			"        } else if(dp[i][j] == dp[i - 1][j]) {",
			"            i--;",
			"        } else {",
			"            j--;",
			"        }",
			"    }",
			"    return sub;",
			"}"
		],
		"description": "最長共通部分列 (LCS:Longest Common Subsequence)"
	},
	"lis": {
		"scope": "cpp",
		"prefix": "lis",
		"body": [
			"// 最長増加部分列 (LIS:Longest Increasing Subsequence) の長さを求める．引数はSTLのシーケンスコンテナ．O(|A|*log|A|).",
			"template <class Class>",
			"int lis(const Class &a, bool is_strong = true) {",
			"    assert(a.size() > 0);",
			"    Class dp({a[0]});",
			"    for(int i = 1; i < a.size(); ++i) {",
			"        if(is_strong) {  // 狭義単調増加．",
			"            if(dp[dp.size() - 1] < a[i]) dp.push_back(a[i]);",
			"            else *lower_bound(dp.begin(), dp.end(), a[i]) = a[i];",
			"        } else {  // 広義単調増加．",
			"            if(dp[dp.size() - 1] <= a[i]) dp.push_back(a[i]);",
			"            else *upper_bound(dp.begin(), dp.end(), a[i]) = a[i];",
			"        }",
			"    }",
			"    return dp.size();",
			"}"
		],
		"description": "最長増加部分列 (LIS:Longest Increasing Subsequence)"
	},
	"mod_inv": {
		"scope": "cpp",
		"prefix": "mod_inv",
		"body": [
			"// 逆元．a^-1 (mod m)を求める．ただし，aとmは互いに素であること．",
			"long long mod_inv(long long a, int m) {",
			"    assert(m >= 1 and std::gcd(a, m) == 1);",
			"    long long b = m, u = 1, v = 0;",
			"    while(b) {",
			"        long long t = a / b;",
			"        a -= t * b, u -= t * v;",
			"        std::swap(a, b), std::swap(u, v);",
			"    }",
			"    return (u % m + m) % m;",
			"}"
		],
		"description": "逆元"
	},
	"mod_pow": {
		"scope": "cpp",
		"prefix": "mod_pow",
		"body": [
			"// 繰返し二乗法（mod付き）．n^k (mod m)を求める．O(logK).",
			"long long mod_pow(long long n, long long k, int m) {",
			"    assert(k >= 0 and m >= 1);",
			"    n %= m;",
			"    long long res = 1;",
			"    while(k > 0) {",
			"        if(k & 1LL) res = res * n % m;",
			"        n = n * n % m;",
			"        k >>= 1;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "繰返し二乗法（mod付き）"
	},
	"nPk, nCk, nHk": {
		"prefix": "nPk, nCk, nHk",
		"body": [
			"long long nPk(long long n, int k) {",
			"    assert(0 <= k and k <= n);",
			"    long long ans = 1;",
			"    for(int i = 0; i < k; ++i) ans = ans * (n - i);",
			"    return ans;",
			"}",
			"",
			"long long nCk(long long n, int k) {",
			"    assert(0 <= k and k <= n);",
			"    long long ans = 1;",
			"    for(int i = 0; i < k; ++i) ans = ans * (n - i) / (i + 1);",
			"    return ans;",
			"}",
			"",
			"long long nHk(long long n, int k) { return nCk(k + n - 1, n - 1); }"
		],
		"description": "順列，組み合わせ"
	},
	"prime_factorize": {
		"scope": "cpp",
		"prefix": "prime_factorize",
		"body": [
			"// 素因数分解．O(√N).",
			"template <typename Type>",
			"std::map<Type, int> prime_factorize(Type n) {",
			"    assert(n >= 2);",
			"    std::map<Type, int> mp;  // mp[p]:=(自然数nに含まれる素因数pの個数).",
			"    for(Type p = 2; p * p <= n; ++p) {",
			"        if(n % p != 0) continue;",
			"        while(n % p == 0) mp[p]++, n /= p;",
			"    }",
			"    if(n != 1) mp[n]++;",
			"    return mp;",
			"}"
		],
		"description": "素因数分解"
	},
	"z_algorithm": {
		"scope": "cpp",
		"prefix": "z_algorithm",
		"body": [
			"// 最長共通接頭辞 (LCP:Longest Common Prefix)．O(|S|).",
			"template <class Class>",
			"std::vector<int> z_algorithm(const Class &s) {",
			"    const int n = s.size();",
			"    std::vector<int> z(n);  // z[i]:=(sとs[i:]のLCPの長さ).",
			"    z[0] = n;",
			"    int i = 1, j = 0;",
			"    while(i < n) {",
			"        while(i + j < n and s[j] == s[i + j]) j++;",
			"        z[i] = j;",
			"        if(j == 0) {",
			"            i++;",
			"            continue;",
			"        }",
			"        int k = 1;",
			"        while(i + k < n and z[k] + k < j) {",
			"            z[i + k] = z[k];",
			"            k++;",
			"        }",
			"        i += k, j -= k;",
			"    }",
			"    return z;",
			"}"
		],
		"description": "最長共通接頭辞 (LCP:Longest Common Prefix)"
	},
}