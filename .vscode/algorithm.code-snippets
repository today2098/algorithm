{
	// Place your algorithm ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"BellmanFord": {
		"scope": "cpp",
		"prefix": "BellmanFord",
		"body": [
			"template <typename T>",
			"class BellmanFord {",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点である有向辺のリスト).",
			"    std::vector<T> m_d;                   // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;               // m_pre[t]:=(ノードtを訪問する直前のノード番号). 逆方向経路．",
			"    T m_inf;",
			"",
			"public:",
			"    BellmanFord() : BellmanFord(0) {}",
			"    explicit BellmanFord(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_d(vn, inf), m_pre(vn, -1), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back((Edge){to, cost});",
			"    }",
			"    // グラフ全体から負閉路を検出する．O(|V|*|E|).",
			"    bool find_negative_cycle() const {",
			"        std::vector<T> nd(size(), 0);",
			"        for(int i = 0; i < size(); ++i) {",
			"            bool update = false;",
			"            for(int v = 0; v < size(); ++v) {",
			"                for(const Edge &e : m_g[v]) {",
			"                    if(nd[e.to] > nd[v] + e.cost) {",
			"                        nd[e.to] = nd[v] + e.cost;",
			"                        update = true;",
			"                    }",
			"                }",
			"            }",
			"            if(!update) break;",
			"            if(i == size() - 1) return true;  // 負閉路あり．",
			"        }",
			"        return false;",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|V|*|E|).",
			"    void bellman_ford(int s) {",
			"        assert(0 <= s and s < size());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        for(int i = 0; i < 2 * size(); ++i) {",
			"            bool update = false;",
			"            for(int v = 0; v < size(); ++v) {",
			"                if(m_d[v] == infinity()) continue;",
			"                for(const Edge &e : m_g[v]) {",
			"                    if(m_d[e.to] == -infinity()) continue;",
			"                    if(m_d[e.to] > m_d[v] + e.cost) {",
			"                        if(i < size() - 1) {",
			"                            m_d[e.to] = m_d[v] + e.cost;",
			"                            m_pre[e.to] = v;",
			"                        } else {",
			"                            m_d[e.to] = -infinity();",
			"                        }",
			"                        update = true;",
			"                    }",
			"                }",
			"            }",
			"            if(!update) break;",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < size());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> get_path(int t) const {",
			"        assert(0 <= t and t < size());",
			"        assert(-infinity() < m_d[t] and m_d[t] < infinity());",
			"        std::vector<int> path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "単一始点最短経路"
	},
	"BIT": {
		"scope": "cpp",
		"prefix": "BIT",
		"body": [
			"// Binary Indexed Tree.",
			"template <typename T>",
			"class BIT {",
			"    int sz;               // sz:=(要素数).",
			"    std::vector<T> tree;  // 1-based index.",
			"",
			"    void build() {",
			"        for(int i = 1; i < size(); ++i) {",
			"            int j = i + (i & -i);",
			"            if(j <= size()) tree[j] += tree[i];",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    BIT() : BIT(0){};",
			"    explicit BIT(size_t sz_) : sz(sz_), tree(sz_ + 1, 0) {}",
			"    explicit BIT(const std::vector<T> &v) : sz(v.size()), tree(v.size() + 1) {",
			"        std::copy(v.begin(), v.end(), tree.begin() + 1);",
			"        build();",
			"    }",
			"",
			"    int size() const { return sz; }",
			"    // 全要素をaで埋める．O(N).",
			"    void fill(T a = 0) {",
			"        std::fill(tree.begin() + 1, tree.end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // k番目の要素にaを足す．O(logN).",
			"    void add(int k, T a) {",
			"        assert(1 <= k and k <= size());",
			"        for(; k <= sz; k += (k & -k)) tree[k] += a;",
			"    }",
			"    // 区間[1,r]の総和を求める．O(logN).",
			"    T sum(int r) const {",
			"        assert(0 <= r and r <= size());",
			"        T res = 0;",
			"        for(; r > 0; r -= (r & -r)) res += tree[r];",
			"        return res;",
			"    }",
			"    // 区間[l,r]の総和を求める．O(logN).",
			"    T sum(int l, int r) const {",
			"        assert(1 <= l and l <= r and r <= size());",
			"        return sum(r) - sum(l - 1);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree"
	},
	"BIT0": {
		"scope": "cpp",
		"prefix": "BIT0",
		"body": [
			"// Binary Indexed Tree (0-based index).",
			"template <typename T>",
			"class BIT0 {",
			"    int sz;               // sz:=(要素数).",
			"    std::vector<T> tree;  // 0-based index.",
			"",
			"    void build() {",
			"        for(int i = 0; i < size() - 1; ++i) {",
			"            int j = i | (i + 1);",
			"            if(j < size()) tree[j] += tree[i];",
			"        }",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    BIT0() : BIT0(0){};",
			"    explicit BIT0(size_t sz_) : sz(sz_), tree(sz_, 0) {}",
			"    explicit BIT0(const std::vector<T> &v) : sz(v.size()), tree(v) {",
			"        build();",
			"    }",
			"",
			"    int size() const { return sz; }",
			"    // 全要素をaで埋める．O(N).",
			"    void fill(T a = 0) {",
			"        std::fill(tree.begin(), tree.end(), a);",
			"        if(a == 0) return;",
			"        build();",
			"    }",
			"    // k番目の要素にaを足す．O(logN).",
			"    void add(int k, T a) {",
			"        assert(0 <= k and k < size());",
			"        for(; k < size(); k |= k + 1) tree[k] += a;",
			"    }",
			"    // 区間[0,r)の和を求める．O(logN).",
			"    T sum(int r) const {",
			"        assert(0 <= r and r <= size());",
			"        T res = 0;",
			"        for(r = r - 1; r >= 0; r = (r & (r + 1)) - 1) res += tree[r];",
			"        return res;",
			"    }",
			"    // 区間[l,r)の和を求める．O(logN).",
			"    T sum(int l, int r) const {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        return sum(r) - sum(l);",
			"    }",
			"};"
		],
		"description": "Binary Indexed Tree (0-based index)"
	},
	"Combination": {
		"scope": "cpp",
		"prefix": "Combination",
		"body": [
			"// 二項係数（mod付き）．",
			"template <int mod>",
			"class Combination {",
			"    int sz;                       // sz:=(要素数). 制約は sz<=mod．",
			"    std::vector<long long> fact;  // fact[n]:=(nの階乗).",
			"    std::vector<long long> inv;   // inv[n]:=(nの逆元).",
			"    std::vector<long long> finv;  // finv[n]:=(nの階乗の逆元).",
			"",
			"public:",
			"    // constructor. O(N).",
			"    Combination() : Combination(51e4) {}",
			"    explicit Combination(size_t sz_) : sz(sz_), fact(sz_), inv(sz_), finv(sz_) {",
			"        static_assert(mod >= 1);",
			"        assert(2 <= sz and sz <= mod);",
			"        fact[0] = fact[1] = 1;",
			"        inv[1] = 1;",
			"        finv[0] = finv[1] = 1;",
			"        for(int n = 2; n < sz; ++n) {",
			"            fact[n] = fact[n - 1] * n % mod;",
			"            inv[n] = mod - inv[mod % n] * (mod / n) % mod;",
			"            finv[n] = finv[n - 1] * inv[n] % mod;",
			"        }",
			"    }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    // 階乗．",
			"    long long factorial(int n) const {",
			"        assert(0 <= n and n < sz);",
			"        return fact[n];",
			"    }",
			"    // 逆元．",
			"    long long inverse(int n) const {",
			"        assert(1 <= n and n < sz);",
			"        return inv[n];",
			"    }",
			"    // 階乗の逆元．",
			"    long long inverse_fact(int n) const {",
			"        assert(0 <= n and n < sz);",
			"        return finv[n];",
			"    }",
			"    // 順列．",
			"    long long nPk(int n, int k) const {",
			"        assert(0 <= k and k <= n and n < sz);",
			"        return fact[n] * finv[n - k] % mod;",
			"    }",
			"    // 組み合わせ．",
			"    long long nCk(int n, int k) const {",
			"        assert(0 <= k and k <= n and n < sz);",
			"        return fact[n] * finv[n - k] % mod * finv[k] % mod;",
			"    }",
			"    // 重複組み合わせ．",
			"    long long nHk(int n, int k) const { return nCk(k + n - 1, n - 1); }",
			"};",
			"",
			"using Combination998244353 = Combination<998'244'353>;",
			"using Combination1000000007 = Combination<1'000'000'007>;"
		],
		"description": "二項係数（mod付き）"
	},
	"Dijkstra": {
		"scope": "cpp",
		"prefix": "Dijkstra",
		"body": [
			"template <typename T>",
			"class Dijkstra {",
			"    template <typename Type>",
			"    using r_priority_queue = std::priority_queue<Type, std::vector<Type>, std::greater<Type> >;",
			"    struct Edge {",
			"        int to;",
			"        T cost;",
			"    };",
			"",
			"    int m_vn;                             // m_vn:=(ノード数).",
			"    std::vector<std::vector<Edge> > m_g;  // m_g[v][]:=(ノードvが始点である有向辺のリスト).",
			"    std::vector<T> m_d;                   // m_d[t]:=(ノードsからtへの最短距離).",
			"    std::vector<int> m_pre;               // m_pre[t]:=(ノードtを訪問する直前のノードの番号). 逆方向経路．",
			"    T m_inf;",
			"",
			"public:",
			"    Dijkstra() : Dijkstra(0) {}",
			"    explicit Dijkstra(size_t vn, T inf = 1e9) : m_vn(vn), m_g(vn), m_d(vn, inf), m_pre(vn, -1), m_inf(inf) {}",
			"",
			"    // ノード数を返す．",
			"    int size() const { return m_vn; }",
			"    T infinity() const { return m_inf; }",
			"    // 重み付き有向辺を張る．",
			"    void add_edge(int from, int to, T cost) {",
			"        assert(0 <= from and from < size());",
			"        assert(0 <= to and to < size());",
			"        m_g[from].push_back((Edge){to, cost});",
			"    }",
			"    // ノードsから各ノードへの最短距離を求める．O(|E|*log|V|).",
			"    void dijkstra(int s) {",
			"        assert(0 <= s and s < size());",
			"        std::fill(m_d.begin(), m_d.end(), infinity());",
			"        m_d[s] = 0;",
			"        std::fill(m_pre.begin(), m_pre.end(), -1);",
			"        r_priority_queue<std::pair<T, int> > pque;",
			"        pque.emplace(0, s);",
			"        while(!pque.empty()) {",
			"            auto [dist, v] = pque.top();",
			"            pque.pop();",
			"            if(m_d[v] < dist) continue;",
			"            for(const Edge &e : m_g[v]) {",
			"                if(m_d[e.to] > m_d[v] + e.cost) {",
			"                    m_d[e.to] = m_d[v] + e.cost;",
			"                    m_pre[e.to] = v;",
			"                    pque.emplace(m_d[e.to], e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"    // ノードsからtへの最短距離を返す．",
			"    T distance(int t) const {",
			"        assert(0 <= t and t < size());",
			"        return m_d[t];",
			"    }",
			"    // ノードsからtへの最短経路を復元する．",
			"    std::vector<int> get_path(int t) const {",
			"        assert(0 <= t and t < size());",
			"        std::vector<int> path;",
			"        for(; t != -1; t = m_pre[t]) path.push_back(t);",
			"        std::reverse(path.begin(), path.end());",
			"        return path;",
			"    }",
			"};"
		],
		"description": "単一始点最短経路"
	},
	"DynamicModint": {
		"scope": "cpp",
		"prefix": "DynamicModint",
		"body": [
			"template <int id>",
			"class DynamicModint {",
			"    static int mod;",
			"    long long val;",
			"",
			"public:",
			"    DynamicModint() : DynamicModint(0) {}",
			"    DynamicModint(long long val_) : val(val_) {",
			"        assert(mod >= 1);",
			"        val %= mod;",
			"        if(val < 0) val += mod;",
			"    }",
			"",
			"    DynamicModint operator+() const { return DynamicModint(*this); }",
			"    DynamicModint operator-() const { return DynamicModint(0) - (*this); }",
			"    DynamicModint &operator++() {",
			"        val++;",
			"        if(val == mod) val = 0;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator--() {",
			"        if(val == 0) val = mod;",
			"        val--;",
			"        return *this;",
			"    }",
			"    DynamicModint operator++(int) {",
			"        DynamicModint res = *this;",
			"        ++(*this);",
			"        return res;",
			"    }",
			"    DynamicModint operator--(int) {",
			"        DynamicModint res = *this;",
			"        --(*this);",
			"        return res;",
			"    }",
			"    DynamicModint &operator+=(const DynamicModint &a) {",
			"        val += a.val;",
			"        if(val >= mod) val -= mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator-=(const DynamicModint &a) {",
			"        val -= a.val;",
			"        if(val < 0) val += mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator*=(const DynamicModint &a) {",
			"        val = val * a.val % mod;",
			"        return *this;",
			"    }",
			"    DynamicModint &operator/=(const DynamicModint &a) { return (*this) *= a.inv(); }",
			"",
			"    friend DynamicModint operator+(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) += y; }",
			"    friend DynamicModint operator-(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) -= y; }",
			"    friend DynamicModint operator*(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) *= y; }",
			"    friend DynamicModint operator/(const DynamicModint &x, const DynamicModint &y) { return DynamicModint(x) /= y; }",
			"    friend bool operator==(const DynamicModint &x, const DynamicModint &y) { return x.val == y.val; }",
			"    friend bool operator!=(const DynamicModint &x, const DynamicModint &y) { return x.val != y.val; }",
			"    friend std::istream &operator>>(std::istream &is, DynamicModint &x) {",
			"        is >> x.val;",
			"        x.val %= mod;",
			"        if(x.val < 0) x.val += mod;",
			"        return is;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const DynamicModint &x) { return os << x.val; }",
			"",
			"    static constexpr int get_id() { return id; }",
			"    static void set_modulus(int mod_) {",
			"        assert(mod_ >= 1);",
			"        mod = mod_;",
			"    }",
			"    static int modulus() { return mod; }",
			"    long long value() const { return val; }",
			"    DynamicModint inv() const {",
			"        long long a = val, b = mod, u = 1, v = 0;",
			"        while(b) {",
			"            long long t = a / b;",
			"            a -= t * b, u -= t * v;",
			"            std::swap(a, b), std::swap(u, v);",
			"        }",
			"        return DynamicModint(u);",
			"    }",
			"",
			"    friend DynamicModint mod_pow(const DynamicModint &x, long long k) {",
			"        if(k < 0) return mod_pow(x.inv(), -k);",
			"        DynamicModint res = 1, tmp = x;",
			"        while(k > 0) {",
			"            if(k & 1LL) res *= tmp;",
			"            tmp = tmp * tmp;",
			"            k >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"};",
			"",
			"template <int id>",
			"int DynamicModint<id>::mod = 1'000'000'007;"
		],
		"description": "動的Modint"
	},
	"Modint": {
		"scope": "cpp",
		"prefix": "Modint",
		"body": [
			"template <int mod>",
			"class Modint {",
			"    long long val;",
			"",
			"public:",
			"    Modint() : Modint(0) {}",
			"    Modint(long long val_) : val(val_) {",
			"        static_assert(mod >= 1);",
			"        if(!(0 <= val and val < mod)) {",
			"            val %= mod;",
			"            if(val < 0) val += mod;",
			"        }",
			"    }",
			"",
			"    Modint operator+() const { return Modint(*this); }",
			"    Modint operator-() const { return Modint(0) - (*this); }",
			"    Modint &operator++() {",
			"        val++;",
			"        if(val == mod) val = 0;",
			"        return *this;",
			"    }",
			"    Modint &operator--() {",
			"        if(val == 0) val = mod;",
			"        val--;",
			"        return *this;",
			"    }",
			"    Modint operator++(int) {",
			"        Modint res = *this;",
			"        ++(*this);",
			"        return res;",
			"    }",
			"    Modint operator--(int) {",
			"        Modint res = *this;",
			"        --(*this);",
			"        return res;",
			"    }",
			"    Modint &operator+=(const Modint &a) {",
			"        val += a.val;",
			"        if(val >= mod) val -= mod;",
			"        return *this;",
			"    }",
			"    Modint &operator-=(const Modint &a) {",
			"        val -= a.val;",
			"        if(val < 0) val += mod;",
			"        return *this;",
			"    }",
			"    Modint &operator*=(const Modint &a) {",
			"        val = val * a.val % mod;",
			"        return *this;",
			"    }",
			"    Modint &operator/=(const Modint &a) { return (*this) *= a.inv(); }",
			"",
			"    friend Modint operator+(const Modint &x, const Modint &y) { return Modint(x) += y; }",
			"    friend Modint operator-(const Modint &x, const Modint &y) { return Modint(x) -= y; }",
			"    friend Modint operator*(const Modint &x, const Modint &y) { return Modint(x) *= y; }",
			"    friend Modint operator/(const Modint &x, const Modint &y) { return Modint(x) /= y; }",
			"    friend bool operator==(const Modint &x, const Modint &y) { return x.val == y.val; }",
			"    friend bool operator!=(const Modint &x, const Modint &y) { return x.val != y.val; }",
			"    friend std::istream &operator>>(std::istream &is, Modint &x) {",
			"        is >> x.val;",
			"        if(!(0 <= x.val and x.val < mod)) {",
			"            x.val %= mod;",
			"            if(x.val < 0) x.val += mod;",
			"        }",
			"        return is;",
			"    }",
			"    friend std::ostream &operator<<(std::ostream &os, const Modint &x) { return os << x.val; }",
			"",
			"    static constexpr int modulus() { return mod; }",
			"    long long value() const { return val; }",
			"    Modint inv() const {",
			"        long long a = val, b = mod, u = 1, v = 0;",
			"        while(b) {",
			"            long long t = a / b;",
			"            a -= t * b, u -= t * v;",
			"            std::swap(a, b), std::swap(u, v);",
			"        }",
			"        return Modint(u);",
			"    }",
			"",
			"    friend Modint mod_pow(const Modint &x, long long k) {",
			"        if(k < 0) return mod_pow(x.inv(), -k);",
			"        Modint res = 1, tmp = x;",
			"        while(k > 0) {",
			"            if(k & 1LL) res *= tmp;",
			"            tmp = tmp * tmp;",
			"            k >>= 1;",
			"        }",
			"        return res;",
			"    }",
			"};",
			"",
			"using mint998244353 = Modint<998'244'353>;",
			"using mint1000000007 = Modint<1'000'000'007>;"
		],
		"description": ""
	},
	"PotentializedUnionFind": {
		"scope": "cpp",
		"prefix": "PotentializedUnionFind",
		"body": [
			"// 重み付きUnion-Find Tree．",
			"template <typename T>",
			"class PotentializedUnionFind {",
			"    int m_vn;                // m_vn:=(ノード数).",
			"    int m_gn;                // m_gn:=(グループ数).",
			"    std::vector<int> m_par;  // m_par[v]:=(ノードvの親番号). 0未満の場合，vが親で，値の絶対値がグループサイズを表す．",
			"    std::vector<T> m_p;      // m_p[v]:=(ノードvのポテンシャル).",
			"",
			"public:",
			"    PotentializedUnionFind() : PotentializedUnionFind(0) {}",
			"    explicit PotentializedUnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1), m_p(vn, 0) {}",
			"",
			"    // ノード数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // ノードvの親番号を返す．",
			"    int root(int v) {",
			"        assert(0 <= v and v < vn());",
			"        if(m_par[v] < 0) return v;",
			"        auto res = root(m_par[v]);  // recrusion.",
			"        m_p[v] += m_p[m_par[v]];",
			"        return m_par[v] = res;",
			"    }",
			"    // ノードvが属するグループのサイズを返す．",
			"    int size(int v) {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)];",
			"    }",
			"    // ノードvのポテンシャルを返す．",
			"    T potential(int v) {",
			"        assert(0 <= v and v < vn());",
			"        root(v);",
			"        return m_p[v];",
			"    }",
			"    // ノードuとvが同じグループか判定する．",
			"    bool same(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // ノードuに対するvの相対ポテンシャルを返す．",
			"    T difference(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return potential(v) - potential(u);",
			"    }",
			"    // difference(u,v)=dとなるようにノードuとvの親ノードを結合する．",
			"    bool unite(int u, int v, T d) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        d = d + potential(u) - potential(v);",
			"        u = root(u), v = root(v);",
			"        if(u == v) return false;  // Do nothing.",
			"        if(size(u) < size(v)) {   // Merge technique.",
			"            swap(u, v);",
			"            d = -d;",
			"        }",
			"        m_par[u] += m_par[v];",
			"        m_par[v] = u;",
			"        m_p[v] = d;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"        std::fill(m_p.begin(), m_p.end(), 0);",
			"    }",
			"};"
		],
		"description": "重み付きUnion-Find Tree"
	},
	"SegmentTree": {
		"scope": "cpp",
		"prefix": "SegmentTree",
		"body": [
			"template <typename T>",
			"class SegmentTree {",
			"    using F = std::function<T(T, T)>;",
			"",
			"    F op;                 // T op(T,T):=(二項演算関数).",
			"    T e;                  // e:=(単位元).",
			"    int sz;               // sz:=(要素数).",
			"    int n;                // n:=(葉の数).",
			"    std::vector<T> tree;  // tree[]:=(完全二分木). 1-based index.",
			"",
			"    void build() {",
			"        n = 1;",
			"        while(n < size()) n <<= 1;",
			"        tree.assign(2 * n, identity());",
			"    }",
			"",
			"public:",
			"    // constructor. O(N).",
			"    SegmentTree(){};",
			"    explicit SegmentTree(const F &op_, const T &e_, size_t sz_) : op(op_), e(e_), sz(sz_) {",
			"        build();",
			"    }",
			"    explicit SegmentTree(const F &op_, const T &e_, std::vector<T> &v) : op(op_), e(e_), sz(v.size()) {",
			"        build();",
			"        std::copy(v.begin(), v.end(), tree.begin() + n);",
			"        for(int i = n - 1; i >= 1; --i) tree[i] = op(tree[i << 1], tree[(i << 1) | 1]);",
			"    }",
			"",
			"    // 要素数を返す．",
			"    int size() const { return sz; }",
			"    // 単位元を返す．",
			"    T identity() const { return e; }",
			"    // k番目の要素をaに置き換える．O(logN).",
			"    void set(int k, const T &a) {",
			"        assert(0 <= k and k < size());",
			"        k += n;",
			"        tree[k] = a;",
			"        while(k >>= 1) tree[k] = op(tree[k << 1], tree[(k << 1) | 1]);",
			"    }",
			"    // k番目の要素をaを加える．O(logN).",
			"    void add(int k, const T &a) {",
			"        assert(0 <= k and k < size());",
			"        k += n;",
			"        tree[k] += a;",
			"        while(k >>= 1) tree[k] = op(tree[k << 1], tree[(k << 1) | 1]);",
			"    }",
			"    // 一点取得．O(1).",
			"    T prod(int k) const {",
			"        assert(0 <= k and k < size());",
			"        return tree[k + n];",
			"    }",
			"    // 区間[l,r)の総積(v[l]•v[l+1]•....•v[r-1])を求める．O(logN).",
			"    T prod(int l, int r) const {",
			"        assert(0 <= l and l <= r and r <= size());",
			"        T lv = identity(), rv = identity();",
			"        l += n, r += n;",
			"        while(l < r) {",
			"            if(l & 1) lv = op(lv, tree[l++]);",
			"            if(r & 1) rv = op(tree[--r], rv);",
			"            l >>= 1, r >>= 1;",
			"        }",
			"        return op(lv, rv);",
			"    }",
			"    // 区間全体の総積を返す．O(1).",
			"    T prod_all() const { return tree[1]; }",
			"    // jud(prod(l,-))=trueとなる区間の最右位値を二分探索する．",
			"    // ただし要素列には単調性があり，またjud(e)=trueであること．O(logN).",
			"    int most_right(const std::function<bool(T)> &jud, int l) const {",
			"        assert(jud(identity()) == true);",
			"        assert(0 <= l and l <= size());",
			"        if(l == size()) return size();",
			"        T val = identity();",
			"        l += n;",
			"        do {",
			"            while(!(l & 1)) l >>= 1;",
			"            T &&tmp = op(val, tree[l]);",
			"            if(!jud(tmp)) {",
			"                while(l < n) {",
			"                    l <<= 1;",
			"                    T &&tmp2 = op(val, tree[l]);",
			"                    if(jud(tmp2)) val = tmp2, l++;",
			"                }",
			"                return l - n;",
			"            }",
			"            val = tmp, l++;",
			"        } while((l & -l) != l);  // (x&-x)==xのとき，xは2の階乗数．",
			"        return size();",
			"    }",
			"    // jud(prod(-,r))=trueとなる区間の最左位値を二分探索する．",
			"    // ただし要素列には単調性があり，またjud(e)=trueであること．O(logN).",
			"    int most_left(const std::function<bool(T)> &jud, int r) const {",
			"        assert(jud(identity()) == true);",
			"        assert(0 <= r and r <= size());",
			"        if(r == 0) return 0;",
			"        T val = identity();",
			"        r += n;",
			"        do {",
			"            r--;",
			"            while(r > 1 and r & 1) r >>= 1;",
			"            T &&tmp = op(tree[r], val);",
			"            if(!jud(tmp)) {",
			"                while(r < n) {",
			"                    r = (r << 1) | 1;",
			"                    T &&tmp2 = op(tree[r], val);",
			"                    if(jud(tmp2)) val = tmp2, r--;",
			"                }",
			"                return r - n + 1;",
			"            }",
			"            val = tmp;",
			"        } while((r & -r) != r);  // (x&-x)==xのとき，xは2の階乗数．",
			"        return 0;",
			"    }",
			"    void reset() { std::fill(tree.begin(), tree.end(), identity()); }",
			"};"
		],
		"description": ""
	},
	"SubPersistentUnionFind": {
		"scope": "cpp",
		"prefix": "SubPersistentUnionFind",
		"body": [
			"// 部分永続Union-Find Tree．",
			"class SubPersistentUnionFind {",
			"    using pii = std::pair<int, int>;",
			"",
			"    int m_now;  // m_now:=(時刻).",
			"    int m_vn;   // m_vn:=(ノード数).",
			"    int m_gn;   // m_gn:=(グループ数).",
			"    // m_par[v][](t,id):=(ノードvの時刻tにおける親番号id). 値idが0未満の場合，vが親で，値idの絶対値はグループサイズを示す．",
			"    std::vector<std::vector<pii> > m_par;",
			"",
			"    static constexpr int infinity() { return 1e9; }",
			"",
			"public:",
			"    SubPersistentUnionFind() : SubPersistentUnionFind(0) {}",
			"    explicit SubPersistentUnionFind(size_t vn) : m_now(1), m_vn(vn), m_gn(vn), m_par(vn, std::vector<pii>(1, pii(0, -1))) {",
			"        assert((int)vn < infinity());",
			"    }",
			"",
			"    // 現在の時刻を返す．",
			"    int now() const { return m_now; }",
			"    // ノード数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // 現在におけるノードvの親番号を返す．O(logN).",
			"    int root(int v) const {",
			"        assert(0 <= v and v < vn());",
			"        auto itr = m_par[v].rbegin();",
			"        if(itr->second < 0) return v;",
			"        return root(itr->second);",
			"    }",
			"    // 時刻tにおけるノードvの親番号を返す．O(logN).",
			"    int root(int v, int t) const {",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        auto itr = std::lower_bound(m_par[v].begin(), m_par[v].end(), pii(t, -infinity()));",
			"        if(itr == m_par[v].end() or itr->first > t) itr--;",
			"        if(itr->second < 0) return v;",
			"        return (itr->first == t ? itr->second : root(itr->second, t));",
			"    }",
			"    // 現在におけるノードvが属するグループのサイズを返す．O(logN).",
			"    int size(int v) const {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)].rbegin()->second;",
			"    }",
			"    // 時刻tにおけるノードvが属するグループのサイズを返す．O(logN).",
			"    int size(int v, int t) const {",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        int par = root(v, t);",
			"        auto itr = std::lower_bound(m_par[par].begin(), m_par[par].end(), pii(t, -infinity()));",
			"        if(itr == m_par[par].end() or itr->first > t) itr--;",
			"        return -itr->second;",
			"    }",
			"    // 現在においてノードuとvが同じグループか判定する．O(logN).",
			"    bool same(int u, int v) const {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // 時刻tにおいてノードuとvが同じグループか判定する．O(logN).",
			"    bool same(int u, int v, int t) const {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        assert(0 <= t and t < now());",
			"        return root(u, t) == root(v, t);",
			"    }",
			"    // ノードu, vが属するそれぞれのグループを結合する．O(logN).",
			"    bool unite(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        u = root(u), v = root(v);",
			"        if(u == v) {",
			"            m_now++;",
			"            return false;  // Already united.",
			"        }",
			"        int sz_u = -m_par[u].rbegin()->second;",
			"        int sz_v = -m_par[v].rbegin()->second;",
			"        if(sz_u < sz_v) std::swap(u, v), std::swap(sz_u, sz_v);  // Merge technique.",
			"        m_par[u].emplace_back(now(), -sz_u - sz_v);",
			"        m_par[v].emplace_back(now(), u);",
			"        m_gn--;",
			"        m_now++;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_now = 1;",
			"        m_gn = vn();",
			"        for(auto &history : m_par) history.resize(1);",
			"    }",
			"};"
		],
		"description": "部分永続Union-Find Tree"
	},
	"UnionFind": {
		"scope": "cpp",
		"prefix": "UnionFind",
		"body": [
			"// 素集合データ構造．",
			"class UnionFind {",
			"    int m_vn;                // m_vn:=(ノード数).",
			"    int m_gn;                // m_gn:=(グループ数).",
			"    std::vector<int> m_par;  // m_par[v]:=(ノードvの親番号). 0未満の場合，vは親で，値の絶対値はグループサイズを表す．",
			"",
			"public:",
			"    UnionFind() : UnionFind(0) {}",
			"    explicit UnionFind(size_t vn) : m_vn(vn), m_gn(vn), m_par(vn, -1) {}",
			"",
			"    // ノード数を返す．",
			"    int vn() const { return m_vn; };",
			"    // グループ数を返す．",
			"    int gn() const { return m_gn; };",
			"    // ノードvの親番号を返す．",
			"    int root(int v) {",
			"        assert(0 <= v and v < vn());",
			"        if(m_par[v] < 0) return v;",
			"        return m_par[v] = root(m_par[v]);",
			"    }",
			"    // ノードvが属するグループのサイズを返す．",
			"    int size(int v) {",
			"        assert(0 <= v and v < vn());",
			"        return -m_par[root(v)];",
			"    }",
			"    // ノードuとvが同じグループか判定する．",
			"    bool same(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        return root(u) == root(v);",
			"    }",
			"    // ノードu, vが属するそれぞれのグループを結合する．",
			"    bool unite(int u, int v) {",
			"        assert(0 <= u and u < vn());",
			"        assert(0 <= v and v < vn());",
			"        u = root(u), v = root(v);",
			"        if(u == v) return false;                // Do nothing.",
			"        if(size(u) < size(v)) std::swap(u, v);  // Merge technique.",
			"        m_par[u] += m_par[v];",
			"        m_par[v] = u;",
			"        m_gn--;",
			"        return true;",
			"    }",
			"    void reset() {",
			"        m_gn = vn();",
			"        std::fill(m_par.begin(), m_par.end(), -1);",
			"    }",
			"};"
		],
		"description": "素集合データ構造"
	},
	"nPk, nCk, nHk": {
		"prefix": "nPk, nCk, nHk",
		"body": [
			"long long nPk(long long n, int k) {",
			"    assert(0 <= k and k <= n);",
			"    long long ans = 1;",
			"    for(int i = 0; i < k; ++i) ans = ans * (n - i);",
			"    return ans;",
			"}",
			"",
			"long long nCk(long long n, int k) {",
			"    assert(0 <= k and k <= n);",
			"    long long ans = 1;",
			"    for(int i = 0; i < k; ++i) ans = ans * (n - i) / (i + 1);",
			"    return ans;",
			"}",
			"",
			"long long nHk(long long n, int k) { return nCk(k + n - 1, n - 1); }"
		],
		"description": "順列，組み合わせ"
	}
}