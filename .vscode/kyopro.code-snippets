{
	// Place your algorithm ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main template": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i,n)   for(int i=0;i<(int)(n);++i)",
			"#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)",
			"#define ALL(v)     (v).begin(),(v).end()",
			"using ll  = long long;",
			"using vi  = std::vector<int>;",
			"using vvi = std::vector<vi>;",
			"using pii = std::pair<int,int>;",
			"using namespace std;",
			"constexpr int       INF  = 1e9;",
			"constexpr long long LINF = 1e18;",
			"constexpr double    EPS  = 1e-10;",
			"constexpr int       MOD  = 998'244'353;",
			"constexpr int       MOD2 = 1e9+7;",
			"",
			"int main(){}"
		],
		"description": "Main template"
	},
	"DEBUG": {
		"scope": "cpp",
		"prefix": "DEBUG",
		"body": [
			"#define DEBUG",
			"",
			"#ifdef DEBUG",
			"",
			"#define debug(...) debug_internal(__LINE__, #__VA_ARGS__, __VA_ARGS__)",
			"#define dline(a) dline_internal(__LINE__, #a, a);",
			"",
			"template <typename T, class... Args>",
			"void debug_internal(int l, const char *context, T &&first, Args &&...args) {",
			"    constexpr const char *open_brackets = (sizeof...(args) == 0 ? \"\" : \"(\");",
			"    constexpr const char *close_brackets = (sizeof...(args) == 0 ? \"\" : \")\");",
			"    std::cerr << \"[L\" << l << \"] \" << open_brackets << context << close_brackets << \": \"",
			"              << open_brackets << std::forward<T>(first);",
			"    ((std::cerr << \", \" << std::forward<Args>(args)), ...);",
			"    std::cerr << close_brackets << std::endl;",
			"}",
			"",
			"template <class Class>",
			"void dline_internal(int l, const char *context, const Class &a) {",
			"    std::cerr << \"[L\" << l << \"] \" << context << \": \";",
			"    int cnt = 0;",
			"    for(const auto &elem : a) std::cerr << (cnt++ == 0 ? \"\" : \" \") << elem;",
			"    std::cerr << std::endl;",
			"}",
			"",
			"#else",
			"",
			"#define debug(...) void(0)",
			"#define dline(a) void(0)",
			"",
			"#endif"
		],
		"description": ""
	},
	"Timer": {
		"scope": "cpp",
		"prefix": "Timer",
		"body": [
			"class Timer {",
			"    std::chrono::system_clock::time_point m_start;",
			"",
			"public:",
			"    Timer() : m_start(std::chrono::system_clock::now()) {}",
			"",
			"    // 計測開始時間を保存する．",
			"    void restart() { m_start = std::chrono::system_clock::now(); }",
			"    // 経過時間を返す．[msec].",
			"    auto elapsed() const {",
			"        auto now = std::chrono::system_clock::now();",
			"        return std::chrono::duration_cast<std::chrono::milliseconds>(now - m_start).count();",
			"    }",
			"};"
		],
		"description": ""
	},
	"I/O of std::vector": {
		"scope": "cpp",
		"prefix": "I/O of std::vector",
		"body": [
			"template <typename Type>",
			"std::istream &operator>>(std::istream &is, std::vector<Type> &v) {",
			"    for(auto &in : v) is >> in;",
			"    return is;",
			"}",
			"",
			"template <typename Type>",
			"std::ostream &operator<<(std::ostream &os, const std::vector<Type> &v) {",
			"    int cnt = 0;",
			"    for(const auto &out : v) os << (cnt++ ? \" \" : \"\") << out;",
			"    return os;",
			"}"
		],
		"description": ""
	},
	"line": {
		"scope": "cpp",
		"prefix": "line",
		"body": [
			"template <class Class>",
			"void line(const Class &a, std::string delim = \" \") {",
			"    int cnt = 0;",
			"    for(const auto &elem : a) std::cout << (cnt++ == 0 ? \"\" : delim) << elem;",
			"    std::cout << std::endl;",
			"}"
		],
		"description": ""
	},
	"print_table": {
		"scope": "cpp",
		"prefix": "print_table",
		"body": [
			"template <typename Type>",
			"int print_table(std::ostream &os, const Type &value, int depth = 0, int cnt = 0) {",
			"    os << value;",
			"    if(depth == 0) os << std::endl;",
			"    return depth;",
			"}",
			"",
			"template <class Class>",
			"int print_table(std::ostream &os, const std::vector<Class> &table, int depth = 0, int cnt = 0) {",
			"    if(cnt > 0) {",
			"        for(int i = 0; i < depth; ++i) os << ' ';",
			"    }",
			"    os << '[';",
			"    depth++;",
			"    int res = 0;",
			"    int cnt2 = 0;",
			"    for(const auto &v : table) {",
			"        if(cnt2 > 0) os << (res == depth ? ' ' : '\\n');",
			"        res = print_table(os, v, depth, cnt2++);",
			"    }",
			"    os << ']';",
			"    if(depth == 1) os << std::endl;",
			"    return res;",
			"}"
		],
		"description": ""
	},
	"split": {
		"scope": "cpp",
		"prefix": "split",
		"body": [
			"// 文字列分割．指定の文字delimで分割する．",
			"std::vector<std::string> split(const std::string &s, char delim) {",
			"    std::vector<std::string> res;",
			"    std::stringstream ss(s);",
			"    std::string item;",
			"    while(std::getline(ss, item, delim)) {",
			"        if(!item.empty()) res.push_back(item);",
			"    }",
			"    return res;",
			"}",
			"",
			"// 文字列分割．指定の文字列delimで分割する．",
			"std::vector<std::string> split(const std::string &s, const std::string &delim) {",
			"    std::vector<std::string> res;",
			"    const auto length = delim.size();",
			"    auto offset = std::string::size_type(0);",
			"    while(1) {",
			"        auto pos = s.find(delim, offset);",
			"        if(pos == std::string::npos) {",
			"            res.push_back(s.substr(offset));",
			"            break;",
			"        }",
			"        res.push_back(s.substr(offset, pos - offset));",
			"        offset = pos + length;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "文字列分割"
	},
	"table": {
		"scope": "cpp",
		"prefix": "table",
		"body": [
			"template <typename Type>",
			"inline std::vector<Type> table(size_t n, Type val) { return std::vector<Type>(n, val); }",
			"",
			"template <class... Args>",
			"auto table(size_t n, Args &&...args) {",
			"    auto val = table(std::forward<Args>(args)...);",
			"    return std::vector<decltype(val)>(n, std::move(val));",
			"}"
		],
		"description": ""
	},
	"Declaration of SegmentTree (RMQ)": {
		"scope": "cpp",
		"prefix": "SegmentTree (RMQ)",
		"body": [
			"using T=${1:int};",
			"auto op=[](T a,T b)->T{return ${2:max(a,b)};};",
			"const T e=${3:-INF};",
			"SegmentTree<T> tree(op,e,${4:0});"
		],
		"description": "SegmentTree (RMQ) の宣言"
	}
}