{
	// Place your algorithm ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main template": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i,n)   for(int i=0;i<(int)(n);++i)",
			"#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)",
			"#define ALL(v)     (v).begin(),(v).end()",
			"using llong = long long;",
			"using vi    = std::vector<int>;",
			"using vvi   = std::vector<vi>;",
			"using pii   = std::pair<int,int>;",
			"using namespace std;",
			"constexpr int       INF  = 1e9;",
			"constexpr long long LINF = 1e18;",
			"constexpr double    EPS  = 1e-10;",
			"constexpr int       MOD  = 998'244'353;",
			"constexpr int       MOD2 = 1e9+7;",
			"",
			"int main(){}"
		],
		"description": "Main template"
	},
	"All template": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"#define REP(i,n)   for(int i=0;i<(int)(n);++i)",
			"#define FOR(i,l,r) for(int i=(int)(l);i<(int)(r);++i)",
			"#define ALL(v)     (v).begin(),(v).end()",
			"using llong = long long;",
			"using vi    = std::vector<int>;",
			"using vvi   = std::vector<vi>;",
			"using pii   = std::pair<int,int>;",
			"using namespace std;",
			"constexpr int       INF  = 1e9;",
			"constexpr long long LINF = 1e18;",
			"constexpr double    EPS  = 1e-10;",
			"constexpr int       MOD  = 998'244'353;",
			"constexpr int       MOD2 = 1e9+7;",
			"",
			"template <typename Type>",
			"inline std::istream &operator>>(std::istream &is, std::vector<Type> &v) {",
			"    for(Type &in : v) is >> in;",
			"    return is;",
			"}",
			"",
			"template <typename Type>",
			"inline std::ostream &operator<<(std::ostream &os, const std::vector<Type> &v) {",
			"    for(auto itr = v.cbegin(); itr != v.cend(); ++itr) os << (itr == v.cbegin() ? \"\" : \" \") << *itr;",
			"    return os;",
			"}",
			"",
			"#ifdef DEBUG",
			"",
			"#include \"debug.hpp\"",
			"using namespace algorithm;",
			"",
			"#else",
			"",
			"#define debug(...) static_cast<void>(0)",
			"",
			"#endif",
			"",
			"int main(){}"
		],
		"description": ""
	},
	"DEBUG": {
		"scope": "cpp",
		"prefix": "DEBUG",
		"body": [
			"#define DEBUG",
			"",
			"#ifdef DEBUG",
			"",
			"#define debug(...) debug::debug_internal(__LINE__, #__VA_ARGS__, __VA_ARGS__)",
			"",
			"namespace debug {",
			"",
			"constexpr std::ostream &os = std::cerr;",
			"",
			"struct has_iterator_impl {",
			"    template <class T>",
			"    static constexpr std::true_type check(typename T::iterator *);",
			"",
			"    template <class T>",
			"    static constexpr std::false_type check(...);",
			"};",
			"",
			"template <class T>",
			"class has_iterator : public decltype(has_iterator_impl::check<T>(nullptr)) {};",
			"",
			"// Prototype declaration.",
			"void print(const std::string &s);",
			"void print(const std::string_view &s);",
			"template <typename T, typename U>",
			"void print(const std::pair<T, U> &p);",
			"template <class T, std::size_t... Idx>",
			"void print_tuple(const T &t, std::index_sequence<Idx...>);",
			"template <typename... T>",
			"void print(const std::tuple<T...> &t);",
			"template <typename T>",
			"void print(const std::stack<T> &st);",
			"template <typename T>",
			"void print(const std::queue<T> &que);",
			"template <typename T, typename... U>",
			"void print(const std::priority_queue<T, U...> &pque);",
			"template <typename T, typename std::enable_if_t<has_iterator<T>::value, bool> = false>",
			"void print(const T &v);",
			"template <typename T, typename std::enable_if_t<!has_iterator<T>::value, bool> = false>",
			"void print(const T &elem);",
			"template <typename T, typename... Args>",
			"void debug_internal(int l, std::string_view context, T &&first, Args &&...args);",
			"",
			"void print(const std::string &s) { os << s; }",
			"",
			"void print(const std::string_view &s) { os << s; }",
			"",
			"template <typename T, typename U>",
			"void print(const std::pair<T, U> &p) {",
			"    os << \"{\";",
			"    print(p.first);",
			"    os << \", \";",
			"    print(p.second);",
			"    os << \"}\";",
			"}",
			"",
			"template <class T, std::size_t... Idx>",
			"void print_tuple(const T &t, std::index_sequence<Idx...>) {",
			"    os << \"{\";",
			"    ((os << (Idx == 0 ? \"\" : \", \"), print(std::get<Idx>(t))), ...);",
			"    os << \"}\";",
			"}",
			"",
			"template <typename... T>",
			"void print(const std::tuple<T...> &t) {",
			"    print_tuple(t, std::make_index_sequence<sizeof...(T)>());",
			"}",
			"",
			"template <typename T>",
			"void print(const std::stack<T> &st) {",
			"    std::stack<T> tmp = st;",
			"    os << \"[\";",
			"    while(!tmp.empty()) {",
			"        T elem = tmp.top();",
			"        tmp.pop();",
			"        print(elem);",
			"        if(!tmp.empty()) os << \" \";",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <typename T>",
			"void print(const std::queue<T> &que) {",
			"    std::queue<T> tmp = que;",
			"    os << \"[\";",
			"    while(!tmp.empty()) {",
			"        T elem = tmp.front();",
			"        tmp.pop();",
			"        print(elem);",
			"        if(!tmp.empty()) os << \" \";",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <typename T, typename... U>",
			"void print(const std::priority_queue<T, U...> &pque) {",
			"    std::priority_queue<T, U...> tmp = pque;",
			"    os << \"[\";",
			"    while(!tmp.empty()) {",
			"        T elem = tmp.top();",
			"        tmp.pop();",
			"        print(elem);",
			"        if(!tmp.empty()) os << \" \";",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <class T, typename std::enable_if_t<has_iterator<T>::value, bool> = false>",
			"void print(const T &v) {",
			"    os << \"[\";",
			"    for(auto itr = std::cbegin(v); itr != std::cend(v); ++itr) {",
			"        if(itr != std::cbegin(v)) os << \" \";",
			"        print(*itr);",
			"    }",
			"    os << \"]\";",
			"}",
			"",
			"template <typename T, typename std::enable_if_t<!has_iterator<T>::value, bool> = false>",
			"void print(const T &elem) { os << elem; }",
			"",
			"template <typename T, typename... Args>",
			"void debug_internal(int l, std::string_view context, T &&first, Args &&...args) {",
			"    constexpr const char *open_bracket = (sizeof...(args) == 0 ? \"\" : \"(\");",
			"    constexpr const char *close_bracket = (sizeof...(args) == 0 ? \"\" : \")\");",
			"    os << \"[L\" << l << \"] \" << open_bracket << context << close_bracket << \": \" << open_bracket;",
			"    print(std::forward<T>(first));",
			"    ((os << \", \", print(std::forward<Args>(args))), ...);",
			"    os << close_bracket << std::endl;",
			"}",
			"",
			"}  // namespace debug",
			"",
			"#else",
			"",
			"#define debug(...) static_cast<void>(0)",
			"",
			"#endif"
		],
		"description": ""
	},
	"Timer": {
		"scope": "cpp",
		"prefix": "Timer",
		"body": [
			"class Timer {",
			"    std::chrono::system_clock::time_point m_start;",
			"",
			"public:",
			"    Timer() : m_start(std::chrono::system_clock::now()) {}",
			"",
			"    // 計測開始時間を保存する．",
			"    void restart() { m_start = std::chrono::system_clock::now(); }",
			"    // 経過時間を返す．[millisec].",
			"    auto elapsed() const {",
			"        auto now = std::chrono::system_clock::now();",
			"        return std::chrono::duration_cast<std::chrono::milliseconds>(now - m_start).count();",
			"    }",
			"    // 経過時間を返す．[microsec].",
			"    auto elapsed_micro() const {",
			"        auto now = std::chrono::system_clock::now();",
			"        return std::chrono::duration_cast<std::chrono::microseconds>(now - m_start).count();",
			"    }",
			"};"
		],
		"description": ""
	},
	"chmin, chmax": {
		"scope": "cpp",
		"prefix": "chmin, chmax",
		"body": [
			"template<typename Type> inline bool chmin(Type &a,const Type &b){if(a>b){a=b;return true;}return false;}",
			"template<typename Type> inline bool chmax(Type &a,const Type &b){if(a<b){a=b;return true;}return false;}"
		],
		"description": ""
	},
	"chtoupper, chtolower": {
		"scope": "cpp",
		"prefix": "chtoupper, chtolower",
		"body": [
			"inline bool chtoupper(char &c) {",
			"    if('a' <= c && c <= 'z') {",
			"        c -= 0x20;",
			"        return true;",
			"    }",
			"    return false;",
			"}",
			"",
			"inline bool chtolower(char &c) {",
			"    if('A' <= c && c <= 'Z') {",
			"        c += 0x20;",
			"        return true;",
			"    }",
			"    return false;",
			"}"
		],
		"description": ""
	},
	"compress": {
		"scope": "cpp",
		"prefix": "compress",
		"body": [
			"// 座標圧縮．",
			"template <typename Type>",
			"std::vector<Type> compress(std::vector<Type> &v) {",
			"    const int n = v.size();",
			"    std::vector<Type> res = v;",
			"    std::sort(res.begin(), res.end());",
			"    res.erase(std::unique(res.begin(), res.end()), res.end());",
			"    for(int i = 0; i < n; ++i) v[i] = std::lower_bound(res.begin(), res.end(), v[i]) - res.begin();",
			"    return res;",
			"}"
		],
		"description": "座標圧縮"
	},
	"split": {
		"scope": "cpp",
		"prefix": "split",
		"body": [
			"// 文字列分割．指定の文字delimで分割する．",
			"std::vector<std::string> split(std::string s, char delim, bool erace_empty = true) {",
			"    s = s + std::string({delim});",
			"    std::vector<std::string> res;",
			"    std::stringstream ss(s);",
			"    std::string item;",
			"    while(std::getline(ss, item, delim)) {",
			"        if(!item.empty() or !erace_empty) res.push_back(item);",
			"    }",
			"    return res;",
			"}",
			"",
			"// 文字列分割．指定の文字列delimで分割する．",
			"std::vector<std::string> split(const std::string &s, const std::string &delim, bool erace_empty = true) {",
			"    std::vector<std::string> res;",
			"    const auto length = delim.size();",
			"    auto offset = std::string::size_type(0);",
			"    while(1) {",
			"        auto pos = s.find(delim, offset);",
			"        if(pos == std::string::npos) {",
			"            auto &&item = s.substr(offset);",
			"            if(!item.empty() or !erace_empty) res.push_back(item);",
			"            break;",
			"        }",
			"        auto &&item = s.substr(offset, pos - offset);",
			"        if(!item.empty() or !erace_empty) res.push_back(item);",
			"        offset = pos + length;",
			"    }",
			"    return res;",
			"}"
		],
		"description": "文字列分割"
	},
	"stov, vtos": {
		"scope": "cpp",
		"prefix": "stov, vtos",
		"body": [
			"std::vector<int> stov(const std::string &s) {",
			"    const int n = s.size();",
			"    std::vector<int> v(n);",
			"    for(int i = 0; i < n; ++i) v[i] = s[i];",
			"    return v;",
			"}",
			"",
			"std::string vtos(const std::vector<int> &v) {",
			"    const int n = v.size();",
			"    std::string s(n, 0);",
			"    for(int i = 0; i < n; ++i) {",
			"        assert(0 <= v[i] and v[i] < 128);",
			"        s[i] = v[i];",
			"    }",
			"    return s;",
			"}"
		],
		"description": ""
	},
	"table": {
		"scope": "cpp",
		"prefix": "table",
		"body": [
			"template <typename Type>",
			"inline std::vector<Type> table(size_t n, const Type &val) { return std::vector<Type>(n, val); }",
			"",
			"template <typename... Args>",
			"auto table(size_t n, const Args &...args) {",
			"    auto val = table(args...);",
			"    return std::vector<decltype(val)>(n, std::move(val));",
			"}"
		],
		"description": ""
	},
	"using r_priority_queue": {
		"scope": "cpp",
		"prefix": "using r_priority_queue",
		"body": [
			"template <typename Type>",
			"using r_priority_queue = std::priority_queue<Type, std::vector<Type>, std::greater<Type> >;"
		],
		"description": ""
	},
	"dy[], dx[]": {
		"scope": "cpp",
		"prefix": "dy[], dx[]",
		"body": [
			"const int dy[] = {-1, 0, 0, 1};",
			"const int dx[] = {0, -1, 1, 0};"
		],
		"description": "グリッドの4近傍"
	},
	"ddy[], ddx[]": {
		"scope": "cpp",
		"prefix": "ddy[], ddx[]",
		"body": [
			"const int ddy[8] = {-1, -1, -1, 0, 0, 1, 1, 1};",
			"const int ddx[8] = {-1, 0, 1, -1, 1, -1, 0, 1};"
		],
		"description": "グリッドの8近傍"
	},
	"Declaration of RNG": {
		"scope": "cpp",
		"prefix": "rng",
		"body": [
			"std::random_device seed;                                   // 乱数生成器のシード（非決定的な乱数生成器）．",
			"std::mt19937_64 rng(seed());                               // 決定的な乱数生成器．",
			"std::uniform_int_distribution<long long> uniform(0, 100);  // 範囲[0,100]の離散一様分布．",
			"// std::cerr << uniform(rng) << std::endl;"
		],
		"description": "乱数生成器の宣言"
	},
	"Declaration of SegmentTree (RMQ)": {
		"scope": "cpp",
		"prefix": "SegmentTree (RMQ)",
		"body": [
			"using T=${1:int};",
			"const T e=${3:2*INF};",
			"auto op=[](T a,T b)->T{return ${2:min(a,b)};};",
			"SegmentTree<T> tree(op,e,${4:0});"
		],
		"description": "SegmentTreeの宣言"
	},
	"Declaration of LazySegTree (RMQ, RAQ)": {
		"scope": "cpp",
		"prefix": "LazySegTree (RMQ, RAQ)",
		"body": [
			"using S=int;",
			"using F=int;",
			"const S e=2*INF;",
			"const F id=0;",
			"auto op=[&](const S &l,const S &r)->S{return min(l,r);};",
			"auto mapping=[&](const F &f,const S &x)->S{return x+f;};",
			"auto composition=[&](const F &f,const F &g)->F{return f+g;};",
			"LazySegTree<S,F> tree(op,mapping,composition,e,id,${1:0});"
		],
		"description": "区間min取得，区間加算"
	},
	"Declaration of LazySegTree (RMQ, RUQ)": {
		"scope": "cpp",
		"prefix": "LazySegTree (RMQ, RUQ)",
		"body": [
			"using S=int;",
			"using F=int;",
			"const S e=2*INF;",
			"const F id=2*INF;",
			"auto op=[&](const S &l,const S &r)->S{return min(l,r);};",
			"auto mapping=[&](const F &f,const S &x)->S{return (f==id?x:f);};",
			"auto composition=[&](const F &f,const F &g)->F{return (f==id?g:f);};",
			"LazySegTree<S,F> tree(op,mapping,composition,e,id,${1:0});"
		],
		"description": "区間min取得，区間更新"
	},
	"Declaration of LazySegTree (RSQ, RAQ)": {
		"scope": "cpp",
		"prefix": "LazySegTree (RSQ, RAQ)",
		"body": [
			"using S=struct{",
			"    llong val;",
			"    int size;",
			"};",
			"using F=llong;",
			"const S e=(S){0,0};",
			"const F id=0;",
			"auto op=[&](const S &l,const S &r)->S{return (S){l.val+r.val,l.size+r.size};};",
			"auto mapping=[&](const F &f,const S &x)->S{return (S){x.val+f*x.size,x.size};};",
			"auto composition=[&](const F &f,const F &g)->F{return f+g;};",
			"LazySegTree<S,F> tree(op,mapping,composition,e,id,vector<S>(${1:0},(S){0,1}));"
		],
		"description": "区間和取得，区間加算"
	},
	"Declaration of LazySegTree (RSQ, RMQ)": {
		"scope": "cpp",
		"prefix": "LazySegTree (RSQ, RMQ)",
		"body": [
			"using S=struct{",
			"    llong val;",
			"    int size;",
			"};",
			"using F=struct{",
			"    llong a;",
			"    llong b;",
			"};",
			"const S e=(S){0,0};",
			"const F id=(F){1,0};",
			"auto op=[&](const S &l,const S &r)->S{return (S){l.val+r.val,l.size+r.size};};",
			"auto mapping=[&](const F &f,const S &x)->S{return (S){f.a*x.val+f.b*x.size,x.size};};",
			"auto composition=[&](const F &f,const F &g)->F{return (F){f.a*g.a,f.a*g.b+f.b};};",
			"LazySegTree<S,F> tree(op,mapping,composition,e,id,vector<S>(${1:0},(S){0,1}));"
		],
		"description": "区間和取得，区間積"
	},
	"// I referred to the commentaries.": {
		"prefix": "// I referred to the commentaries.",
		"body": "// I referred to the commentaries."
	}
}